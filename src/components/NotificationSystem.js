import React, { useState, useEffect } from 'react';

const NotificationSystem = ({ userProfile, recentMetrics = [] }) => {
  const [notifications, setNotifications] = useState([]);
  const [showNotifications, setShowNotifications] = useState(false);
  const [buttonPosition, setButtonPosition] = useState({ top: 0, right: 0 });
  const buttonRef = React.useRef(null);

  // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Ç‡∏≠‡∏á‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏¥‡∏î dropdown
  const handleToggleNotifications = () => {
    if (!showNotifications && buttonRef.current) {
      const rect = buttonRef.current.getBoundingClientRect();
      setButtonPosition({
        top: rect.bottom + window.scrollY + 8, // 8px spacing
        right: window.innerWidth - rect.right
      });
    }
    setShowNotifications(!showNotifications);
  };

  useEffect(() => {
    generateNotifications();
  }, [userProfile, recentMetrics]);

  const generateNotifications = () => {
    const newNotifications = [];

    // 1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏õ‡∏µ
    if (userProfile?.date_of_birth) {
      const currentDate = new Date();
      const birthDate = new Date(userProfile.date_of_birth);
      const daysSinceBirth = Math.floor((currentDate - birthDate) / (1000 * 60 * 60 * 24));
      const daysSinceLastYearCheck = daysSinceBirth % 365;
      
      if (daysSinceLastYearCheck >= 350) { // ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏≠‡∏µ‡∏Å 15 ‡∏ß‡∏±‡∏ô‡∏Å‡πá‡∏Ñ‡∏£‡∏ö‡∏£‡∏≠‡∏ö‡∏õ‡∏µ
        newNotifications.push({
          id: 'annual_checkup',
          type: 'reminder',
          title: '‚è∞ ‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏õ‡∏µ',
          message: '‡∏ñ‡∏∂‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏õ‡∏µ‡πÅ‡∏•‡πâ‡∏ß ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡πÇ‡∏£‡∏Ñ‡πÅ‡∏•‡∏∞‡∏î‡∏π‡πÅ‡∏•‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ï‡πà‡∏≠‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á',
          priority: 'high',
          icon: 'üè•',
          color: 'blue'
        });
      }
    }

    // 2. ‡∏ï‡∏£‡∏ß‡∏à‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô‡πÇ‡∏•‡∏´‡∏¥‡∏ï
    const latestBP = recentMetrics.find(m => m.systolic_bp && m.diastolic_bp);
    if (latestBP) {
      if (latestBP.systolic_bp >= 140 || latestBP.diastolic_bp >= 90) {
        newNotifications.push({
          id: 'high_bp',
          type: 'alert',
          title: '‚ö†Ô∏è ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô‡πÇ‡∏•‡∏´‡∏¥‡∏ï‡∏™‡∏π‡∏á',
          message: `‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì ${latestBP.systolic_bp}/${latestBP.diastolic_bp} ‡∏™‡∏π‡∏á‡∏Å‡∏ß‡πà‡∏≤‡∏õ‡∏Å‡∏ï‡∏¥ ‡∏Ñ‡∏ß‡∏£‡∏û‡∏±‡∏Å‡∏ú‡πà‡∏≠‡∏ô‡πÉ‡∏´‡πâ‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠‡πÅ‡∏•‡∏∞‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÄ‡∏Ñ‡πá‡∏°`,
          priority: 'high',
          icon: 'üíì',
          color: 'red'
        });
      } else if (latestBP.systolic_bp <= 90 || latestBP.diastolic_bp <= 60) {
        newNotifications.push({
          id: 'low_bp',
          type: 'alert',
          title: '‚ö†Ô∏è ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô‡πÇ‡∏•‡∏´‡∏¥‡∏ï‡∏ï‡πà‡∏≥',
          message: `‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì ${latestBP.systolic_bp}/${latestBP.diastolic_bp} ‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤‡∏õ‡∏Å‡∏ï‡∏¥ ‡∏Ñ‡∏ß‡∏£‡∏î‡∏∑‡πà‡∏°‡∏ô‡πâ‡∏≥‡πÉ‡∏´‡πâ‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠‡πÅ‡∏•‡∏∞‡∏´‡∏≤‡∏Å‡∏°‡∏µ‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡∏Ñ‡∏ß‡∏£‡∏õ‡∏£‡∏∂‡∏Å‡∏©‡∏≤‡πÅ‡∏û‡∏ó‡∏¢‡πå`,
          priority: 'medium',
          icon: 'üíì',
          color: 'orange'
        });
      }
    }

    // 3. ‡∏ï‡∏£‡∏ß‡∏à‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏•‡πÉ‡∏ô‡πÄ‡∏•‡∏∑‡∏≠‡∏î
    const latestSugar = recentMetrics.find(m => m.blood_sugar_mg);
    if (latestSugar) {
      if (latestSugar.blood_sugar_mg >= 126) {
        newNotifications.push({
          id: 'high_sugar',
          type: 'alert',
          title: '‚ö†Ô∏è ‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏•‡πÉ‡∏ô‡πÄ‡∏•‡∏∑‡∏≠‡∏î‡∏™‡∏π‡∏á',
          message: `‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏•‡πÉ‡∏ô‡πÄ‡∏•‡∏∑‡∏≠‡∏î‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì ${latestSugar.blood_sugar_mg} mg/dL ‡∏™‡∏π‡∏á‡∏Å‡∏ß‡πà‡∏≤‡∏õ‡∏Å‡∏ï‡∏¥ ‡∏Ñ‡∏ß‡∏£‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÅ‡∏•‡∏∞‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢`,
          priority: 'high',
          icon: 'üçØ',
          color: 'red'
        });
      }
    }

    // 4. ‡∏ï‡∏£‡∏ß‡∏à‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡πâ‡∏ô‡∏´‡∏±‡∏ß‡πÉ‡∏à
    const latestHR = recentMetrics.find(m => m.heart_rate);
    if (latestHR) {
      if (latestHR.heart_rate > 100) {
        newNotifications.push({
          id: 'high_hr',
          type: 'alert',
          title: '‚ö†Ô∏è ‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡πâ‡∏ô‡∏´‡∏±‡∏ß‡πÉ‡∏à‡πÄ‡∏£‡πá‡∏ß',
          message: `‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡πâ‡∏ô‡∏´‡∏±‡∏ß‡πÉ‡∏à‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì ${latestHR.heart_rate} bpm ‡πÄ‡∏£‡πá‡∏ß‡∏Å‡∏ß‡πà‡∏≤‡∏õ‡∏Å‡∏ï‡∏¥ ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢‡∏Ñ‡∏ß‡∏£‡∏û‡∏±‡∏Å‡∏ú‡πà‡∏≠‡∏ô`,
          priority: 'medium',
          icon: 'üíó',
          color: 'orange'
        });
      }
    }

    setNotifications(newNotifications);
  };

  const getPriorityColor = (priority) => {
    switch (priority) {
      case 'high': return 'border-red-400 bg-red-50';
      case 'medium': return 'border-orange-400 bg-orange-50';
      default: return 'border-blue-400 bg-blue-50';
    }
  };

  const getTextColor = (priority) => {
    switch (priority) {
      case 'high': return 'text-red-800';
      case 'medium': return 'text-orange-800';
      default: return 'text-blue-800';
    }
  };

  return (
    <div className="relative">
      {/* Notification Bell */}
      <button
        ref={buttonRef}
        onClick={handleToggleNotifications}
        className="relative p-2 bg-blue-100 hover:bg-blue-200 rounded-full transition-colors"
      >
        <span className="text-2xl">üîî</span>
        {notifications.length > 0 && (
          <span className="absolute -top-1 -right-1 bg-red-500 text-white text-xs rounded-full w-5 h-5 flex items-center justify-center font-bold">
            {notifications.length}
          </span>
        )}
      </button>

      {/* Notifications Dropdown */}
      {showNotifications && (
        <>
          {/* Background overlay */}
          <div 
            className="fixed inset-0"
            style={{zIndex: 9998}}
            onClick={() => setShowNotifications(false)}
          />
          <div 
            className="fixed w-80 bg-white rounded-lg shadow-xl border-2 border-blue-200 max-h-96 overflow-y-auto" 
            style={{
              zIndex: 9999,
              top: `${buttonPosition.top}px`,
              right: `${buttonPosition.right}px`
            }}
          >
            <div className="p-4 bg-blue-600 text-white rounded-t-lg">
              <h3 className="text-lg font-bold">‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô</h3>
              <p className="text-blue-100 text-sm">‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì</p>
            </div>
          
          {notifications.length === 0 ? (
            <div className="p-6 text-center text-gray-500">
              <span className="text-4xl block mb-2">‚úÖ</span>
              <p className="text-lg font-medium">‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô</p>
              <p className="text-sm">‡∏Ñ‡πà‡∏≤‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏õ‡∏Å‡∏ï‡∏¥</p>
            </div>
          ) : (
            <div className="p-2">
              {notifications.map((notification) => (
                <div
                  key={notification.id}
                  className={`p-4 m-2 rounded-lg border-l-4 ${getPriorityColor(notification.priority)} ${getTextColor(notification.priority)}`}
                >
                  <div className="flex items-start space-x-3">
                    <span className="text-2xl">{notification.icon}</span>
                    <div className="flex-1">
                      <h4 className="font-bold text-base mb-1">{notification.title}</h4>
                      <p className="text-sm leading-relaxed">{notification.message}</p>
                    </div>
                  </div>
                </div>
              ))}
            </div>
          )}
          
          <div className="p-4 bg-gray-50 rounded-b-lg border-t border-gray-200">
            <p className="text-xs text-gray-600 text-center">
              üí° ‡∏´‡∏≤‡∏Å‡∏°‡∏µ‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥ ‡∏Ñ‡∏ß‡∏£‡∏õ‡∏£‡∏∂‡∏Å‡∏©‡∏≤‡πÅ‡∏û‡∏ó‡∏¢‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°
            </p>
          </div>
          </div>
        </>
      )}
    </div>
  );
};

export default NotificationSystem;
