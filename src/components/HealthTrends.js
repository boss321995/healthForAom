import React, { useEffect, useState } from 'react';
import { Line, Bar } from 'react-chartjs-2';
import 'chart.js/auto';

// ‡∏™‡∏µ‡∏™‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏ß‡∏¢‡∏á‡∏≤‡∏°‡πÅ‡∏•‡∏∞‡∏°‡∏µ‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï‡∏ä‡∏µ‡∏ß‡∏≤
const colors = {
  weight: {
    primary: '#10B981', // ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß‡∏™‡∏î‡πÉ‡∏™
    secondary: '#D1FAE5',
    gradient: 'linear-gradient(135deg, #10B981 0%, #34D399 100%)'
  },
  bp_systolic: {
    primary: '#EF4444', // ‡πÅ‡∏î‡∏á‡∏™‡∏î‡πÉ‡∏™
    secondary: '#FEE2E2',
    gradient: 'linear-gradient(135deg, #EF4444 0%, #F87171 100%)'
  },
  bp_diastolic: {
    primary: '#F59E0B', // ‡∏™‡πâ‡∏°‡∏™‡∏î‡πÉ‡∏™
    secondary: '#FEF3C7',
    gradient: 'linear-gradient(135deg, #F59E0B 0%, #FBBF24 100%)'
  },
  heart_rate: {
    primary: '#EC4899', // ‡∏ä‡∏°‡∏û‡∏π‡∏™‡∏î‡πÉ‡∏™
    secondary: '#FCE7F3',
    gradient: 'linear-gradient(135deg, #EC4899 0%, #F472B6 100%)'
  },
  blood_sugar: {
    primary: '#8B5CF6', // ‡∏°‡πà‡∏ß‡∏á‡∏™‡∏î‡πÉ‡∏™
    secondary: '#EDE9FE',
    gradient: 'linear-gradient(135deg, #8B5CF6 0%, #A78BFA 100%)'
  }
};

const metricLabels = {
  weight_kg: { label: '‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å', unit: '‡∏Å‡∏Å.', icon: '‚öñÔ∏è', color: 'weight' },
  systolic_bp: { label: '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ö‡∏ô', unit: 'mmHg', icon: 'üíó', color: 'bp_systolic' },
  diastolic_bp: { label: '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏•‡πà‡∏≤‡∏á', unit: 'mmHg', icon: '‚ù§Ô∏è', color: 'bp_diastolic' },
  heart_rate: { label: '‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡πâ‡∏ô‡∏´‡∏±‡∏ß‡πÉ‡∏à', unit: '‡∏Ñ‡∏£‡∏±‡πâ‡∏á/‡∏ô‡∏≤‡∏ó‡∏µ', icon: 'üíì', color: 'heart_rate' },
  blood_sugar_mg: { label: '‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏•‡πÉ‡∏ô‡πÄ‡∏•‡∏∑‡∏≠‡∏î', unit: 'mg/dL', icon: 'üçØ', color: 'blood_sugar' }
};

export default function HealthTrends({ userId }) {
  const [metrics, setMetrics] = useState([]);
  const [selected, setSelected] = useState('weight_kg');
  const [loading, setLoading] = useState(true);
  const [chartType, setChartType] = useState('line'); // line ‡∏´‡∏£‡∏∑‡∏≠ bar

  useEffect(() => {
    async function fetchMetrics() {
      setLoading(true);
      try {
        const token = localStorage.getItem('healthToken');
        const headers = token ? { Authorization: `Bearer ${token}` } : {};
  const res = await fetch('/api/health-metrics?limit=30', { headers });
        const data = await res.json();
        setMetrics(data.reverse()); // ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏à‡∏≤‡∏Å‡πÄ‡∏Å‡πà‡∏≤‡πÑ‡∏õ‡πÉ‡∏´‡∏°‡πà
      } catch (e) {
        setMetrics([]);
      }
      setLoading(false);
    }
    fetchMetrics();
  }, []);

  const selectedMetric = metricLabels[selected];
  const colorScheme = colors[selectedMetric.color];

  // ‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á (‡∏¢‡∏≠‡∏°‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ï‡πà‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å)
  const validMetrics = metrics.filter(m => {
    const value = m[selected];
    if (value == null || value === undefined || value === '') return false;
    // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å ‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏• ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô ‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡πâ‡∏ô‡∏´‡∏±‡∏ß‡πÉ‡∏à - ‡πÑ‡∏°‡πà‡∏Ñ‡∏ß‡∏£‡πÄ‡∏õ‡πá‡∏ô 0 ‡∏à‡∏£‡∏¥‡∏á‡πÜ
    if (['weight_kg', 'systolic_bp', 'diastolic_bp', 'heart_rate', 'blood_sugar_mg'].includes(selected) && value === 0) return false;
    const num = typeof value === 'string' ? parseFloat(value) : Number(value);
    return !isNaN(num) && num >= 0; // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏à‡∏≤‡∏Å > 0 ‡πÄ‡∏õ‡πá‡∏ô >= 0 ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤ 0 ‡πÉ‡∏ô‡∏ö‡∏≤‡∏á‡∏Å‡∏£‡∏ì‡∏µ
  });

  // ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏£‡∏≤‡∏ü‡πÅ‡∏ô‡∏ß‡∏ô‡∏≠‡∏ô
  const chartData = {
    labels: validMetrics.map(m => {
      const date = new Date(m.measurement_date);
      return `${date.getDate()}/${date.getMonth() + 1}`;
    }),
    datasets: [
      {
        label: `${selectedMetric.label} (${selectedMetric.unit})`,
        data: validMetrics.map(m => {
          const value = m[selected];
          const num = typeof value === 'string' ? parseFloat(value) : Number(value);
          return num;
        }),
        backgroundColor: chartType === 'bar' ? 
          validMetrics.map(() => colorScheme.primary + '80') : // ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÇ‡∏õ‡∏£‡πà‡∏á‡πÉ‡∏™ 50%
          colorScheme.secondary,
        borderColor: colorScheme.primary,
        borderWidth: 3,
        fill: chartType === 'line',
        tension: 0.4,
        pointRadius: 6,
        pointHoverRadius: 8,
        pointBackgroundColor: '#FFFFFF',
        pointBorderColor: colorScheme.primary,
        pointBorderWidth: 3,
        pointHoverBackgroundColor: colorScheme.primary,
        pointHoverBorderColor: '#FFFFFF',
        pointHoverBorderWidth: 3,
      },
    ],
  };

  const chartOptions = {
    indexAxis: chartType === 'bar' ? 'y' : 'x', // ‡πÅ‡∏ô‡∏ß‡∏ô‡∏≠‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö bar chart
    responsive: true,
    maintainAspectRatio: false,
    plugins: {
      legend: { 
        display: true,
        position: 'top',
        labels: {
          usePointStyle: true,
          font: { size: 14, weight: 'bold' },
          color: '#1F2937',
          padding: 20
        }
      },
      tooltip: {
        backgroundColor: 'rgba(0, 0, 0, 0.9)',
        titleColor: '#FFFFFF',
        bodyColor: '#FFFFFF',
        borderColor: colorScheme.primary,
        borderWidth: 2,
        cornerRadius: 12,
        displayColors: false,
        titleFont: { size: 14, weight: 'bold' },
        bodyFont: { size: 13 },
        padding: 12,
        callbacks: {
          title: (context) => {
            const date = metrics[context[0].dataIndex]?.measurement_date;
            return date ? `üìÖ ${new Date(date).toLocaleDateString('th-TH', {
              year: 'numeric',
              month: 'long', 
              day: 'numeric'
            })}` : '';
          },
          label: (context) => {
            const value = chartType === 'bar' ? context.parsed.x : context.parsed.y;
            return `${selectedMetric.icon} ${selectedMetric.label}: ${value} ${selectedMetric.unit}`;
          },
        },
      },
    },
    scales: {
      x: {
        display: true,
        position: chartType === 'bar' ? 'top' : 'bottom',
        ticks: { 
          color: '#374151', 
          font: { size: chartType === 'bar' ? 14 : 12, weight: '600' },
          maxTicksLimit: chartType === 'bar' ? 6 : 8,
          padding: chartType === 'bar' ? 8 : 4
        },
        grid: { 
          color: chartType === 'bar' ? '#D1D5DB' : '#E5E7EB',
          lineWidth: chartType === 'bar' ? 2 : 1,
          drawBorder: true,
          borderColor: '#9CA3AF',
          borderWidth: 2
        },
        title: {
          display: true,
          text: chartType === 'bar' ? `${selectedMetric.label} (${selectedMetric.unit})` : '‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà',
          color: '#1F2937',
          font: { size: 15, weight: 'bold' },
          padding: 16
        }
      },
      y: {
        display: true,
        position: chartType === 'bar' ? 'left' : 'left',
        ticks: { 
          color: '#374151', 
          font: { size: chartType === 'bar' ? 12 : 12, weight: '500' },
          padding: chartType === 'bar' ? 12 : 4,
          callback: function(value, index) {
            if (chartType === 'bar') {
              // ‡πÅ‡∏™‡∏î‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏ö‡∏ö‡∏¢‡πà‡∏≠‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏Å‡∏ô Y ‡πÉ‡∏ô‡∏Å‡∏£‡∏≤‡∏ü‡πÅ‡∏ó‡πà‡∏á
              const date = metrics[index]?.measurement_date;
              if (date) {
                return new Date(date).toLocaleDateString('th-TH', {
                  month: 'short',
                  day: 'numeric'
                });
              }
              return value;
            }
            return value;
          }
        },
        grid: { 
          color: chartType === 'bar' ? '#E5E7EB' : '#E5E7EB',
          lineWidth: 1,
          drawBorder: true,
          borderColor: '#9CA3AF',
          borderWidth: 1
        },
        title: {
          display: chartType === 'line',
          text: `${selectedMetric.label} (${selectedMetric.unit})`,
          color: '#1F2937',
          font: { size: 15, weight: 'bold' },
          padding: 16
        }
      }
    },
    elements: {
      line: {
        borderCapStyle: 'round',
        borderJoinStyle: 'round',
        tension: 0.4, // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡πÇ‡∏Ñ‡πâ‡∏á‡πÉ‡∏´‡πâ‡πÄ‡∏™‡πâ‡∏ô
        borderWidth: 3
      },
      point: {
        radius: chartType === 'line' ? 6 : 0,
        hoverRadius: chartType === 'line' ? 8 : 0,
        borderWidth: 2
      },
      bar: {
        borderRadius: chartType === 'bar' ? 8 : 0,
        borderSkipped: false,
        borderWidth: 2
      }
    },
    interaction: {
      intersect: false,
      mode: 'index'
    },
    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏£‡∏≤‡∏ü‡πÅ‡∏ó‡πà‡∏á‡πÅ‡∏ô‡∏ß‡∏ô‡∏≠‡∏ô
    layout: {
      padding: {
        top: chartType === 'bar' ? 20 : 10,
        right: 20,
        bottom: chartType === 'bar' ? 10 : 20,
        left: chartType === 'bar' ? 80 : 20
      }
    }
  };

  // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥ (‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ï‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å)
  const rawValues = metrics.map(m => m[selected]);
  const values = metrics
    .map(m => m[selected])
    .filter(v => v != null && v !== undefined && v !== '')
    .map(v => {
      const num = typeof v === 'string' ? parseFloat(v) : Number(v);
      // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç (‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô ‡∏ä‡∏µ‡∏û‡∏à‡∏£ ‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏•) ‡πÑ‡∏°‡πà‡∏Ñ‡∏ß‡∏£‡πÄ‡∏õ‡πá‡∏ô 0
      if (['weight_kg', 'systolic_bp', 'diastolic_bp', 'heart_rate', 'blood_sugar_mg'].includes(selected) && num === 0) return null;
      return isNaN(num) || num < 0 ? null : num; // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏à‡∏≤‡∏Å <= 0 ‡πÄ‡∏õ‡πá‡∏ô < 0
    })
    .filter(v => v !== null);

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô‡πÇ‡∏•‡∏´‡∏¥‡∏ï
  if ((selected === 'systolic_bp' || selected === 'diastolic_bp') && values.length === 0) {
    console.warn(`‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ${selected} ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á. ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏î‡∏¥‡∏ö:`, rawValues);
  }
    
  // ‡πÄ‡∏û‡∏¥‡πà‡∏° debug log
  console.log('üîç Debug HealthTrends:', {
    selected,
    selectedMetric: metricLabels[selected],
    metricsCount: metrics.length,
    validValuesCount: values.length,
    rawValues: rawValues.slice(0, 3),
    processedValues: values.slice(0, 3),
    stats: stats,
    firstMetric: metrics[0],
    availableKeys: metrics.length > 0 ? Object.keys(metrics[0]) : []
  });
    
  const stats = values.length > 0 ? {
    latest: values[values.length - 1] || 0,
    highest: values.length > 0 ? Math.max(...values) : 0,
    lowest: values.length > 0 ? Math.min(...values) : 0,
    average: values.length > 0 ? parseFloat((values.reduce((a, b) => a + b, 0) / values.length).toFixed(1)) : 0
  } : null;

  return (
    <div className="bg-gradient-to-br from-blue-50 via-white to-purple-50 rounded-2xl p-8 shadow-xl border border-blue-200 max-w-6xl mx-auto mt-8">
      {/* Header */}
      <div className="text-center mb-8">
        <h2 className="text-4xl font-bold bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent mb-3">
          üìä ‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û
        </h2>
        <p className="text-gray-600 text-lg">
          ‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡πÅ‡∏•‡∏∞‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏Ç‡∏∂‡πâ‡∏ô (‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ï‡πà‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å)
        </p>
      </div>

      {/* ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• */}
      <div className="mb-6">
        <h3 className="text-lg font-semibold text-gray-700 mb-3">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏î‡∏π:</h3>
        <div className="grid grid-cols-2 md:grid-cols-5 gap-3">
          {Object.entries(metricLabels).map(([key, metric]) => {
            const colorScheme = colors[metric.color];
            return (
              <button
                key={key}
                className={`relative overflow-hidden p-4 rounded-xl font-medium border-2 transition-all duration-300 transform hover:scale-105 ${
                  selected === key 
                    ? 'border-transparent text-white shadow-lg' 
                    : 'bg-white text-gray-700 border-gray-200 hover:border-gray-300 shadow-sm'
                }`}
                style={selected === key ? {
                  background: colorScheme.gradient,
                  boxShadow: `0 8px 25px ${colorScheme.primary}30`
                } : {}}
                onClick={() => setSelected(key)}
              >
                <div className="flex flex-col items-center">
                  <span className="text-2xl mb-1">{metric.icon}</span>
                  <span className="text-sm font-semibold">{metric.label}</span>
                </div>
              </button>
            );
          })}
        </div>
      </div>

      {/* ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏£‡∏≤‡∏ü */}
      <div className="mb-6">
        <h3 className="text-lg font-semibold text-gray-700 mb-3">‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•:</h3>
        <div className="flex gap-3">
          <button
            className={`px-6 py-3 rounded-xl font-medium transition-all duration-300 ${
              chartType === 'line' 
                ? 'bg-blue-500 text-white shadow-lg' 
                : 'bg-white text-blue-600 border-2 border-blue-200 hover:bg-blue-50'
            }`}
            onClick={() => setChartType('line')}
          >
            üìà ‡∏Å‡∏£‡∏≤‡∏ü‡πÄ‡∏™‡πâ‡∏ô
          </button>
          <button
            className={`px-6 py-3 rounded-xl font-medium transition-all duration-300 ${
              chartType === 'bar' 
                ? 'bg-purple-500 text-white shadow-lg' 
                : 'bg-white text-purple-600 border-2 border-purple-200 hover:bg-purple-50'
            }`}
            onClick={() => setChartType('bar')}
          >
            üìä ‡∏Å‡∏£‡∏≤‡∏ü‡πÅ‡∏ó‡πà‡∏á‡πÅ‡∏ô‡∏ß‡∏ô‡∏≠‡∏ô
          </button>
        </div>
      </div>

      {/* ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏î‡πà‡∏ß‡∏ô - ‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ï‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å */}
      {stats && validMetrics.length > 0 ? (
        <div className="grid grid-cols-2 md:grid-cols-4 gap-4 mb-6">
          <div className="bg-white rounded-xl p-4 text-center shadow-md border border-gray-100">
            <div className="text-2xl font-bold text-blue-600">
              {stats.latest !== undefined && stats.latest !== null && !isNaN(stats.latest) ? stats.latest : '--'}
            </div>
            <div className="text-sm text-gray-600">‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î</div>
          </div>
          <div className="bg-white rounded-xl p-4 text-center shadow-md border border-gray-100">
            <div className="text-2xl font-bold text-green-600">
              {stats.highest !== undefined && stats.highest !== null && !isNaN(stats.highest) && stats.highest > 0 ? stats.highest : '--'}
            </div>
            <div className="text-sm text-gray-600">‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î</div>
          </div>
          <div className="bg-white rounded-xl p-4 text-center shadow-md border border-gray-100">
            <div className="text-2xl font-bold text-orange-600">
              {stats.lowest !== undefined && stats.lowest !== null && !isNaN(stats.lowest) && stats.lowest > 0 ? stats.lowest : '--'}
            </div>
            <div className="text-sm text-gray-600">‡∏ï‡πà‡∏≥‡∏™‡∏∏‡∏î</div>
          </div>
          <div className="bg-white rounded-xl p-4 text-center shadow-md border border-gray-100">
            <div className="text-2xl font-bold text-purple-600">
              {stats.average !== undefined && stats.average !== null && !isNaN(stats.average) && stats.average > 0 ? stats.average : '--'}
            </div>
            <div className="text-sm text-gray-600">‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢</div>
          </div>
        </div>
      ) : validMetrics.length === 0 && metrics.length > 0 ? (
        <div className="mb-6 p-4 bg-yellow-50 border border-yellow-200 rounded-lg">
          <div className="flex items-start">
            <span className="text-yellow-600 mr-2">üí°</span>
            <div className="text-yellow-800">
              <strong>‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• {selectedMetric.label} ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡πÅ‡∏•‡πâ‡∏ß!</strong> 
              <div className="text-sm mt-1">
                ‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î {metrics.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ ‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ {values.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
              </div>
              {values.length === 0 && (
                <div className="text-sm mt-2">
                  ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ü‡∏¥‡∏•‡∏î‡πå "{selected}" ‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á (‡πÑ‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô 0, null ‡∏´‡∏£‡∏∑‡∏≠‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ß‡πà‡∏≤‡∏á)
                </div>
              )}
              <div className="text-xs mt-2 p-2 bg-white rounded border">
                <strong>Debug Info:</strong><br/>
                - ‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ: {selected}<br/>
                - ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏î‡∏¥‡∏ö: {JSON.stringify(rawValues.slice(0, 5))}...<br/>
                - ‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÉ‡∏ô DB: {metrics.length > 0 ? Object.keys(metrics[0]).join(', ') : '‡πÑ‡∏°‡πà‡∏°‡∏µ'}
              </div>
            </div>
          </div>
        </div>
      ) : null}

      {/* ‡∏Å‡∏£‡∏≤‡∏ü */}
      <div className="bg-white rounded-xl p-6 shadow-lg border border-gray-100 mb-6">
        {loading ? (
          <div className="flex items-center justify-center py-20">
            <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-500"></div>
            <span className="ml-3 text-blue-600 font-medium">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...</span>
          </div>
        ) : validMetrics.length === 0 ? (
          <div className="text-center py-20">
            <div className="text-6xl mb-4">üìä</div>
            <div className="text-gray-500 text-lg">‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• {selectedMetric.label} ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏£‡∏≤‡∏ü</div>
            <div className="text-gray-400 text-sm mt-2">
              {metrics.length > 0 
                ? `‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ${metrics.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ ‡πÅ‡∏ï‡πà‡∏Ñ‡πà‡∏≤‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á (‡πÄ‡∏õ‡πá‡∏ô 0, null ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç)`
                : '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°'}
            </div>
          </div>
        ) : (
          <div>
            {/* ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å */}
            <div className="mb-4 p-4 bg-gradient-to-r from-blue-50 to-purple-50 rounded-lg border border-blue-200">
              <div className="flex items-center justify-between">
                <div className="flex items-center">
                  <span className="text-2xl mr-3">{selectedMetric.icon}</span>
                  <div>
                    <h4 className="text-lg font-bold text-gray-800">{selectedMetric.label}</h4>
                    <p className="text-sm text-gray-600">
                      {chartType === 'line' ? '‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏ï‡∏≤‡∏°‡πÄ‡∏ß‡∏•‡∏≤' : '‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ß‡∏±‡∏ô'}
                    </p>
                  </div>
                </div>
                <div className="text-right">
                  <div className="text-sm text-gray-500">‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ</div>
                  <div className="text-xl font-bold text-blue-600">{validMetrics.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£</div>
                  {validMetrics.length === 1 && (
                    <div className="text-xs text-green-600 mt-1">‚ú® ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÅ‡∏•‡πâ‡∏ß! ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°</div>
                  )}
                </div>
              </div>
            </div>
            
            {/* ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏£‡∏≤‡∏ü ‡πÅ‡∏°‡πâ‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏à‡∏∏‡∏î‡πÄ‡∏î‡∏µ‡∏¢‡∏ß */}
            <div style={{ height: chartType === 'bar' ? '600px' : '450px' }}>
              {chartType === 'line' ? (
                <Line data={chartData} options={chartOptions} />
              ) : (
                <Bar data={chartData} options={chartOptions} />
              )}
            </div>
            
            {/* ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡πâ‡∏≠‡∏¢ */}
            {validMetrics.length === 1 && (
              <div className="mt-4 p-4 bg-green-50 border border-green-200 rounded-lg">
                <div className="flex items-start">
                  <span className="text-green-600 mr-2">üéâ</span>
                  <div className="text-sm text-green-700">
                    <strong>‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏î‡πâ‡∏ß‡∏¢!</strong> ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• {selectedMetric.label} ‡πÅ‡∏•‡πâ‡∏ß! 
                    ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô ‡∏Ñ‡∏∏‡∏ì‡∏à‡∏∞‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏´‡πá‡∏ô‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡πÑ‡∏î‡πâ‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô‡∏Ç‡∏∂‡πâ‡∏ô
                  </div>
                </div>
              </div>
            )}
            
            {validMetrics.length >= 2 && validMetrics.length < 5 && (
              <div className="mt-4 p-4 bg-blue-50 border border-blue-200 rounded-lg">
                <div className="flex items-start">
                  <span className="text-blue-600 mr-2">üìà</span>
                  <div className="text-sm text-blue-700">
                    <strong>‡∏î‡∏µ‡∏°‡∏≤‡∏Å!</strong> ‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• {validMetrics.length} ‡∏à‡∏∏‡∏î‡πÅ‡∏•‡πâ‡∏ß ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏´‡πá‡∏ô‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡πÑ‡∏î‡πâ! 
                    ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏µ‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ó‡∏µ‡πà‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡∏¢‡∏¥‡πà‡∏á‡∏Ç‡∏∂‡πâ‡∏ô
                  </div>
                </div>
              </div>
            )}
            
            {/* ‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏£‡∏≤‡∏ü‡πÅ‡∏ó‡πà‡∏á */}
            {chartType === 'bar' && (
              <div className="mt-4 p-3 bg-amber-50 border border-amber-200 rounded-lg">
                <div className="flex items-start">
                  <span className="text-amber-600 mr-2">üí°</span>
                  <div className="text-sm text-amber-700">
                    <strong>‡∏ß‡∏¥‡∏ò‡∏µ‡∏≠‡πà‡∏≤‡∏ô‡∏Å‡∏£‡∏≤‡∏ü‡πÅ‡∏ó‡πà‡∏á‡πÅ‡∏ô‡∏ß‡∏ô‡∏≠‡∏ô:</strong> ‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÅ‡∏ó‡πà‡∏á‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡πà‡∏≤‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ß‡∏±‡∏ô 
                    ‡πÅ‡∏ó‡πà‡∏á‡∏¢‡∏≤‡∏ß‡∏´‡∏°‡∏≤‡∏¢‡∏ñ‡∏∂‡∏á‡∏Ñ‡πà‡∏≤‡∏™‡∏π‡∏á ‡πÅ‡∏ó‡πà‡∏á‡∏™‡∏±‡πâ‡∏ô‡∏´‡∏°‡∏≤‡∏¢‡∏ñ‡∏∂‡∏á‡∏Ñ‡πà‡∏≤‡∏ï‡πà‡∏≥ ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡πÑ‡∏î‡πâ‡∏á‡πà‡∏≤‡∏¢
                  </div>
                </div>
              </div>
            )}
          </div>
        )}
      </div>

      {/* ‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢ */}
      <div className="bg-gradient-to-r from-blue-50 to-purple-50 border-l-4 border-blue-400 p-6 rounded-xl">
        <div className="flex items-start">
          <div className="text-3xl mr-4">üí°</div>
          <div>
            <h4 className="text-lg font-bold text-gray-800 mb-2">‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô</h4>
            <ul className="text-gray-700 space-y-1">
              <li>‚Ä¢ <strong>‡∏Å‡∏£‡∏≤‡∏ü‡πÄ‡∏™‡πâ‡∏ô:</strong> ‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏ï‡∏≤‡∏°‡πÄ‡∏ß‡∏•‡∏≤</li>
              <li>‚Ä¢ <strong>‡∏Å‡∏£‡∏≤‡∏ü‡πÅ‡∏ó‡πà‡∏á‡πÅ‡∏ô‡∏ß‡∏ô‡∏≠‡∏ô:</strong> ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Ñ‡πà‡∏≤‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ß‡∏±‡∏ô‡πÑ‡∏î‡πâ‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô</li>
              <li>‚Ä¢ <strong>‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏î‡πà‡∏ß‡∏ô:</strong> ‡∏î‡∏π‡∏Ñ‡πà‡∏≤‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡πÑ‡∏î‡πâ‡πÉ‡∏ô‡∏û‡∏£‡∏¥‡∏ö‡∏ï‡∏≤</li>
              <li>‚Ä¢ <strong>‡∏Å‡∏≤‡∏£‡πÄ‡∏ù‡πâ‡∏≤‡∏£‡∏∞‡∏ß‡∏±‡∏á:</strong> ‡∏´‡∏≤‡∏Å‡∏û‡∏ö‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥ ‡∏Ñ‡∏ß‡∏£‡∏õ‡∏£‡∏∂‡∏Å‡∏©‡∏≤‡πÅ‡∏û‡∏ó‡∏¢‡πå</li>
            </ul>
          </div>
        </div>
      </div>
    </div>
  );
}
