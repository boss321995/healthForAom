import React, { useState, useEffect } from 'react';
import { useAuth } from '../contexts/AuthContext';
import HealthAnalytics from './HealthAnalytics';
import UpdateProfile from './UpdateProfile';
import HealthTrends from './HealthTrends';
import NotificationSystem from './NotificationSystem';
import HealthReportPDF from './HealthReportPDF';
import HealthReportPDF_Thai from './HealthReportPDF_Thai';
import HealthChatbot from './HealthChatbot';
import axios from 'axios';

const Dashboard = () => {
  const { user, logout } = useAuth();
  const [healthSummary, setHealthSummary] = useState(null);
  const [recentMetrics, setRecentMetrics] = useState([]);
  // Metrics-only records for vitals (BP/HR/blood sugar/weight), unaffected by behavior entries
  const [metricsOnly, setMetricsOnly] = useState([]);
  const [userProfile, setUserProfile] = useState(null);
  const [loading, setLoading] = useState(true);
  const [activeTab, setActiveTab] = useState('overview');
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [submitMessage, setSubmitMessage] = useState({ type: '', text: '' });
  const [dataHistory, setDataHistory] = useState([]);
  
  // Medication tracking states
  const [medications, setMedications] = useState([]);
  const [medicationForm, setMedicationForm] = useState({
    medication_name: '',
    dosage: '',
    frequency: '',
    time_schedule: '',
    start_date: '',
    end_date: '',
    condition: '',
    reminder_enabled: true,
    notes: ''
  });
  const [medicationHistory, setMedicationHistory] = useState([]);
  const [reminders, setReminders] = useState([]);

  // Helper function to get full name
  const getFullName = () => {
    // First try to get full_name field directly
    if (userProfile?.full_name && userProfile.full_name.trim()) {
      return userProfile.full_name;
    }
    
    if (healthSummary?.full_name && healthSummary.full_name.trim()) {
      return healthSummary.full_name;
    }
    
    // Then try to combine first_name and last_name
    if (userProfile?.first_name && userProfile?.last_name) {
      return `${userProfile.first_name} ${userProfile.last_name}`;
    }
    
    if (healthSummary?.first_name && healthSummary?.last_name) {
      return `${healthSummary.first_name} ${healthSummary.last_name}`;
    }
    
    // Try individual names
    if (userProfile?.first_name || healthSummary?.first_name) {
      return userProfile?.first_name || healthSummary?.first_name;
    }
    
    if (userProfile?.full_name) {
      return userProfile.full_name;
    }
    
    // Fallback to user data
    if (user?.name) {
      return user.name;
    }
    
    // Final fallback
    return user?.username || '‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ';
  };

  // Helper function to get display name for greeting
  const getGreetingName = () => {
    const fullName = getFullName();
    
    // If it's a fallback username, return as-is
    if (fullName === user?.username || fullName === '‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ') {
      return fullName;
    }
    
    // For real names, show first name or full name
    if (userProfile?.first_name || healthSummary?.first_name) {
      return userProfile?.first_name || healthSummary?.first_name;
    }
    
    return fullName;
  };

  // Helper function to get last checkup date from recent metrics
  const getLastCheckupDate = () => {
    const source = (metricsOnly && metricsOnly.length > 0) ? metricsOnly : recentMetrics;
    if (!source || source.length === 0) {
      return null;
    }
    
    // ‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡∏ä‡∏µ‡∏û‡∏à‡∏£
    const latestHealthData = source.find(item => 
      item.systolic_bp || item.diastolic_bp || item.heart_rate || item.blood_sugar_mg
    );
    
    if (latestHealthData) {
      return latestHealthData.created_at || 
             latestHealthData.record_date || 
             latestHealthData.measurement_date;
    }
    
    // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡πÄ‡∏â‡∏û‡∏≤‡∏∞ ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    return source[0]?.created_at || 
           source[0]?.record_date || 
           source[0]?.measurement_date;
  };

  // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡∏∞‡∏ö‡∏ö
  const [systemStatus, setSystemStatus] = useState({
    userConnected: false,
    tokenValid: false,
    dataLoaded: false,
    lastUpdate: null
  });

  // Normalizer: map various API field names to the ones the UI expects
  const normalizeMetrics = (items) => {
    return (items || []).map((m) => {
      const normalized = { ...m };
      // Date field fallback
      normalized.measurement_date = m.measurement_date || m.date || m.record_date || m.created_at || null;
      // BP & heart rate fallbacks
      if (normalized.systolic_bp == null) {
        normalized.systolic_bp = m.blood_pressure_systolic ?? m.systolic ?? null;
      }
      if (normalized.diastolic_bp == null) {
        normalized.diastolic_bp = m.blood_pressure_diastolic ?? m.diastolic ?? null;
      }
      if (normalized.heart_rate == null) {
        normalized.heart_rate = m.heart_rate_bpm ?? m.pulse ?? null;
      }
      // Cast to numbers when present
      normalized.systolic_bp = normalized.systolic_bp !== null && normalized.systolic_bp !== undefined
        ? Number(normalized.systolic_bp)
        : null;
      normalized.diastolic_bp = normalized.diastolic_bp !== null && normalized.diastolic_bp !== undefined
        ? Number(normalized.diastolic_bp)
        : null;
      normalized.heart_rate = normalized.heart_rate !== null && normalized.heart_rate !== undefined
        ? Number(normalized.heart_rate)
        : null;
      return normalized;
    });
  };

  // Form state for health metrics
  const [metricsForm, setMetricsForm] = useState({
    measurement_date: new Date().toISOString().split('T')[0],
    systolic_bp: '',
    diastolic_bp: '',
    heart_rate: '',
    blood_sugar_mg: '',
    cholesterol_total: '',
    cholesterol_hdl: '',
    cholesterol_ldl: '',
    triglycerides: '',
    hba1c: '',
    body_fat_percentage: '',
    muscle_mass_kg: '',
    weight_kg: '',
    uric_acid: '',
    alt: '',
    ast: '',
    hemoglobin: '',
    hematocrit: '',
    iron: '',
    tibc: '',
    notes: ''
  });

  // Form state for lifestyle/behavior tracking
  const [lifestyleForm, setLifestyleForm] = useState({
    date: new Date().toISOString().split('T')[0],
    exercise_type: '',
    exercise_duration: '',
    exercise_intensity: '',
    sleep_bedtime: '',
    sleep_wakeup: '',
    sleep_hours: '',
    sleep_quality: '',
    water_glasses: '',
    fruits_vegetables: '',
    supplements: '',
    stress_level: '',
    relaxation_minutes: '',
    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏±‡∏à‡∏à‡∏±‡∏¢‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á
    alcohol_units: '',
    smoking_cigarettes: '',
    caffeine_cups: '',
    screen_time_hours: '',
    notes: ''
  });

  useEffect(() => {
    fetchHealthData();
    fetchDataHistory();
    updateSystemStatus();
  }, []);

  useEffect(() => {
    updateSystemStatus();
  }, [user, loading, healthSummary, userProfile]);

  const fetchDataHistory = async () => {
    try {
      const token = localStorage.getItem('healthToken');
      
      if (!token || token.startsWith('mock-jwt-token-')) {
        const savedHistory = JSON.parse(localStorage.getItem('healthDataHistory') || '[]');
        setDataHistory(savedHistory);
        console.log('üìã Mock data history loaded from localStorage:', savedHistory.length, 'items');
        return;
      }

      const headers = { Authorization: `Bearer ${token}` };
      
    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• health metrics ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
  const metricsResponse = await axios.get('/api/health-metrics?limit=50', { headers });
    const metrics = normalizeMetrics(metricsResponse.data || []);
    // ‡πÄ‡∏Å‡πá‡∏ö metrics-only ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏ß‡∏±‡∏î‡∏´‡∏•‡∏±‡∏Å
    setMetricsOnly(metrics);
      
      // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• health behaviors ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
  const behaviorsResponse = await axios.get('/api/health-behaviors?limit=50', { headers });
      const behaviors = behaviorsResponse.data || [];
      
      // ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• metrics ‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥
      const metricsHistory = metrics.map(metric => ({
        id: `metrics-${metric.metric_id}`,
        type: 'metrics',
        data: metric,
        description: `‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡πà‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û - ${metric.measurement_date}`,
        timestamp: new Date(metric.created_at || metric.measurement_date),
        date: new Date(metric.measurement_date).toLocaleDateString('th-TH'),
        time: new Date(metric.created_at || metric.measurement_date).toLocaleTimeString('th-TH', { 
          hour: '2-digit', 
          minute: '2-digit' 
        })
      }));

      // ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• behaviors ‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥
      const behaviorsHistory = behaviors.map(behavior => ({
        id: `behaviors-${behavior.behavior_id}`,
        type: 'behaviors',
        data: behavior,
        description: `‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏û‡∏§‡∏ï‡∏¥‡∏Å‡∏£‡∏£‡∏°‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û - ${behavior.record_date}`,
        timestamp: new Date(behavior.created_at || behavior.record_date),
        date: new Date(behavior.record_date).toLocaleDateString('th-TH'),
        time: new Date(behavior.created_at || behavior.record_date).toLocaleTimeString('th-TH', { 
          hour: '2-digit', 
          minute: '2-digit' 
        }),
        exercise_duration_minutes: behavior.exercise_duration_minutes,
        exercise_frequency: behavior.exercise_frequency,
        stress_level: behavior.stress_level,
        sleep_hours_per_night: behavior.sleep_hours_per_night,
        alcohol_units: behavior.alcohol_units,
        smoking_cigarettes: behavior.smoking_cigarettes,
        caffeine_cups: behavior.caffeine_cups,
        water_glasses: behavior.water_glasses,
        exercise_type: behavior.exercise_type,
        exercise_intensity: behavior.exercise_intensity,
        sleep_quality: behavior.sleep_quality,
        sleep_bedtime: behavior.sleep_bedtime,
        sleep_wakeup: behavior.sleep_wakeup,
        screen_time_hours: behavior.screen_time_hours
      }));

      // ‡∏£‡∏ß‡∏°‡∏Å‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å localStorage (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ) ‡πÅ‡∏•‡∏∞‡∏ó‡∏≥ timestamp ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô
      const rawLocalHistory = JSON.parse(localStorage.getItem('healthDataHistory') || '[]');
      const localHistory = (rawLocalHistory || []).map(item => {
        const ts = item.timestamp || item.created_at || item.record_date || item.measurement_date || item.date;
        return {
          ...item,
          timestamp: ts ? new Date(ts) : new Date(0)
        };
      });
      
      // ‡∏£‡∏ß‡∏°‡πÅ‡∏•‡∏∞‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏ï‡∏≤‡∏°‡πÄ‡∏ß‡∏•‡∏≤
      const combinedHistory = [...metricsHistory, ...behaviorsHistory, ...localHistory]
        .sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp))
        .slice(0, 100); // ‡πÄ‡∏Å‡πá‡∏ö‡πÅ‡∏Ñ‡πà 100 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î

      setDataHistory(combinedHistory);
      console.log('üìä Combined data history:', combinedHistory.length, 'items');
      console.log('üìã Data history sample:', combinedHistory.slice(0, 3));
      
      // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï recentMetrics ‡πÉ‡∏´‡πâ‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å behaviors ‡∏î‡πâ‡∏ß‡∏¢ ‡πÅ‡∏ï‡πà‡πÅ‡∏¢‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô
  const combinedMetrics = [...metrics, ...behaviors]
        .sort((a, b) => new Date(b.created_at || b.record_date || b.measurement_date) - new Date(a.created_at || a.record_date || a.measurement_date))
        .slice(0, 10);
      setRecentMetrics(combinedMetrics);
      
      // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï recentMetrics ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì BMI (‡πÄ‡∏â‡∏û‡∏≤‡∏∞ metrics)
      const metricsOnly = metrics
        .sort((a, b) => new Date(b.created_at || b.measurement_date) - new Date(a.created_at || a.measurement_date))
        .slice(0, 5);
      
      // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ metrics ‡πÉ‡∏´‡∏°‡πà ‡πÉ‡∏´‡πâ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï state ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö BMI calculation
      if (metricsOnly.length > 0) {
        // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï state ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö metrics ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì BMI
        console.log('üìä Latest metrics for BMI calculation:', metricsOnly[0]);
      }
      console.log('üìã Data history loaded:', combinedHistory.length, 'items');
      
    } catch (error) {
      console.error('Error fetching data history:', error);
      // Fallback to localStorage
      const savedHistory = JSON.parse(localStorage.getItem('healthDataHistory') || '[]');
      setDataHistory(savedHistory);
    }
  };

  const fetchHealthData = async () => {
    try {
      setLoading(true);
      
      // Get auth token
      const token = localStorage.getItem('healthToken');
      console.log('üîë Token found:', token ? 'Yes' : 'No');
      const headers = token ? { Authorization: `Bearer ${token}` } : {};
      
      // Fetch health summary
      try {
  const summaryResponse = await axios.get('/api/health-summary', { headers });
        setHealthSummary(summaryResponse.data);
        console.log('‚úÖ Health summary loaded:', summaryResponse.data);
      } catch (error) {
        console.error('‚ùå Health summary error:', error.response?.status, error.response?.data);
        if (error.response?.status === 403 || error.response?.status === 401) {
          // Token expired or invalid, clear auth and redirect
          localStorage.removeItem('healthToken');
          localStorage.removeItem('user');
          window.location.href = '/';
          return;
        }
        if (error.response?.status !== 404) {
          console.error('Error fetching health summary:', error);
        }
      }

      // Fetch recent metrics
  try {
  const metricsResponse = await axios.get('/api/health-metrics?limit=5', { headers });
    const normalized = normalizeMetrics(metricsResponse.data || []);
    setMetricsOnly(normalized);
    setRecentMetrics(normalized);
  } catch (error) {
        console.error('Error fetching health metrics:', error);
      }

      // Fetch medications (with fallback for new feature)
      try {
        const medicationsResponse = await axios.get('/api/medications', { headers });
        setMedications(medicationsResponse.data || []);
        console.log('‚úÖ Medications loaded:', medicationsResponse.data?.length || 0);
      } catch (error) {
        console.log('‚ÑπÔ∏è Medications API not available yet (new feature):', error.response?.status);
        // Set empty array for now - feature will work when backend is ready
        setMedications([]);
      }

      // Fetch medication history (with fallback for new feature)
      try {
        const medicationLogsResponse = await axios.get('/api/medication-logs', { headers });
        setMedicationHistory(medicationLogsResponse.data || []);
        console.log('‚úÖ Medication history loaded:', medicationLogsResponse.data?.length || 0);
      } catch (error) {
        console.log('‚ÑπÔ∏è Medication logs API not available yet (new feature):', error.response?.status);
        // Set empty array for now - feature will work when backend is ready
        setMedicationHistory([]);
      }

      // Fetch user profile
      try {
  const profileResponse = await axios.get('/api/profile', { headers });
        setUserProfile(profileResponse.data);
        console.log('‚úÖ User profile loaded:', profileResponse.data);
      } catch (error) {
        console.error('Error fetching user profile:', error);
      }

    } catch (error) {
      console.error('Error fetching health data:', error);
    } finally {
      setLoading(false);
    }
  };

  const getBMIColor = (bmi) => {
    if (!bmi) return 'text-gray-400';
    if (bmi < 18.5) return 'text-blue-400';
    if (bmi <= 24.9) return 'text-green-400';
    if (bmi <= 29.9) return 'text-yellow-400';
    return 'text-red-400';
  };

  const calculateBMI = (height_cm, weight_kg) => {
    if (!height_cm || !weight_kg || height_cm <= 0 || weight_kg <= 0) {
      return null;
    }
    const heightInMeters = height_cm / 100;
    return weight_kg / (heightInMeters * heightInMeters);
  };

  const getBMICategory = (bmi) => {
    if (!bmi) return '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•';
    if (bmi < 18.5) return '‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏ô‡πâ‡∏≠‡∏¢';
    if (bmi <= 24.9) return '‡∏õ‡∏Å‡∏ï‡∏¥';
    if (bmi <= 29.9) return '‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡πÄ‡∏Å‡∏¥‡∏ô';
    if (bmi <= 34.9) return '‡∏≠‡πâ‡∏ß‡∏ô‡∏£‡∏∞‡∏î‡∏±‡∏ö 1';
    if (bmi <= 39.9) return '‡∏≠‡πâ‡∏ß‡∏ô‡∏£‡∏∞‡∏î‡∏±‡∏ö 2';
    return '‡∏≠‡πâ‡∏ß‡∏ô‡∏£‡∏∞‡∏î‡∏±‡∏ö 3';
  };

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô null ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡πÉ‡∏î‡∏Ñ‡πà‡∏≤‡∏´‡∏ô‡∏∂‡πà‡∏á
  const getLatestValidValue = (fieldName) => {
    const source = (metricsOnly && metricsOnly.length > 0) ? metricsOnly : recentMetrics;
    if (!source || source.length === 0) return null;

    const validMetrics = source
      .filter(metric => metric.measurement_date && metric.measurement_date !== 'undefined')
      .sort((a, b) => new Date(b.measurement_date) - new Date(a.measurement_date));

    for (const metric of validMetrics) {
      const value = metric[fieldName];
      if (['systolic_bp', 'diastolic_bp', 'heart_rate'].includes(fieldName)) {
        if (value !== null && value !== undefined && value !== '' && Number(value) > 0) return value;
      } else {
        if (value !== null && value !== undefined && value !== '') return value;
      }
    }
    return null;
  };

  const getCurrentBMI = () => {
    // ‡πÉ‡∏ä‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞ health metrics ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏à‡∏£‡∏¥‡∏á (‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà null ‡∏´‡∏£‡∏∑‡∏≠ 0)
    const latestWeight = getLatestValidValue('weight_kg');
    
    // Use profile weight if no recent metric weight (‡πÅ‡∏•‡∏∞‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 0)
    const weight = latestWeight || (userProfile?.weight_kg > 0 ? userProfile?.weight_kg : null);
    const height = userProfile?.height_cm > 0 ? userProfile?.height_cm : null;
    
    return calculateBMI(height, weight);
  };

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•
  const getPersonalizedHealthTips = () => {
    const tips = [];
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÇ‡∏£‡∏Ñ‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ï‡∏±‡∏ß‡πÅ‡∏•‡∏∞‡∏¢‡∏≤‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ (‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö)
    const medicalConditions = userProfile?.medical_conditions?.toLowerCase() || '';
    const medications = userProfile?.medications?.toLowerCase() || '';
    
    const hasHypertension = medicalConditions.includes('‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô‡∏™‡∏π‡∏á') || 
                           medicalConditions.includes('hypertension') ||
                           medicalConditions.includes('‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô') ||
                           medications.includes('amlodipine') ||
                           medications.includes('amlopine') ||
                           medications.includes('‡πÅ‡∏≠‡∏°‡πÇ‡∏•‡∏î‡∏¥‡∏õ‡∏µ‡∏ô');
    
    const hasDiabetes = medicalConditions.includes('‡πÄ‡∏ö‡∏≤‡∏´‡∏ß‡∏≤‡∏ô') || 
                       medicalConditions.includes('diabetes') ||
                       medicalConditions.includes('dm') ||
                       medications.includes('metformin') ||
                       medications.includes('‡πÄ‡∏°‡∏ï‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏¥‡∏ô');
    
    const hasTB = medicalConditions.includes('‡∏ß‡∏±‡∏ì‡πÇ‡∏£‡∏Ñ') || 
                  medicalConditions.includes('tb') ||
                  medicalConditions.includes('tuberculosis') ||
                  medications.includes('isoniazid') ||
                  medications.includes('rifampin');
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
    const latestSystolic = getLatestValidValue('systolic_bp');
    const latestDiastolic = getLatestValidValue('diastolic_bp');
    const latestBloodSugar = getLatestValidValue('blood_sugar_mg');
    const latestWeight = getLatestValidValue('weight_kg');
    
    // ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô‡∏™‡∏π‡∏á
    if (hasHypertension || (latestSystolic >= 140 || latestDiastolic >= 90)) {
      tips.push({
        icon: 'üíì',
        title: '‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô‡∏™‡∏π‡∏á',
        content: '‡∏•‡∏î‡πÄ‡∏Å‡∏•‡∏∑‡∏≠‡πÉ‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£ ‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÅ‡∏õ‡∏£‡∏£‡∏π‡∏õ ‡πÄ‡∏î‡∏¥‡∏ô‡πÄ‡∏£‡πá‡∏ß 30 ‡∏ô‡∏≤‡∏ó‡∏µ/‡∏ß‡∏±‡∏ô ‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ñ‡∏£‡∏µ‡∏¢‡∏î',
        color: 'red'
      });
      
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏¢‡∏≤‡πÄ‡∏â‡∏û‡∏≤‡∏∞
      if (medications.includes('amlodipine') || medications.includes('amlopine') || medications.includes('‡πÅ‡∏≠‡∏°‡πÇ‡∏•‡∏î‡∏¥‡∏õ‡∏µ‡∏ô')) {
        tips.push({
          icon: 'üíä',
          title: '‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏¢‡∏≤ Amlodipine',
          content: '‡∏Å‡∏¥‡∏ô‡∏¢‡∏≤‡∏ï‡∏≠‡∏ô‡πÄ‡∏ä‡πâ‡∏≤‡∏ó‡∏∏‡∏Å‡∏ß‡∏±‡∏ô ‡∏•‡∏∏‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô‡∏¢‡∏∑‡∏ô‡∏ä‡πâ‡∏≤‡πÜ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡πÄ‡∏ß‡∏µ‡∏¢‡∏ô‡∏´‡∏±‡∏ß ‡∏î‡∏∑‡πà‡∏°‡∏ô‡πâ‡∏≥‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠ ‡∏™‡∏±‡∏á‡πÄ‡∏Å‡∏ï‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡∏ö‡∏ß‡∏°‡∏ó‡∏µ‡πà‡∏Ç‡πâ‡∏≠‡πÄ‡∏ó‡πâ‡∏≤',
          color: 'orange'
        });
      }
      
      // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô‡∏™‡∏π‡∏á
      tips.push({
        icon: 'ü•¨',
        title: '‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏•‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô',
        content: '‡∏Å‡∏¥‡∏ô‡∏Å‡∏•‡πâ‡∏ß‡∏¢ (‡πÇ‡∏õ‡πÅ‡∏ï‡∏™‡πÄ‡∏ã‡∏µ‡∏¢‡∏°) ‡∏ú‡∏±‡∏Å‡πÉ‡∏ö‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß ‡∏õ‡∏•‡∏≤ ‡∏á‡∏î‡πÄ‡∏Å‡∏•‡∏∑‡∏≠ ‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏î‡∏∑‡πà‡∏°‡πÅ‡∏≠‡∏•‡∏Å‡∏≠‡∏Æ‡∏≠‡∏•‡πå',
        color: 'green'
      });
    }
    
    // ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÄ‡∏ö‡∏≤‡∏´‡∏ß‡∏≤‡∏ô
    if (hasDiabetes || (latestBloodSugar && latestBloodSugar > 126)) {
      tips.push({
        icon: 'üçé',
        title: '‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÄ‡∏ö‡∏≤‡∏´‡∏ß‡∏≤‡∏ô',
        content: '‡∏Å‡∏¥‡∏ô‡∏Ç‡πâ‡∏≤‡∏ß‡∏Å‡∏•‡πâ‡∏≠‡∏á ‡∏Ç‡∏ô‡∏°‡∏õ‡∏±‡∏á‡πÇ‡∏Æ‡∏•‡∏ß‡∏µ‡∏ó ‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏•‡πÅ‡∏•‡∏∞‡πÅ‡∏õ‡πâ‡∏á ‡πÅ‡∏ö‡πà‡∏á‡∏°‡∏∑‡πâ‡∏≠‡πÄ‡∏•‡πá‡∏Å‡πÜ 5-6 ‡∏°‡∏∑‡πâ‡∏≠/‡∏ß‡∏±‡∏ô',
        color: 'green'
      });
      
      if (medications.includes('metformin') || medications.includes('‡πÄ‡∏°‡∏ï‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏¥‡∏ô')) {
        tips.push({
          icon: 'üíä',
          title: '‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏¢‡∏≤ Metformin',
          content: '‡∏Å‡∏¥‡∏ô‡∏¢‡∏≤‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏≠‡∏≤‡∏´‡∏≤‡∏£ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏î‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡∏Ñ‡∏•‡∏∑‡πà‡∏ô‡πÑ‡∏™‡πâ ‡∏ï‡∏£‡∏ß‡∏à‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏•‡∏Å‡πà‡∏≠‡∏ô‡πÅ‡∏•‡∏∞‡∏´‡∏•‡∏±‡∏á‡∏≠‡∏≤‡∏´‡∏≤‡∏£',
          color: 'blue'
        });
      }
    }
    
    // ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏ß‡∏±‡∏ì‡πÇ‡∏£‡∏Ñ
    if (hasTB) {
      tips.push({
        icon: 'ü´Å',
        title: '‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏ß‡∏±‡∏ì‡πÇ‡∏£‡∏Ñ',
        content: '‡∏Å‡∏¥‡∏ô‡∏¢‡∏≤‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô‡∏ï‡∏≤‡∏°‡πÄ‡∏ß‡∏•‡∏≤ ‡∏û‡∏±‡∏Å‡∏ú‡πà‡∏≠‡∏ô‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠ ‡∏Å‡∏¥‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÇ‡∏õ‡∏£‡∏ï‡∏µ‡∏ô‡∏™‡∏π‡∏á ‡πÅ‡∏¢‡∏Å‡∏Ç‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß ‡πÉ‡∏™‡πà‡∏´‡∏ô‡πâ‡∏≤‡∏Å‡∏≤‡∏Å',
        color: 'yellow'
      });
    }
    
    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ï‡∏≤‡∏°‡∏Ñ‡πà‡∏≤‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
    if (latestSystolic && latestDiastolic && (latestSystolic >= 140 || latestDiastolic >= 90)) {
      tips.push({
        icon: '‚ö†Ô∏è',
        title: '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô‡∏™‡∏π‡∏á‡∏Å‡∏ß‡πà‡∏≤‡∏õ‡∏Å‡∏ï‡∏¥',
        content: `‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î ${latestSystolic}/${latestDiastolic} mmHg - ‡∏Ñ‡∏ß‡∏£‡∏û‡∏±‡∏Å‡∏ú‡πà‡∏≠‡∏ô ‡∏•‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ñ‡∏£‡∏µ‡∏¢‡∏î ‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢‡πÄ‡∏ö‡∏≤‡πÜ`,
        color: 'red'
      });
    }
    
    if (latestBloodSugar && latestBloodSugar > 140) {
      const level = latestBloodSugar > 200 ? '‡∏™‡∏π‡∏á‡∏°‡∏≤‡∏Å' : latestBloodSugar > 180 ? '‡∏™‡∏π‡∏á' : '‡∏™‡∏π‡∏á‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢';
      tips.push({
        icon: 'üìä',
        title: `‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏•${level}`,
        content: `‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏•‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î ${latestBloodSugar} mg/dL - ‡∏Ñ‡∏ß‡∏£‡∏£‡∏∞‡∏ß‡∏±‡∏á‡∏≠‡∏≤‡∏´‡∏≤‡∏£ ‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢ ‡∏´‡∏≤‡∏Å‡∏™‡∏π‡∏á‡∏°‡∏≤‡∏Å‡∏Ñ‡∏ß‡∏£‡∏û‡∏ö‡πÅ‡∏û‡∏ó‡∏¢‡πå`,
        color: 'red'
      });
    }
    
    // ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÇ‡∏£‡∏Ñ‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ï‡∏±‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡πà‡∏≤‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥
    if (tips.length === 0) {
      tips.push(
        {
          icon: 'ü•ó',
          title: '‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û',
          content: '‡∏Å‡∏¥‡∏ô‡∏ú‡∏±‡∏Å-‡∏ú‡∏•‡πÑ‡∏°‡πâ‡πÉ‡∏´‡πâ‡∏´‡∏•‡∏≤‡∏Å‡∏´‡∏•‡∏≤‡∏¢ 5 ‡∏™‡πà‡∏ß‡∏ô‡∏ï‡πà‡∏≠‡∏ß‡∏±‡∏ô ‡πÄ‡∏ô‡πâ‡∏ô‡∏ò‡∏±‡∏ç‡∏û‡∏∑‡∏ä‡πÄ‡∏ï‡πá‡∏°‡πÄ‡∏°‡∏•‡πá‡∏î ‡πÇ‡∏õ‡∏£‡∏ï‡∏µ‡∏ô‡πÑ‡∏°‡πà‡∏ï‡∏¥‡∏î‡∏°‡∏±‡∏ô',
          color: 'green'
        },
        {
          icon: 'üíß',
          title: '‡∏Å‡∏≤‡∏£‡∏î‡∏∑‡πà‡∏°‡∏ô‡πâ‡∏≥',
          content: '‡∏î‡∏∑‡πà‡∏°‡∏ô‡πâ‡∏≥‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 8 ‡πÅ‡∏Å‡πâ‡∏ß‡∏ï‡πà‡∏≠‡∏ß‡∏±‡∏ô ‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏î‡∏∑‡πà‡∏°‡∏´‡∏ß‡∏≤‡∏ô ‡∏ô‡πâ‡∏≥‡∏≠‡∏±‡∏î‡∏•‡∏°',
          color: 'blue'
        },
        {
          icon: 'üò¥',
          title: '‡∏Å‡∏≤‡∏£‡∏ô‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏ö',
          content: '‡∏ô‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏ö 7-9 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏ï‡πà‡∏≠‡∏Ñ‡∏∑‡∏ô ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ô‡∏≠‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏î‡∏¥‡∏°‡∏ó‡∏∏‡∏Å‡∏ß‡∏±‡∏ô ‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠‡∏Å‡πà‡∏≠‡∏ô‡∏ô‡∏≠‡∏ô',
          color: 'purple'
        },
        {
          icon: 'üèÉ‚Äç‚ôÇÔ∏è',
          title: '‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢',
          content: '‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 150 ‡∏ô‡∏≤‡∏ó‡∏µ/‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå ‡πÄ‡∏î‡∏¥‡∏ô ‡∏ß‡∏¥‡πà‡∏á ‡∏ß‡πà‡∏≤‡∏¢‡∏ô‡πâ‡∏≥ ‡∏´‡∏£‡∏∑‡∏≠‡∏õ‡∏±‡πà‡∏ô‡∏à‡∏±‡∏Å‡∏£‡∏¢‡∏≤‡∏ô',
          color: 'orange'
        }
      );
    }
    
    return tips;
  };

  const getCurrentWeight = () => {
    // ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô null
    const latestWeight = getLatestValidValue('weight_kg');
    
    // Use profile weight if no recent metric weight (‡πÅ‡∏•‡∏∞‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 0)
    return latestWeight || (userProfile?.weight_kg > 0 ? userProfile?.weight_kg : null);
  };

  const getBPStatus = (systolic, diastolic) => {
    if (!systolic || !diastolic) return { status: '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•', color: 'text-gray-400' };
    
    if (systolic >= 140 || diastolic >= 90) {
      return { status: '‡∏™‡∏π‡∏á', color: 'text-red-400' };
    } else if (systolic >= 120 || diastolic >= 80) {
      return { status: '‡∏Ñ‡πà‡∏≠‡∏ô‡∏Ç‡πâ‡∏≤‡∏á‡∏™‡∏π‡∏á', color: 'text-yellow-400' };
    } else {
      return { status: '‡∏õ‡∏Å‡∏ï‡∏¥', color: 'text-green-400' };
    }
  };

  // Handle form input changes
  const handleMetricsInputChange = (e) => {
    const { name, value } = e.target;
    setMetricsForm(prev => ({
      ...prev,
      [name]: value
    }));
  };

  // Validate health metrics form
  const validateMetricsForm = () => {
    const errors = [];
    
    // Date validation
    if (!metricsForm.measurement_date) {
      errors.push('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ß‡∏±‡∏î');
    }
    
    // Blood pressure validation
    if (metricsForm.systolic_bp && (metricsForm.systolic_bp < 70 || metricsForm.systolic_bp > 300)) {
      errors.push('‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô‡πÇ‡∏•‡∏´‡∏¥‡∏ï‡∏ï‡∏±‡∏ß‡∏ö‡∏ô (70-300 mmHg)');
    }
    if (metricsForm.diastolic_bp && (metricsForm.diastolic_bp < 40 || metricsForm.diastolic_bp > 200)) {
      errors.push('‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô‡πÇ‡∏•‡∏´‡∏¥‡∏ï‡∏ï‡∏±‡∏ß‡∏•‡πà‡∏≤‡∏á (40-200 mmHg)');
    }
    
    // Heart rate validation
    if (metricsForm.heart_rate && (metricsForm.heart_rate < 30 || metricsForm.heart_rate > 250)) {
      errors.push('‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡πâ‡∏ô‡∏´‡∏±‡∏ß‡πÉ‡∏à (30-250 bpm)');
    }
    
    // Blood sugar validation
    if (metricsForm.blood_sugar_mg && (metricsForm.blood_sugar_mg < 20 || metricsForm.blood_sugar_mg > 600)) {
      errors.push('‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏•‡πÉ‡∏ô‡πÄ‡∏•‡∏∑‡∏≠‡∏î (20-600 mg/dL)');
    }
    
    // Cholesterol validation
    if (metricsForm.cholesterol_total && (metricsForm.cholesterol_total < 100 || metricsForm.cholesterol_total > 500)) {
      errors.push('‡∏Ñ‡∏≠‡πÄ‡∏•‡∏™‡πÄ‡∏ï‡∏≠‡∏£‡∏≠‡∏•‡∏£‡∏ß‡∏° (100-500 mg/dL)');
    }
    
    // Weight validation
    if (metricsForm.weight_kg && (metricsForm.weight_kg < 20 || metricsForm.weight_kg > 300)) {
      errors.push('‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å (20-300 ‡∏Å‡∏Å.)');
    }
    
    return errors;
  };

  // Submit health metrics
  const handleMetricsSubmit = async (e) => {
    e.preventDefault();
    setIsSubmitting(true);
    setSubmitMessage({ type: '', text: '' });

    // Validate form
    const errors = validateMetricsForm();
    if (errors.length > 0) {
      setSubmitMessage({ 
        type: 'error', 
        text: `‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á: ${errors.join(', ')}` 
      });
      setIsSubmitting(false);
      return;
    }

    try {
      const token = localStorage.getItem('healthToken');
      if (!token) {
        setSubmitMessage({ type: 'error', text: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà' });
        setIsSubmitting(false);
        return;
      }

      // Prepare data (only send non-empty values, convert empty strings to null)
      const metricsData = {};
      Object.keys(metricsForm).forEach(key => {
        const value = metricsForm[key];
        if (value !== '' && value !== null && value !== undefined) {
          // Convert numeric strings to numbers for numeric fields
          const numericFields = [
            'systolic_bp', 'diastolic_bp', 'heart_rate', 'blood_sugar_mg',
            'cholesterol_total', 'cholesterol_hdl', 'cholesterol_ldl',
            'triglycerides', 'hba1c', 'body_fat_percentage', 'muscle_mass_kg', 'weight_kg',
            'uric_acid', 'alt', 'ast', 'hemoglobin', 'hematocrit', 'iron', 'tibc'
          ];
          
          if (numericFields.includes(key) && value !== '') {
            metricsData[key] = parseFloat(value) || null;
          } else {
            metricsData[key] = value;
          }
        }
      });

      console.log('üì§ Submitting health metrics:', metricsData);
      
      const headers = { Authorization: `Bearer ${token}` };
  await axios.post('/api/health-metrics', metricsData, { headers });
      
      console.log('‚úÖ Health metrics submitted successfully');
      setSubmitMessage({ type: 'success', text: '‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!' });
      
      // Reset form
      setMetricsForm({
        measurement_date: new Date().toISOString().split('T')[0],
        systolic_bp: '',
        diastolic_bp: '',
        heart_rate: '',
        blood_sugar_mg: '',
        cholesterol_total: '',
        cholesterol_hdl: '',
        cholesterol_ldl: '',
        triglycerides: '',
        hba1c: '',
        body_fat_percentage: '',
        muscle_mass_kg: '',
        weight_kg: '',
        uric_acid: '',
        alt: '',
        ast: '',
        hemoglobin: '',
        hematocrit: '',
        iron: '',
        tibc: '',
        notes: ''
      });
      
      // Refresh data
      console.log('üîÑ Refreshing health data...');
      await fetchHealthData();
      console.log('‚úÖ Health data refreshed');
      
      // Auto switch to overview after 2 seconds
      setTimeout(() => {
        setActiveTab('overview');
        setSubmitMessage({ type: '', text: '' });
      }, 2000);
      
    } catch (error) {
      console.error('Error submitting health metrics:', error);
      setSubmitMessage({ 
        type: 'error', 
        text: error.response?.data?.error || '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•' 
      });
    } finally {
      setIsSubmitting(false);
    }
  };

  // Handle lifestyle input changes
  const handleLifestyleInputChange = (e) => {
    const { name, value } = e.target;
    setLifestyleForm(prev => ({
      ...prev,
      [name]: value
    }));
  };

  // Submit lifestyle/behavior data
  const handleLifestyleSubmit = async (e) => {
    e.preventDefault();
    setIsSubmitting(true);
    setSubmitMessage({ type: '', text: '' });

    // Basic validation
    if (!lifestyleForm.date) {
      setSubmitMessage({ 
        type: 'error', 
        text: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà' 
      });
      setIsSubmitting(false);
      return;
    }

    const token = localStorage.getItem('healthToken');
    if (!token) {
      setSubmitMessage({ type: 'error', text: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà' });
      setIsSubmitting(false);
      return;
    }

    try {
      // Create lifestyle data object - ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡πà‡∏≤
      const lifestyleData = {
        date: lifestyleForm.date,
      };

      // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡πà‡∏≤
      if (lifestyleForm.exercise_type) {
        lifestyleData.exercise_type = lifestyleForm.exercise_type;
      }
      if (lifestyleForm.exercise_duration && parseInt(lifestyleForm.exercise_duration) > 0) {
        lifestyleData.exercise_duration = parseInt(lifestyleForm.exercise_duration);
        // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ exercise_frequency ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢
        lifestyleData.exercise_frequency = 'rarely'; // ‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
      }
      if (lifestyleForm.exercise_intensity) {
        lifestyleData.exercise_intensity = lifestyleForm.exercise_intensity;
      }
      if (lifestyleForm.sleep_bedtime) {
        lifestyleData.sleep_bedtime = lifestyleForm.sleep_bedtime;
      }
      if (lifestyleForm.sleep_wakeup) {
        lifestyleData.sleep_wakeup = lifestyleForm.sleep_wakeup;
      }
      if (lifestyleForm.sleep_hours && parseFloat(lifestyleForm.sleep_hours) > 0) {
        lifestyleData.sleep_hours_per_night = parseFloat(lifestyleForm.sleep_hours);
      }
      if (lifestyleForm.sleep_quality) {
        lifestyleData.sleep_quality = lifestyleForm.sleep_quality;
      }
      if (lifestyleForm.water_glasses && parseInt(lifestyleForm.water_glasses) > 0) {
        lifestyleData.water_glasses = parseInt(lifestyleForm.water_glasses);
      }
      if (lifestyleForm.fruits_vegetables) {
        lifestyleData.fruits_vegetables = lifestyleForm.fruits_vegetables;
      }
      if (lifestyleForm.supplements) {
        lifestyleData.supplements = lifestyleForm.supplements;
      }
      if (lifestyleForm.stress_level) {
        lifestyleData.stress_level = lifestyleForm.stress_level;
      }
      if (lifestyleForm.relaxation_minutes && parseInt(lifestyleForm.relaxation_minutes) > 0) {
        lifestyleData.relaxation_minutes = parseInt(lifestyleForm.relaxation_minutes);
      }
      
      // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏±‡∏à‡∏à‡∏±‡∏¢‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á
      if (lifestyleForm.alcohol_units && parseInt(lifestyleForm.alcohol_units) > 0) {
        lifestyleData.alcohol_units = parseInt(lifestyleForm.alcohol_units);
      }
      if (lifestyleForm.smoking_cigarettes && parseInt(lifestyleForm.smoking_cigarettes) > 0) {
        lifestyleData.smoking_cigarettes = parseInt(lifestyleForm.smoking_cigarettes);
      }
      if (lifestyleForm.caffeine_cups && parseInt(lifestyleForm.caffeine_cups) > 0) {
        lifestyleData.caffeine_cups = parseInt(lifestyleForm.caffeine_cups);
      }
      if (lifestyleForm.screen_time_hours && parseFloat(lifestyleForm.screen_time_hours) > 0) {
        lifestyleData.screen_time_hours = parseFloat(lifestyleForm.screen_time_hours);
      }
      
      if (lifestyleForm.notes) {
        lifestyleData.notes = lifestyleForm.notes;
      }

      console.log('üì§ Submitting lifestyle data:', lifestyleData);

  const response = await axios.post('/api/health-behaviors', lifestyleData, {
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        }
      });

      console.log('‚úÖ Lifestyle data submitted successfully:', response.data);
      setSubmitMessage({ 
        type: 'success', 
        text: response.data.message || '‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏û‡∏§‡∏ï‡∏¥‡∏Å‡∏£‡∏£‡∏°‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!' 
      });

      // Reset form
      setLifestyleForm({
        date: new Date().toISOString().split('T')[0],
        exercise_type: '',
        exercise_duration: '',
        exercise_intensity: '',
        sleep_bedtime: '',
        sleep_wakeup: '',
        sleep_hours: '',
        sleep_quality: '',
        water_glasses: '',
        fruits_vegetables: '',
        supplements: '',
        stress_level: '',
        relaxation_minutes: '',
        // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏õ‡∏±‡∏à‡∏à‡∏±‡∏¢‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á
        alcohol_units: '',
        smoking_cigarettes: '',
        caffeine_cups: '',
        screen_time_hours: '',
        notes: ''
      });

      // Refresh data
      console.log('üîÑ Refreshing health data...');
      await fetchHealthData();
      await fetchDataHistory();
      console.log('‚úÖ Health data refreshed');
      
      // Auto switch to overview after 2 seconds
      setTimeout(() => {
        setActiveTab('overview');
        setSubmitMessage({ type: '', text: '' });
      }, 2000);
      
    } catch (error) {
      console.error('‚ùå Error submitting lifestyle data:', error);
      setSubmitMessage({ 
        type: 'error', 
        text: error.response?.data?.error || error.response?.data?.details || '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•' 
      });
    } finally {
      setIsSubmitting(false);
    }
  };

  // Helper function ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
  const formatSafeDate = (dateValue, options = {}) => {
    if (!dateValue) return '‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•';
    
    try {
      const date = new Date(dateValue);
      if (isNaN(date.getTime())) {
        return '‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á';
      }
      
      return date.toLocaleDateString('th-TH', {
        year: 'numeric',
        month: options.short ? 'short' : 'long',
        day: 'numeric',
        ...options
      });
    } catch (error) {
      console.error('Date formatting error:', error);
      return '‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á';
    }
  };

  // Helper function ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏õ‡∏•‡∏Ñ‡∏≥‡∏®‡∏±‡∏û‡∏ó‡πå‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢
  const translateToThai = (value, type) => {
    const translations = {
      exercise_frequency: {
        'rarely': '‡∏ô‡∏≤‡∏ô ‡πÜ ‡∏Ñ‡∏£‡∏±‡πâ‡∏á',
        'sometimes': '‡∏ö‡∏≤‡∏á‡∏Ñ‡∏£‡∏±‡πâ‡∏á',
        'regularly': '‡∏™‡∏°‡πà‡∏≥‡πÄ‡∏™‡∏°‡∏≠',
        'daily': '‡∏ó‡∏∏‡∏Å‡∏ß‡∏±‡∏ô',
        'never': '‡πÑ‡∏°‡πà‡πÄ‡∏Ñ‡∏¢'
      },
      exercise_intensity: {
        'light': '‡πÄ‡∏ö‡∏≤',
        'moderate': '‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á',
        'vigorous': '‡∏´‡∏ô‡∏±‡∏Å',
        '‡πÄ‡∏ö‡∏≤': '‡πÄ‡∏ö‡∏≤',
        '‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á': '‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á',
        '‡∏´‡∏ô‡∏±‡∏Å': '‡∏´‡∏ô‡∏±‡∏Å'
      },
      sleep_quality: {
        'excellent': '‡∏î‡∏µ‡∏°‡∏≤‡∏Å',
        'good': '‡∏î‡∏µ',
        'fair': '‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á',
        'poor': '‡πÅ‡∏¢‡πà',
        'very_poor': '‡πÅ‡∏¢‡πà‡∏°‡∏≤‡∏Å',
        '‡∏î‡∏µ‡∏°‡∏≤‡∏Å': '‡∏î‡∏µ‡∏°‡∏≤‡∏Å',
        '‡∏î‡∏µ': '‡∏î‡∏µ',
        '‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á': '‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á',
        '‡πÅ‡∏¢‡πà': '‡πÅ‡∏¢‡πà',
        '‡πÅ‡∏¢‡πà‡∏°‡∏≤‡∏Å': '‡πÅ‡∏¢‡πà‡∏°‡∏≤‡∏Å'
      },
      diet_quality: {
        'excellent': '‡∏î‡∏µ‡∏°‡∏≤‡∏Å',
        'good': '‡∏î‡∏µ',
        'fair': '‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á',
        'poor': '‡πÅ‡∏¢‡πà',
        '‡∏î‡∏µ‡∏°‡∏≤‡∏Å': '‡∏î‡∏µ‡∏°‡∏≤‡∏Å',
        '‡∏î‡∏µ': '‡∏î‡∏µ',
        '‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á': '‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á',
        '‡πÅ‡∏¢‡πà': '‡πÅ‡∏¢‡πà'
      }
    };

    if (translations[type] && translations[type][value]) {
      return translations[type][value];
    }
    
    return value; // ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏î‡∏¥‡∏°‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•
  };

  // Helper function ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡∏´‡∏≤‡∏¢‡πÑ‡∏õ
  const safeDisplayValue = (value, fallback = '‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•', formatter = null) => {
    if (value === null || value === undefined || value === '') {
      return <span className="text-yellow-600 text-sm">{fallback}</span>;
    }
    
    if (formatter && typeof formatter === 'function') {
      try {
        return formatter(value);
      } catch (error) {
        console.error('Formatter error:', error);
        return <span className="text-red-600 text-sm">‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á</span>;
      }
    }
    
    return value;
  };

  // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡∏∞‡∏ö‡∏ö
  const updateSystemStatus = () => {
    const token = localStorage.getItem('healthToken');
    setSystemStatus({
      userConnected: !!user,
      tokenValid: !!token,
      dataLoaded: !loading && (!!healthSummary || !!userProfile),
      lastUpdate: new Date().toLocaleTimeString('th-TH')
    });
  };

  // Update system status on auth/user change
  useEffect(() => {
    updateSystemStatus();
  }, [user, loading, healthSummary, userProfile]);

  // Medication Management Functions
  const addMedication = async (medicationData) => {
    try {
      const token = localStorage.getItem('healthToken');
      const headers = { Authorization: `Bearer ${token}` };
      
      const response = await axios.post('/api/medications', medicationData, { headers });
      
      // Update local state
      setMedications(prev => [...prev, response.data]);
      setSubmitMessage({ type: 'success', text: '‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏¢‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!' });
      
      // Setup reminders if enabled
      if (medicationData.reminder_enabled) {
        setupMedicationReminder(response.data);
      }
      
      // Reset form
      setMedicationForm({
        medication_name: '',
        dosage: '',
        frequency: '',
        time_schedule: '',
        start_date: '',
        end_date: '',
        condition: '',
        reminder_enabled: true,
        notes: ''
      });
      
    } catch (error) {
      console.error('Error adding medication:', error);
      setSubmitMessage({ type: 'error', text: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏¢‡∏≤' });
    }
  };

  const markMedicationTaken = async (medicationId, takenTime = new Date()) => {
    try {
      const token = localStorage.getItem('healthToken');
      const headers = { Authorization: `Bearer ${token}` };
      
      const medicationLog = {
        medication_id: medicationId,
        taken_time: takenTime,
        status: 'taken',
        notes: ''
      };
      
      await axios.post('/api/medication-logs', medicationLog, { headers });
      
      // Update medication history
      setMedicationHistory(prev => [...prev, {
        ...medicationLog,
        id: Date.now(),
        medication: medications.find(m => m.id === medicationId)
      }]);
      
      setSubmitMessage({ type: 'success', text: '‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏ó‡∏≤‡∏ô‡∏¢‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!' });
      
    } catch (error) {
      console.error('Error logging medication:', error);
      setSubmitMessage({ type: 'error', text: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å' });
    }
  };

  const setupMedicationReminder = (medication) => {
    if (!('Notification' in window)) {
      console.log('Browser does not support notifications');
      return;
    }

    // Request permission for notifications
    if (Notification.permission === 'default') {
      Notification.requestPermission();
    }

    if (Notification.permission === 'granted') {
      const scheduleNotification = (scheduledTime) => {
        const now = new Date();
        const notificationTime = new Date(scheduledTime);
        const timeDiff = notificationTime.getTime() - now.getTime();

        if (timeDiff > 0) {
          setTimeout(() => {
            new Notification(`üíä ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏≤‡∏ô‡∏¢‡∏≤: ${medication.medication_name}`, {
              body: `‡∏Ç‡∏ô‡∏≤‡∏î: ${medication.dosage}\n‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥: ${medication.notes || '‡∏ó‡∏≤‡∏ô‡∏ï‡∏≤‡∏°‡πÅ‡∏û‡∏ó‡∏¢‡πå‡∏™‡∏±‡πà‡∏á'}`,
              icon: '/favicon.ico',
              tag: `medication-${medication.id}`,
              requireInteraction: true
            });
          }, timeDiff);
        }
      };

      // Setup reminders based on frequency
      const times = medication.time_schedule.split(',').map(t => t.trim());
      times.forEach(time => {
        const [hours, minutes] = time.split(':');
        const today = new Date();
        const scheduledTime = new Date(today.getFullYear(), today.getMonth(), today.getDate(), 
                                      parseInt(hours), parseInt(minutes));
        
        // If time has passed today, schedule for tomorrow
        if (scheduledTime < new Date()) {
          scheduledTime.setDate(scheduledTime.getDate() + 1);
        }
        
        scheduleNotification(scheduledTime);
      });
    }
  };

  const getMedicationStatus = (medication) => {
    if (!medication.start_date) return '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏';
    
    const startDate = new Date(medication.start_date);
    const endDate = medication.end_date ? new Date(medication.end_date) : null;
    const today = new Date();
    
    if (today < startDate) return '‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏∂‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°';
    if (endDate && today > endDate) return '‡∏´‡∏°‡∏î‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤';
    
    // Check if taken today
    const todayLogs = medicationHistory.filter(log => {
      const logDate = new Date(log.taken_time);
      return logDate.toDateString() === today.toDateString() && 
             log.medication_id === medication.id;
    });
    
    const scheduledTimes = medication.time_schedule.split(',').length;
    const takenToday = todayLogs.length;
    
    if (takenToday >= scheduledTimes) return '‡∏ó‡∏≤‡∏ô‡∏Ñ‡∏£‡∏ö‡πÅ‡∏•‡πâ‡∏ß‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ';
    if (takenToday > 0) return `‡∏ó‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß ${takenToday}/${scheduledTimes} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á`;
    return '‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ó‡∏≤‡∏ô';
  };

  const getConditionMedications = (condition) => {
    const conditionMeds = {
      '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô‡∏™‡∏π‡∏á': [
        { name: 'Amlodipine', dosage: '5-10 mg', frequency: '‡∏ß‡∏±‡∏ô‡∏•‡∏∞ 1 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á', time: '08:00', color: 'bg-blue-100 text-blue-800' },
        { name: 'Losartan', dosage: '50-100 mg', frequency: '‡∏ß‡∏±‡∏ô‡∏•‡∏∞ 1 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á', time: '08:00', color: 'bg-blue-100 text-blue-800' },
        { name: 'Atenolol', dosage: '25-50 mg', frequency: '‡∏ß‡∏±‡∏ô‡∏•‡∏∞ 1-2 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á', time: '08:00,20:00', color: 'bg-blue-100 text-blue-800' }
      ],
      '‡πÄ‡∏ö‡∏≤‡∏´‡∏ß‡∏≤‡∏ô': [
        { name: 'Metformin', dosage: '500-1000 mg', frequency: '‡∏ß‡∏±‡∏ô‡∏•‡∏∞ 2 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á', time: '08:00,20:00', color: 'bg-green-100 text-green-800' },
        { name: 'Glipizide', dosage: '5-10 mg', frequency: '‡∏ß‡∏±‡∏ô‡∏•‡∏∞ 1-2 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á', time: '08:00,20:00', color: 'bg-green-100 text-green-800' },
        { name: 'Insulin', dosage: '‡∏ï‡∏≤‡∏°‡πÅ‡∏û‡∏ó‡∏¢‡πå‡∏Å‡∏≥‡∏´‡∏ô‡∏î', frequency: '‡∏Å‡πà‡∏≠‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£', time: '07:30,12:30,18:30', color: 'bg-green-100 text-green-800' }
      ],
      '‡∏ß‡∏±‡∏ì‡πÇ‡∏£‡∏Ñ': [
        { name: 'Isoniazid (H)', dosage: '300 mg', frequency: '‡∏ß‡∏±‡∏ô‡∏•‡∏∞ 1 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á', time: '08:00', color: 'bg-red-100 text-red-800' },
        { name: 'Rifampin (R)', dosage: '600 mg', frequency: '‡∏ß‡∏±‡∏ô‡∏•‡∏∞ 1 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á', time: '08:00', color: 'bg-red-100 text-red-800' },
        { name: 'Ethambutol (E)', dosage: '1200 mg', frequency: '‡∏ß‡∏±‡∏ô‡∏•‡∏∞ 1 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á', time: '08:00', color: 'bg-red-100 text-red-800' },
        { name: 'Pyrazinamide (Z)', dosage: '1500 mg', frequency: '‡∏ß‡∏±‡∏ô‡∏•‡∏∞ 1 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á', time: '08:00', color: 'bg-red-100 text-red-800' }
      ],
      '‡πÇ‡∏£‡∏Ñ‡∏´‡∏±‡∏ß‡πÉ‡∏à': [
        { name: 'Aspirin', dosage: '81-100 mg', frequency: '‡∏ß‡∏±‡∏ô‡∏•‡∏∞ 1 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á', time: '20:00', color: 'bg-purple-100 text-purple-800' },
        { name: 'Simvastatin', dosage: '20-40 mg', frequency: '‡∏ß‡∏±‡∏ô‡∏•‡∏∞ 1 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á', time: '20:00', color: 'bg-purple-100 text-purple-800' },
        { name: 'Clopidogrel', dosage: '75 mg', frequency: '‡∏ß‡∏±‡∏ô‡∏•‡∏∞ 1 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á', time: '08:00', color: 'bg-purple-100 text-purple-800' }
      ]
    };
    
    return conditionMeds[condition] || [];
  };

  const handleMedicationInputChange = (e) => {
    const { name, value, type, checked } = e.target;
    setMedicationForm(prev => ({
      ...prev,
      [name]: type === 'checkbox' ? checked : value
    }));
  };

  // Calculate comprehensive health score
  const calculateHealthScore = () => {
    if (!userProfile || !recentMetrics || recentMetrics.length === 0) {
      return null;
    }

    let totalScore = 0;
    let factors = 0;

    // BMI Score (25 points)
    const currentBMI = getCurrentBMI();
    if (currentBMI) {
      let bmiScore = 0;
      if (currentBMI >= 18.5 && currentBMI <= 24.9) {
        bmiScore = 25; // Perfect BMI
      } else if (currentBMI >= 17 && currentBMI < 18.5) {
        bmiScore = 20; // Slightly underweight
      } else if (currentBMI > 24.9 && currentBMI <= 27) {
        bmiScore = 20; // Slightly overweight
      } else if (currentBMI > 27 && currentBMI <= 30) {
        bmiScore = 15; // Moderately overweight
      } else if (currentBMI > 30 && currentBMI <= 35) {
        bmiScore = 10; // Obese level 1
      } else {
        bmiScore = 5; // Severely unhealthy BMI
      }
      totalScore += bmiScore;
      factors++;
    }

    // Blood Pressure Score (25 points) - ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    const systolic = getLatestValidValue('systolic_bp');
    const diastolic = getLatestValidValue('diastolic_bp');
    if (systolic && diastolic) {
      let bpScore = 0;
      
      if (systolic <= 120 && diastolic <= 80) {
        bpScore = 25; // Normal
      } else if (systolic <= 129 && diastolic <= 80) {
        bpScore = 20; // Elevated
      } else if (systolic <= 139 || diastolic <= 89) {
        bpScore = 15; // Stage 1 hypertension
      } else if (systolic <= 159 || diastolic <= 99) {
        bpScore = 10; // Stage 2 hypertension
      } else {
        bpScore = 5; // Crisis level
      }
      totalScore += bpScore;
      factors++;
    }

    // Blood Sugar Score (25 points) - ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    const bloodSugar = getLatestValidValue('blood_sugar_mg');
    if (bloodSugar) {
      let sugarScore = 0;
      
      if (bloodSugar >= 70 && bloodSugar <= 99) {
        sugarScore = 25; // Normal fasting
      } else if (bloodSugar >= 100 && bloodSugar <= 125) {
        sugarScore = 15; // Pre-diabetic
      } else if (bloodSugar >= 126 && bloodSugar <= 180) {
        sugarScore = 10; // Diabetic but controlled
      } else {
        sugarScore = 5; // Poorly controlled
      }
      totalScore += sugarScore;
      factors++;
    }

    // Heart Rate Score (25 points) - ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    const heartRate = getLatestValidValue('heart_rate');
    if (heartRate) {
      let hrScore = 0;
      
      if (heartRate >= 60 && heartRate <= 100) {
        hrScore = 25; // Normal resting heart rate
      } else if (heartRate >= 50 && heartRate < 60) {
        hrScore = 20; // Athletic heart rate
      } else if (heartRate > 100 && heartRate <= 120) {
        hrScore = 15; // Slightly elevated
      } else if (heartRate > 120 && heartRate <= 150) {
        hrScore = 10; // Elevated
      } else {
        hrScore = 5; // Concerning levels
      }
      totalScore += hrScore;
      factors++;
    }

    if (factors === 0) return null;

    const averageScore = Math.round(totalScore / factors);
    return {
      score: averageScore,
      maxScore: 100,
      factors: factors,
      grade: averageScore >= 90 ? 'A' : 
             averageScore >= 80 ? 'B' : 
             averageScore >= 70 ? 'C' : 
             averageScore >= 60 ? 'D' : 'F',
      status: averageScore >= 80 ? '‡∏î‡∏µ‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°' : 
              averageScore >= 60 ? '‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á' : '‡∏ï‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á',
      details: {
        bmi: currentBMI,
        bloodPressure: (() => {
          const systolic = getLatestValidValue('systolic_bp');
          const diastolic = getLatestValidValue('diastolic_bp');
          return (systolic && diastolic) ? `${systolic}/${diastolic}` : null;
        })(),
        bloodSugar: getLatestValidValue('blood_sugar_mg'),
        heartRate: getLatestValidValue('heart_rate')
      }
    };
  };

  // Generate AI health insights based on actual data
  const generateHealthInsights = () => {
    const healthScore = calculateHealthScore();
    if (!healthScore) return null;

    const insights = [];
    const recommendations = {
      diet: [],
      exercise: [],
      lifestyle: [],
      medical: []
    };

    const currentBMI = getCurrentBMI();

    // BMI insights
    if (currentBMI) {
      if (currentBMI > 25) {
        insights.push(`BMI ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏≠‡∏¢‡∏π‡πà‡∏ó‡∏µ‡πà ${currentBMI.toFixed(1)} ‡∏ã‡∏∂‡πà‡∏á‡∏™‡∏π‡∏á‡∏Å‡∏ß‡πà‡∏≤‡∏Ñ‡πà‡∏≤‡∏õ‡∏Å‡∏ï‡∏¥`);
        recommendations.diet.push('‡∏•‡∏î‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì‡πÅ‡∏Ñ‡∏•‡∏≠‡∏£‡∏µ‡πà‡∏ï‡πà‡∏≠‡∏ß‡∏±‡∏ô 300-500 ‡πÅ‡∏Ñ‡∏•‡∏≠‡∏£‡∏µ‡πà');
        recommendations.exercise.push('‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢‡πÅ‡∏ö‡∏ö cardio 30 ‡∏ô‡∏≤‡∏ó‡∏µ ‡∏ß‡∏±‡∏ô‡∏•‡∏∞ 5 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ï‡πà‡∏≠‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå');
        recommendations.lifestyle.push('‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏ó‡∏∏‡∏Å‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå');
      } else if (currentBMI < 18.5) {
        insights.push(`BMI ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏≠‡∏¢‡∏π‡πà‡∏ó‡∏µ‡πà ${currentBMI.toFixed(1)} ‡∏ã‡∏∂‡πà‡∏á‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤‡∏Ñ‡πà‡∏≤‡∏õ‡∏Å‡∏ï‡∏¥`);
        recommendations.diet.push('‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÅ‡∏Ñ‡∏•‡∏≠‡∏£‡∏µ‡πà‡∏à‡∏≤‡∏Å‡πÇ‡∏õ‡∏£‡∏ï‡∏µ‡∏ô‡πÅ‡∏•‡∏∞‡∏Ñ‡∏≤‡∏£‡πå‡πÇ‡∏ö‡πÑ‡∏Æ‡πÄ‡∏î‡∏£‡∏ï‡∏ó‡∏µ‡πà‡∏î‡∏µ');
        recommendations.exercise.push('‡πÄ‡∏ô‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢‡πÅ‡∏ö‡∏ö strength training');
      }
    }

    // Blood pressure insights - ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    const systolic = getLatestValidValue('systolic_bp');
    const diastolic = getLatestValidValue('diastolic_bp');
    if (systolic && diastolic) {
      if (systolic > 140 || diastolic > 90) {
        insights.push(`‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô‡πÇ‡∏•‡∏´‡∏¥‡∏ï ${systolic}/${diastolic} ‡∏™‡∏π‡∏á‡∏Å‡∏ß‡πà‡∏≤‡∏õ‡∏Å‡∏ï‡∏¥`);
        recommendations.diet.push('‡∏•‡∏î‡∏Å‡∏≤‡∏£‡∏ö‡∏£‡∏¥‡πÇ‡∏†‡∏Ñ‡πÄ‡∏Å‡∏•‡∏∑‡∏≠‡πÅ‡∏•‡∏∞‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÅ‡∏õ‡∏£‡∏£‡∏π‡∏õ');
        recommendations.lifestyle.push('‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ñ‡∏£‡∏µ‡∏¢‡∏î‡∏î‡πâ‡∏ß‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏™‡∏°‡∏≤‡∏ò‡∏¥');
        recommendations.medical.push('‡∏Ñ‡∏ß‡∏£‡∏õ‡∏£‡∏∂‡∏Å‡∏©‡∏≤‡πÅ‡∏û‡∏ó‡∏¢‡πå‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô‡πÇ‡∏•‡∏´‡∏¥‡∏ï‡∏™‡∏π‡∏á');
      } else if (systolic > 120 || diastolic > 80) {
        insights.push('‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô‡πÇ‡∏•‡∏´‡∏¥‡∏ï‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏™‡∏π‡∏á‡∏Å‡∏ß‡πà‡∏≤‡∏õ‡∏Å‡∏ï‡∏¥ ‡∏Ñ‡∏ß‡∏£‡πÄ‡∏ù‡πâ‡∏≤‡∏£‡∏∞‡∏ß‡∏±‡∏á');
        recommendations.lifestyle.push('‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢‡πÄ‡∏ö‡∏≤‡πÜ ‡∏™‡∏°‡πà‡∏≥‡πÄ‡∏™‡∏°‡∏≠');
      }
    }

    // Blood sugar insights - ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    const bloodSugar = getLatestValidValue('blood_sugar_mg');
    if (bloodSugar) {
      if (bloodSugar > 126) {
        insights.push(`‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏•‡πÉ‡∏ô‡πÄ‡∏•‡∏∑‡∏≠‡∏î ${bloodSugar} mg/dL ‡∏™‡∏π‡∏á‡∏Å‡∏ß‡πà‡∏≤‡∏õ‡∏Å‡∏ï‡∏¥‡∏°‡∏≤‡∏Å`);
        recommendations.diet.push('‡∏•‡∏î‡∏Å‡∏≤‡∏£‡∏ö‡∏£‡∏¥‡πÇ‡∏†‡∏Ñ‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏•‡πÅ‡∏•‡∏∞‡∏Ñ‡∏≤‡∏£‡πå‡πÇ‡∏ö‡πÑ‡∏Æ‡πÄ‡∏î‡∏£‡∏ï‡∏ã‡∏±‡∏ö‡∏ã‡πâ‡∏≠‡∏ô');
        recommendations.medical.push('‡∏Ñ‡∏ß‡∏£‡∏õ‡∏£‡∏∂‡∏Å‡∏©‡∏≤‡πÅ‡∏û‡∏ó‡∏¢‡πå‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÄ‡∏ö‡∏≤‡∏´‡∏ß‡∏≤‡∏ô‡∏ó‡∏±‡∏ô‡∏ó‡∏µ');
      } else if (bloodSugar > 100) {
        insights.push(`‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏•‡πÉ‡∏ô‡πÄ‡∏•‡∏∑‡∏≠‡∏î ${bloodSugar} mg/dL ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏ö‡∏≤‡∏´‡∏ß‡∏≤‡∏ô`);
        recommendations.diet.push('‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏Å‡∏≤‡∏£‡∏ö‡∏£‡∏¥‡πÇ‡∏†‡∏Ñ‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏•‡πÅ‡∏•‡∏∞‡πÅ‡∏õ‡πâ‡∏á');
        recommendations.exercise.push('‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏á‡∏≠‡∏≤‡∏´‡∏≤‡∏£');
      }
    }

    // Heart rate insights - ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    const heartRate = getLatestValidValue('heart_rate');
    if (heartRate) {
      if (heartRate > 100) {
        insights.push(`‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡πâ‡∏ô‡∏Ç‡∏≠‡∏á‡∏´‡∏±‡∏ß‡πÉ‡∏à ${heartRate} bpm ‡∏™‡∏π‡∏á‡∏Å‡∏ß‡πà‡∏≤‡∏õ‡∏Å‡∏ï‡∏¥`);
        recommendations.lifestyle.push('‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á‡∏Ñ‡∏≤‡πÄ‡∏ü‡∏≠‡∏µ‡∏ô‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ñ‡∏£‡∏µ‡∏¢‡∏î');
        if (heartRate > 120) {
          recommendations.medical.push('‡∏Ñ‡∏ß‡∏£‡∏õ‡∏£‡∏∂‡∏Å‡∏©‡∏≤‡πÅ‡∏û‡∏ó‡∏¢‡πå‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡πâ‡∏ô‡∏Ç‡∏≠‡∏á‡∏´‡∏±‡∏ß‡πÉ‡∏à');
        }
      }
    }

    // Risk factors analysis - ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏õ‡∏±‡∏à‡∏à‡∏±‡∏¢‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
    const latestLifestyle = recentMetrics.find(record => 
      record.alcohol_units || record.smoking_cigarettes || record.caffeine_cups || record.screen_time_hours
    );
    
    if (latestLifestyle) {
      // ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Å‡∏≤‡∏£‡∏î‡∏∑‡πà‡∏°‡πÄ‡∏´‡∏•‡πâ‡∏≤
      const alcoholUnits = parseInt(latestLifestyle.alcohol_units);
      if (alcoholUnits > 0) {
        if (alcoholUnits > 4) {
          insights.push(`‡∏î‡∏∑‡πà‡∏°‡πÄ‡∏´‡∏•‡πâ‡∏≤ ${alcoholUnits} ‡∏´‡∏ô‡πà‡∏ß‡∏¢/‡∏ß‡∏±‡∏ô - ‡∏°‡∏≤‡∏Å‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ ‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏ï‡πà‡∏≠‡πÇ‡∏£‡∏Ñ‡∏ï‡∏±‡∏ö‡πÅ‡∏•‡∏∞‡∏°‡∏∞‡πÄ‡∏£‡πá‡∏á`);
          recommendations.lifestyle.push('‡∏•‡∏î‡∏Å‡∏≤‡∏£‡∏î‡∏∑‡πà‡∏°‡πÄ‡∏´‡∏•‡πâ‡∏≤‡∏•‡∏á‡πÉ‡∏´‡πâ‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤ 2 ‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏ï‡πà‡∏≠‡∏ß‡∏±‡∏ô');
          recommendations.medical.push('‡∏Ñ‡∏ß‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏ï‡∏±‡∏ö‡πÅ‡∏•‡∏∞‡∏£‡∏∞‡∏ö‡∏ö‡∏´‡∏±‡∏ß‡πÉ‡∏à');
        } else if (alcoholUnits > 2) {
          insights.push(`‡∏î‡∏∑‡πà‡∏°‡πÄ‡∏´‡∏•‡πâ‡∏≤ ${alcoholUnits} ‡∏´‡∏ô‡πà‡∏ß‡∏¢/‡∏ß‡∏±‡∏ô - ‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥`);
          recommendations.lifestyle.push('‡∏•‡∏î‡∏Å‡∏≤‡∏£‡∏î‡∏∑‡πà‡∏°‡πÄ‡∏´‡∏•‡πâ‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡∏°‡∏µ‡∏ß‡∏±‡∏ô‡∏´‡∏¢‡∏∏‡∏î‡∏î‡∏∑‡πà‡∏°');
        }
      }
      
      // ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Å‡∏≤‡∏£‡∏™‡∏π‡∏ö‡∏ö‡∏∏‡∏´‡∏£‡∏µ‡πà
      const smokingCigs = parseInt(latestLifestyle.smoking_cigarettes);
      if (smokingCigs > 0) {
        insights.push(`‡∏™‡∏π‡∏ö‡∏ö‡∏∏‡∏´‡∏£‡∏µ‡πà ${smokingCigs} ‡∏°‡∏ß‡∏ô/‡∏ß‡∏±‡∏ô - ‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏ï‡πà‡∏≠‡πÇ‡∏£‡∏Ñ‡∏õ‡∏≠‡∏î ‡∏´‡∏±‡∏ß‡πÉ‡∏à ‡πÅ‡∏•‡∏∞‡∏°‡∏∞‡πÄ‡∏£‡πá‡∏á`);
        recommendations.lifestyle.push('‡∏´‡∏¢‡∏∏‡∏î‡∏™‡∏π‡∏ö‡∏ö‡∏∏‡∏´‡∏£‡∏µ‡πà‡πÇ‡∏î‡∏¢‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå ‡∏´‡∏£‡∏∑‡∏≠‡∏•‡∏î‡∏•‡∏á‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏•‡∏∞ 1-2 ‡∏°‡∏ß‡∏ô');
        recommendations.medical.push('‡∏Ñ‡∏ß‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏õ‡∏≠‡∏î‡πÅ‡∏•‡∏∞‡∏£‡∏∞‡∏ö‡∏ö‡∏´‡∏±‡∏ß‡πÉ‡∏à‡∏ó‡∏∏‡∏Å‡∏õ‡∏µ');
        if (smokingCigs > 10) {
          recommendations.medical.push('‡∏Ñ‡∏ß‡∏£‡∏õ‡∏£‡∏∂‡∏Å‡∏©‡∏≤‡πÅ‡∏û‡∏ó‡∏¢‡πå‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏¥‡∏Å‡∏ö‡∏∏‡∏´‡∏£‡∏µ‡πà');
        }
      }
      
      // ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ñ‡∏≤‡πÄ‡∏ü‡∏≠‡∏µ‡∏ô
      const caffeineCups = parseInt(latestLifestyle.caffeine_cups);
      if (caffeineCups > 4) {
        insights.push(`‡∏î‡∏∑‡πà‡∏°‡∏Ñ‡∏≤‡πÄ‡∏ü‡∏≠‡∏µ‡∏ô ${caffeineCups} ‡πÅ‡∏Å‡πâ‡∏ß/‡∏ß‡∏±‡∏ô - ‡∏°‡∏≤‡∏Å‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ ‡∏≠‡∏≤‡∏à‡∏™‡πà‡∏á‡∏ú‡∏•‡∏ï‡πà‡∏≠‡∏Å‡∏≤‡∏£‡∏ô‡∏≠‡∏ô`);
        recommendations.lifestyle.push('‡∏•‡∏î‡∏Ñ‡∏≤‡πÄ‡∏ü‡∏≠‡∏µ‡∏ô‡∏•‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠ 2-3 ‡πÅ‡∏Å‡πâ‡∏ß‡∏ï‡πà‡∏≠‡∏ß‡∏±‡∏ô');
        recommendations.lifestyle.push('‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á‡∏Ñ‡∏≤‡πÄ‡∏ü‡∏≠‡∏µ‡∏ô‡∏´‡∏•‡∏±‡∏á 14:00 ‡∏ô.');
      }
      
      // ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÄ‡∏ß‡∏•‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠
      const screenHours = parseFloat(latestLifestyle.screen_time_hours);
      if (screenHours > 8) {
        insights.push(`‡πÄ‡∏ß‡∏•‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠ ${screenHours} ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á/‡∏ß‡∏±‡∏ô - ‡∏°‡∏≤‡∏Å‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ ‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏ï‡πà‡∏≠‡∏™‡∏≤‡∏¢‡∏ï‡∏≤‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏ô‡∏≠‡∏ô`);
        recommendations.lifestyle.push('‡∏•‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠‡∏•‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤ 6 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏ï‡πà‡∏≠‡∏ß‡∏±‡∏ô');
        recommendations.lifestyle.push('‡πÉ‡∏ä‡πâ‡∏Å‡∏é 20-20-20: ‡∏ó‡∏∏‡∏Å 20 ‡∏ô‡∏≤‡∏ó‡∏µ ‡∏°‡∏≠‡∏á 20 ‡∏ü‡∏∏‡∏ï ‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏ß‡∏•‡∏≤ 20 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ');
      }
    }

    // Sleep analysis
    const latestSleep = recentMetrics.find(record => record.sleep_hours_per_night);
    if (latestSleep) {
      const sleepHours = parseFloat(latestSleep.sleep_hours_per_night);
      if (sleepHours < 6) {
        insights.push(`‡∏ô‡∏≠‡∏ô ${sleepHours} ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á/‡∏Ñ‡∏∑‡∏ô - ‡∏ô‡πâ‡∏≠‡∏¢‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ ‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏ï‡πà‡∏≠‡∏£‡∏∞‡∏ö‡∏ö‡∏†‡∏π‡∏°‡∏¥‡∏Ñ‡∏∏‡πâ‡∏°‡∏Å‡∏±‡∏ô`);
        recommendations.lifestyle.push('‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ß‡∏•‡∏≤‡∏ô‡∏≠‡∏ô‡πÉ‡∏´‡πâ‡πÑ‡∏î‡πâ 7-9 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏ï‡πà‡∏≠‡∏Ñ‡∏∑‡∏ô');
        recommendations.lifestyle.push('‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏¥‡∏à‡∏ß‡∏±‡∏ï‡∏£‡∏Å‡πà‡∏≠‡∏ô‡∏ô‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≠‡∏ô‡∏Ñ‡∏•‡∏≤‡∏¢');
      } else if (sleepHours > 10) {
        insights.push(`‡∏ô‡∏≠‡∏ô ${sleepHours} ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á/‡∏Ñ‡∏∑‡∏ô - ‡∏°‡∏≤‡∏Å‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ ‡∏≠‡∏≤‡∏à‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏Å‡∏≤‡∏£‡∏ô‡∏≠‡∏ô`);
        recommendations.lifestyle.push('‡∏õ‡∏£‡∏±‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡∏ô‡∏≠‡∏ô‡πÉ‡∏´‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á 7-9 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á');
        recommendations.medical.push('‡∏Ñ‡∏ß‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏Å‡∏≤‡∏£‡∏ô‡∏≠‡∏ô‡πÅ‡∏•‡∏∞ Sleep Apnea');
      }
    }

    return {
      score: healthScore.score,
      grade: healthScore.grade,
      status: healthScore.status,
      insights: insights,
      recommendations: recommendations,
      riskFactors: insights.length,
      dataCompleteness: healthScore.factors / 4 * 100 // 4 main factors
    };
  };

  if (loading) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-sky-50 via-blue-50 to-white flex items-center justify-center">
        <div className="text-blue-700 text-xl font-medium">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...</div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-sky-50 via-blue-50 to-white">
      {/* Header */}
      <header className="bg-white/80 backdrop-blur-lg border-b border-blue-200/50 shadow-sm">
        <div className="max-w-7xl mx-auto px-3 sm:px-6 lg:px-8">
          <div className="flex justify-between items-center py-4 sm:py-6">
            <div className="flex-1 min-w-0">
              <h1 className="text-xl sm:text-2xl lg:text-3xl font-bold text-blue-800 truncate">
                Health Dashboard
              </h1>
              <p className="text-blue-600 text-sm sm:text-base truncate">
                ‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ, {getGreetingName()}!
              </p>
            </div>
            <div className="flex items-center space-x-2 sm:space-x-4">
              <NotificationSystem 
                userProfile={userProfile} 
                recentMetrics={recentMetrics} 
              />
              <div className="hidden sm:block text-right">
                <p className="text-blue-800 font-medium text-sm">{getFullName()}</p>
                <p className="text-blue-600 text-xs">{user?.email}</p>
              </div>
              <button
                onClick={logout}
                className="bg-red-100 hover:bg-red-200 text-red-700 px-2 py-1 sm:px-4 sm:py-2 rounded-lg border border-red-300 transition-colors text-sm"
              >
                <span className="hidden sm:inline">‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö</span>
                <span className="sm:hidden">‡∏≠‡∏≠‡∏Å</span>
              </button>
            </div>
          </div>
        </div>
      </header>

      {/* Navigation Tabs */}
      <div className="max-w-7xl mx-auto px-3 sm:px-6 lg:px-8 py-4 sm:py-6">
        <div className="flex overflow-x-auto scrollbar-hide space-x-1 mb-6 sm:mb-8 pb-2">
          {[
            { id: 'overview', label: '‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏°', icon: 'üìä' },
            { id: 'trends', label: '‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û', icon: 'üìà' },
            { id: 'analytics', label: '‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå AI', icon: 'üß†' },
            { id: 'metrics', label: '‡∏Ñ‡πà‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û', icon: 'ü©∫' },
            { id: 'behaviors', label: '‡∏û‡∏§‡∏ï‡∏¥‡∏Å‡∏£‡∏£‡∏°', icon: 'üèÉ' },
            { id: 'profile', label: '‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå', icon: 'üë§' }
          ].map((tab) => (
            <button
              key={tab.id}
              onClick={() => setActiveTab(tab.id)}
              className={`flex-shrink-0 px-3 sm:px-6 py-2 sm:py-3 rounded-lg font-medium transition-all whitespace-nowrap text-sm sm:text-base ${
                activeTab === tab.id
                  ? 'bg-blue-600 text-white border border-blue-500 shadow-md'
                  : 'bg-white/70 text-blue-700 hover:bg-blue-50 border border-blue-200'
              }`}
            >
              <span className="mr-1 sm:mr-2">{tab.icon}</span>
              <span className="hidden xs:inline sm:inline">{tab.label}</span>
            </button>
          ))}
        </div>

        {/* Health Trends Tab */}
        {activeTab === 'trends' && (
          <div className="space-y-6">
            <HealthTrends userId={user?.userId} />
            <div className="grid grid-cols-1 lg:grid-cols-2 gap-4 sm:gap-6">
              <HealthReportPDF 
                userProfile={userProfile} 
                recentMetrics={recentMetrics}
                dataHistory={dataHistory}
              />
              <HealthReportPDF_Thai 
                userProfile={userProfile} 
                recentMetrics={recentMetrics}
                dataHistory={dataHistory}
              />
            </div>
          </div>
        )}

        {/* Overview Tab */}
        {activeTab === 'overview' && (
          <>
            <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4 sm:gap-6 mb-6 sm:mb-8">
              {/* BMI Card */}
              <div className="bg-white/90 backdrop-blur-lg rounded-lg p-4 sm:p-6 border border-blue-200 shadow-lg">
                <div className="flex items-center justify-between">
                  <div className="flex-1 min-w-0">
                    <p className="text-blue-600 text-xs sm:text-sm font-medium">BMI</p>
                    <p className={`text-xl sm:text-2xl font-bold truncate ${getBMIColor(getCurrentBMI())}`}>
                      {getCurrentBMI() ? getCurrentBMI().toFixed(1) : '--'}
                    </p>
                    <p className="text-blue-700 text-xs sm:text-sm truncate">
                      {getBMICategory(getCurrentBMI())}
                    </p>
                    {getCurrentBMI() && getCurrentWeight() && (
                      <p className="text-xs text-blue-500 mt-1 truncate">
                        {userProfile?.height_cm}cm, {getCurrentWeight()}kg
                      </p>
                    )}
                  </div>
                  <div className="text-2xl sm:text-3xl ml-2">‚öñÔ∏è</div>
                </div>
              </div>

              {/* Blood Pressure Card */}
              <div className="bg-white/90 backdrop-blur-lg rounded-lg p-4 sm:p-6 border border-blue-200 shadow-lg">
                <div className="flex items-center justify-between">
                  <div className="flex-1 min-w-0">
                    <p className="text-blue-600 text-xs sm:text-sm font-medium">‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô‡πÇ‡∏•‡∏´‡∏¥‡∏ï</p>
                    <p className="text-xl sm:text-2xl font-bold text-blue-900 truncate">
                      {(() => {
                        const systolic = getLatestValidValue('systolic_bp');
                        const diastolic = getLatestValidValue('diastolic_bp');
                        return (systolic && diastolic) ? `${systolic}/${diastolic}` : '--/--';
                      })()}
                    </p>
                    <p className={`text-xs sm:text-sm truncate ${(() => {
                      const systolic = getLatestValidValue('systolic_bp');
                      const diastolic = getLatestValidValue('diastolic_bp');
                      return getBPStatus(systolic, diastolic).color;
                    })()}`}>
                      {(() => {
                        const systolic = getLatestValidValue('systolic_bp');
                        const diastolic = getLatestValidValue('diastolic_bp');
                        return getBPStatus(systolic, diastolic).status;
                      })()}
                    </p>
                  </div>
                  <div className="text-2xl sm:text-3xl ml-2">üíì</div>
                </div>
              </div>

              {/* Heart Rate Card */}
              <div className="bg-white/90 backdrop-blur-lg rounded-lg p-4 sm:p-6 border border-blue-200 shadow-lg">
                <div className="flex items-center justify-between">
                  <div className="flex-1 min-w-0">
                    <p className="text-blue-600 text-xs sm:text-sm font-medium">‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡πâ‡∏ô‡∏´‡∏±‡∏ß‡πÉ‡∏à</p>
                    <p className="text-xl sm:text-2xl font-bold text-blue-900 truncate">
                      {(() => {
                        const heartRate = getLatestValidValue('heart_rate');
                        return heartRate ? `${heartRate}` : '--';
                      })()}
                      {(() => {
                        const heartRate = getLatestValidValue('heart_rate');
                        return heartRate ? <span className="text-sm"> bpm</span> : null;
                      })()}
                    </p>
                  </div>
                  <div className="text-2xl sm:text-3xl ml-2">üíó</div>
                </div>
              </div>

              {/* Last Checkup Card */}
              <div className="bg-white/90 backdrop-blur-lg rounded-lg p-4 sm:p-6 border border-blue-200 shadow-lg">
                <div className="flex items-center justify-between">
                  <div className="flex-1 min-w-0">
                    <p className="text-blue-600 text-xs sm:text-sm font-medium">‡∏ï‡∏£‡∏ß‡∏à‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î</p>
                    <p className="text-base sm:text-lg font-bold text-blue-900 truncate">
                      {(() => {
                        const lastCheckupDate = getLastCheckupDate();
                        if (lastCheckupDate) {
                          try {
                            const date = new Date(lastCheckupDate);
                            if (isNaN(date.getTime())) {
                              return '‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á';
                            }
                            return date.toLocaleDateString('th-TH');
                          } catch (error) {
                            return '‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á';
                          }
                        }
                        
                        // Fallback to healthSummary if available
                        if (healthSummary?.last_checkup) {
                          try {
                            const date = new Date(healthSummary.last_checkup);
                            if (isNaN(date.getTime())) {
                              return '‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á';
                            }
                            return date.toLocaleDateString('th-TH');
                          } catch (error) {
                            return '‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á';
                          }
                        }
                        
                        return '‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•';
                      })()}
                    </p>
                  </div>
                  <div className="text-3xl">üìÖ</div>
                </div>
              </div>
            </div>

            {/* Health Behavior Cards */}
            <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4 sm:gap-6 mb-6 sm:mb-8">
              {/* Exercise Card */}
              <div className="bg-white/90 backdrop-blur-lg rounded-lg p-4 sm:p-6 border border-green-200 shadow-lg">
                <div className="flex items-center justify-between">
                  <div className="flex-1 min-w-0">
                    <p className="text-green-600 text-xs sm:text-sm font-medium">üèÉ ‡∏û‡∏§‡∏ï‡∏¥‡∏Å‡∏£‡∏£‡∏°‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û</p>
                    <p className="text-sm sm:text-base font-bold text-green-900 truncate">
                      üèÉ ‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢: {(() => {
                        const latestExercise = recentMetrics.find(record => record.exercise_duration_minutes && parseInt(record.exercise_duration_minutes) > 0);
                        return latestExercise ? `${latestExercise.exercise_duration_minutes} ‡∏ô‡∏≤‡∏ó‡∏µ` : '‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•';
                      })()}
                    </p>
                    <p className="text-xs text-green-700 mt-1">
                      {(() => {
                        const latestExercise = recentMetrics.find(record => record.exercise_duration_minutes && parseInt(record.exercise_duration_minutes) > 0);
                        if (latestExercise?.exercise_type) return latestExercise.exercise_type;
                        return '';
                      })()}
                    </p>
                  </div>
                </div>
              </div>

              {/* Sleep Card */}
              <div className="bg-white/90 backdrop-blur-lg rounded-lg p-4 sm:p-6 border border-purple-200 shadow-lg">
                <div className="flex items-center justify-between">
                  <div className="flex-1 min-w-0">
                    <p className="text-purple-600 text-xs sm:text-sm font-medium">üèÉ ‡∏û‡∏§‡∏ï‡∏¥‡∏Å‡∏£‡∏£‡∏°‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û</p>
                    <p className="text-sm sm:text-base font-bold text-purple-900 truncate">
                      üò¥ ‡∏Å‡∏≤‡∏£‡∏ô‡∏≠‡∏ô: {(() => {
                        const latestSleep = recentMetrics.find(record => record.sleep_hours_per_night && parseFloat(record.sleep_hours_per_night) > 0);
                        return latestSleep ? `${latestSleep.sleep_hours_per_night} ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á` : '‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•';
                      })()}
                    </p>
                    <p className="text-xs text-purple-700 mt-1">
                      {(() => {
                        const latestSleep = recentMetrics.find(record => record.sleep_quality);
                        if (latestSleep?.sleep_quality) return `‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û: ${latestSleep.sleep_quality}`;
                        return '';
                      })()}
                    </p>
                  </div>
                </div>
              </div>

              {/* Alcohol Card */}
              <div className="bg-white/90 backdrop-blur-lg rounded-lg p-4 sm:p-6 border border-amber-200 shadow-lg">
                <div className="flex items-center justify-between">
                  <div className="flex-1 min-w-0">
                    <p className="text-amber-600 text-xs sm:text-sm font-medium">üèÉ ‡∏û‡∏§‡∏ï‡∏¥‡∏Å‡∏£‡∏£‡∏°‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û</p>
                    <p className="text-sm sm:text-base font-bold text-amber-900 truncate">
                      üç∫ ‡∏î‡∏∑‡πà‡∏°‡πÄ‡∏´‡∏•‡πâ‡∏≤: {(() => {
                        const latestAlcohol = recentMetrics.find(record => record.alcohol_units && parseInt(record.alcohol_units) > 0);
                        return latestAlcohol ? `${latestAlcohol.alcohol_units} ‡∏´‡∏ô‡πà‡∏ß‡∏¢/‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå` : '‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•';
                      })()}
                    </p>
                    <p className="text-xs text-amber-700 mt-1">
                      {(() => {
                        const latestAlcohol = recentMetrics.find(record => record.alcohol_units && parseInt(record.alcohol_units) > 0);
                        if (latestAlcohol) {
                          const units = parseInt(latestAlcohol.alcohol_units);
                          if (units === 0) return '‡πÑ‡∏°‡πà‡∏î‡∏∑‡πà‡∏°';
                          if (units <= 14) return '‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢';
                          return '‡∏°‡∏≤‡∏Å‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ';
                        }
                        return '';
                      })()}
                    </p>
                  </div>
                </div>
              </div>

              {/* Smoking Card */}
              <div className="bg-white/90 backdrop-blur-lg rounded-lg p-4 sm:p-6 border border-red-200 shadow-lg">
                <div className="flex items-center justify-between">
                  <div className="flex-1 min-w-0">
                    <p className="text-red-600 text-xs sm:text-sm font-medium">üèÉ ‡∏û‡∏§‡∏ï‡∏¥‡∏Å‡∏£‡∏£‡∏°‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û</p>
                    <p className="text-sm sm:text-base font-bold text-red-900 truncate">
                      üö¨ ‡∏™‡∏π‡∏ö‡∏ö‡∏∏‡∏´‡∏£‡∏µ‡πà: {(() => {
                        const latestSmoking = recentMetrics.find(record => record.smoking_cigarettes && parseInt(record.smoking_cigarettes) >= 0);
                        if (latestSmoking) {
                          const cigarettes = parseInt(latestSmoking.smoking_cigarettes);
                          if (cigarettes === 0) return '‡πÑ‡∏°‡πà‡∏™‡∏π‡∏ö';
                          return `${cigarettes} ‡∏°‡∏ß‡∏ô/‡∏ß‡∏±‡∏ô`;
                        }
                        return '‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•';
                      })()}
                    </p>
                    <p className="text-xs text-red-700 mt-1">
                      {(() => {
                        const latestSmoking = recentMetrics.find(record => record.smoking_cigarettes && parseInt(record.smoking_cigarettes) >= 0);
                        if (latestSmoking) {
                          const cigarettes = parseInt(latestSmoking.smoking_cigarettes);
                          if (cigarettes === 0) return '‡∏î‡∏µ‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°';
                          if (cigarettes <= 5) return '‡∏Ñ‡∏ß‡∏£‡∏•‡∏î';
                          return '‡∏≠‡∏±‡∏ô‡∏ï‡∏£‡∏≤‡∏¢‡∏ï‡πà‡∏≠‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û';
                        }
                        return '';
                      })()}
                    </p>
                  </div>
                </div>
              </div>
            </div>

            {/* Quick Actions Section */}
            <div className="mb-8">
              <h3 className="text-xl font-bold text-blue-900 mb-4 flex items-center border-b-2 border-blue-200 pb-2">
                <span className="mr-2">‚ö°</span>
                ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û
              </h3>
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
                {/* Record Vitals Card */}
                <button 
                  onClick={() => setActiveTab('metrics')}
                  className="bg-gradient-to-br from-emerald-100 to-green-100 hover:from-emerald-200 hover:to-green-200 rounded-lg p-6 border-2 border-emerald-300 shadow-lg transition-all duration-300 group"
                >
                  <div className="text-center">
                    <div className="text-4xl mb-3 group-hover:scale-110 transition-transform duration-300">ü©∫</div>
                    <h4 className="text-emerald-800 font-bold mb-2">‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡πà‡∏≤‡∏ï‡∏£‡∏ß‡∏à</h4>
                    <p className="text-emerald-700 text-sm font-medium">‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô, ‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏•, ‡∏Ñ‡∏≠‡πÄ‡∏•‡∏™‡πÄ‡∏ï‡∏≠‡∏£‡∏≠‡∏•</p>
                  </div>
                </button>

                {/* Record Exercise Card */}
                <button 
                  onClick={() => setActiveTab('behaviors')}
                  className="bg-gradient-to-br from-sky-100 to-blue-100 hover:from-sky-200 hover:to-blue-200 rounded-lg p-6 border-2 border-sky-300 shadow-lg transition-all duration-300 group"
                >
                  <div className="text-center">
                    <div className="text-4xl mb-3 group-hover:scale-110 transition-transform duration-300">üèÉ</div>
                    <h4 className="text-sky-800 font-bold mb-2">‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°</h4>
                    <p className="text-sky-700 text-sm font-medium">‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢, ‡∏Å‡∏≤‡∏£‡∏ô‡∏≠‡∏ô</p>
                  </div>
                </button>

                {/* View Analytics Card */}
                <button 
                  onClick={() => setActiveTab('analytics')}
                  className="bg-gradient-to-br from-indigo-100 to-purple-100 hover:from-indigo-200 hover:to-purple-200 rounded-lg p-6 border-2 border-indigo-300 shadow-lg transition-all duration-300 group"
                >
                  <div className="text-center">
                    <div className="text-4xl mb-3 group-hover:scale-110 transition-transform duration-300">üß†</div>
                    <h4 className="text-indigo-800 font-bold mb-2">‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå AI</h4>
                    <p className="text-indigo-700 text-sm font-medium">‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡πÅ‡∏•‡∏∞‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥</p>
                  </div>
                </button>

                {/* Update Profile Card */}
                <button 
                  onClick={() => setActiveTab('profile')}
                  className="bg-gradient-to-br from-rose-100 to-pink-100 hover:from-rose-200 hover:to-pink-200 rounded-lg p-6 border-2 border-rose-300 shadow-lg transition-all duration-300 group"
                >
                  <div className="text-center">
                    <div className="text-4xl mb-3 group-hover:scale-110 transition-transform duration-300">üë§</div>
                    <h4 className="text-rose-800 font-bold mb-2">‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå</h4>
                    <p className="text-rose-700 text-sm font-medium">‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠</p>
                  </div>
                </button>

                {/* Medication Tracking Card */}
                <button 
                  onClick={() => setActiveTab('medications')}
                  className="bg-gradient-to-br from-amber-100 to-orange-100 hover:from-amber-200 hover:to-orange-200 rounded-lg p-6 border-2 border-amber-300 shadow-lg transition-all duration-300 group"
                >
                  <div className="text-center">
                    <div className="text-4xl mb-3 group-hover:scale-110 transition-transform duration-300">üíä</div>
                    <h4 className="text-amber-800 font-bold mb-2">‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏¢‡∏≤</h4>
                    <p className="text-amber-700 text-sm font-medium">‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô, ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏ó‡∏≤‡∏ô</p>
                  </div>
                </button>
              </div>
            </div>
          </>
        )}

        {/* Health Summary Section */}
        {activeTab === 'overview' && healthSummary && (
          <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
            {/* Personal Info */}
            <div className="bg-white/95 backdrop-blur-lg rounded-lg p-6 border-2 border-blue-300 shadow-lg">
              <h3 className="text-xl font-bold text-blue-900 mb-4 flex items-center border-b-2 border-blue-200 pb-2">
                üë§ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß
                <button
                  onClick={() => setActiveTab('profile')}
                  className="ml-auto text-sm bg-blue-500 hover:bg-blue-600 text-white px-3 py-1 rounded-lg transition-all duration-300 font-medium"
                >
                  ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
                </button>
              </h3>
              <div className="space-y-3">
                <div className="flex justify-between py-2 border-b border-blue-100">
                  <span className="text-blue-700 font-medium">‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•:</span>
                  <span className="text-blue-900 font-semibold">
                    {getFullName() !== user?.username && getFullName() !== '‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ'
                      ? getFullName()
                      : <span className="text-orange-600 bg-orange-100 px-2 py-1 rounded text-sm">‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏Å‡∏£‡∏≠‡∏Å</span>
                    }
                  </span>
                </div>
                <div className="flex justify-between py-2 border-b border-blue-100">
                  <span className="text-blue-700 font-medium">‡∏ß‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏î:</span>
                  <span className="text-blue-900 font-semibold">
                    {userProfile?.date_of_birth 
                      ? (() => {
                          try {
                            const date = new Date(userProfile.date_of_birth);
                            if (isNaN(date.getTime())) {
                              return <span className="text-red-600 bg-red-100 px-2 py-1 rounded text-sm">‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á</span>;
                            }
                            return date.toLocaleDateString('th-TH', {
                              year: 'numeric',
                              month: 'long',
                              day: 'numeric'
                            });
                          } catch (error) {
                            return <span className="text-red-600 bg-red-100 px-2 py-1 rounded text-sm">‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á</span>;
                          }
                        })()
                      : <span className="text-orange-600 bg-orange-100 px-2 py-1 rounded text-sm">‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏Å‡∏£‡∏≠‡∏Å</span>
                    }
                  </span>
                </div>
                <div className="flex justify-between py-2 border-b border-blue-100">
                  <span className="text-blue-700 font-medium">‡πÄ‡∏û‡∏®:</span>
                  <span className="text-blue-900 font-semibold">
                    {safeDisplayValue(
                      userProfile?.gender === 'male' ? '‡∏ä‡∏≤‡∏¢' : 
                      userProfile?.gender === 'female' ? '‡∏´‡∏ç‡∏¥‡∏á' : 
                      userProfile?.gender === 'other' ? '‡∏≠‡∏∑‡πà‡∏ô‡πÜ' : null,
                      '‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏∞‡∏ö‡∏∏'
                    )}
                  </span>
                </div>
                <div className="flex justify-between py-2 border-b border-blue-100">
                  <span className="text-blue-700 font-medium">‡∏™‡πà‡∏ß‡∏ô‡∏™‡∏π‡∏á:</span>
                  <span className="text-blue-900 font-semibold">
                    {safeDisplayValue(
                      userProfile?.height_cm, 
                      '‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏Å‡∏£‡∏≠‡∏Å',
                      (value) => `${value} ‡∏ã‡∏°.`
                    )}
                  </span>
                </div>
                <div className="flex justify-between py-2 border-b border-blue-100">
                  <span className="text-blue-700 font-medium">‡∏Å‡∏£‡∏∏‡πä‡∏õ‡πÄ‡∏•‡∏∑‡∏≠‡∏î:</span>
                  <span className="text-blue-900 font-semibold">
                    {safeDisplayValue(userProfile?.blood_group, '‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏∞‡∏ö‡∏∏')}
                  </span>
                </div>
                <div className="flex justify-between py-2 border-b border-blue-100">
                  <span className="text-blue-700 font-medium">‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô:</span>
                  <span className="text-blue-900 font-semibold">
                    {safeDisplayValue(
                      getCurrentWeight(),
                      '‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•',
                      (value) => `${value} ‡∏Å‡∏Å.`
                    )}
                  </span>
                </div>
                {getCurrentBMI() && (
                  <div className="flex justify-between py-2 border-b border-blue-100">
                    <span className="text-blue-700 font-medium">BMI:</span>
                    <span className={`font-bold text-lg ${getBMIColor(getCurrentBMI())}`}>
                      {getCurrentBMI().toFixed(1)} ({getBMICategory(getCurrentBMI())})
                    </span>
                  </div>
                )}
                <div className="flex justify-between py-2">
                  <span className="text-blue-700 font-medium">‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£:</span>
                  <span className="text-blue-900 font-semibold">
                    {safeDisplayValue(userProfile?.phone, '‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏Å‡∏£‡∏≠‡∏Å')}
                  </span>
                </div>
                {!userProfile?.profile_completed && (
                  <div className="mt-4 p-4 bg-yellow-50 border-2 border-yellow-300 rounded-lg">
                    <p className="text-yellow-800 text-sm text-center font-medium">
                      üí° ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô
                    </p>
                  </div>
                )}
              </div>
            </div>

            {/* Health Recommendations */}
            <div className="bg-white/95 backdrop-blur-lg rounded-lg p-6 border-2 border-blue-300 shadow-lg">
              <h3 className="text-xl font-bold text-blue-900 mb-4 border-b-2 border-blue-200 pb-2">‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏î‡πâ‡∏≤‡∏ô‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û</h3>
              <div className="space-y-4">
                {healthSummary.lifestyle_recommendations ? (
                  <div className="bg-blue-50 border-2 border-blue-300 rounded-lg p-4">
                    <div className="flex items-start">
                      <div className="text-2xl mr-3">üí°</div>
                      <div>
                        <h4 className="text-blue-900 font-semibold mb-2">‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏™‡πà‡∏ß‡∏ô‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•</h4>
                        <p className="text-blue-700 text-sm leading-relaxed">
                          {healthSummary.lifestyle_recommendations}
                        </p>
                      </div>
                    </div>
                  </div>
                ) : (
                  <div className="bg-gray-50 border-2 border-gray-300 rounded-lg p-4 text-center">
                    <div className="text-3xl mb-2">üéØ</div>
                    <p className="text-gray-700 text-sm font-medium mb-2">‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏™‡πà‡∏ß‡∏ô‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•</p>
                    <p className="text-gray-600 text-xs">‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏Å‡∏±‡∏ö‡∏Ñ‡∏∏‡∏ì‡πÇ‡∏î‡∏¢‡πÄ‡∏â‡∏û‡∏≤‡∏∞</p>
                    <button
                      onClick={() => setActiveTab('profile')}
                      className="mt-2 text-blue-600 hover:text-blue-800 text-sm font-medium bg-blue-100 hover:bg-blue-200 px-3 py-1 rounded-lg transition-colors"
                    >
                      ‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå ‚Üí
                    </button>
                  </div>
                )}

                {/* ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏™‡πà‡∏ß‡∏ô‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏• */}
                <div className="space-y-2">
                  <h4 className="text-blue-900 font-semibold text-sm mb-3 border-b border-blue-200 pb-1">
                    {userProfile?.medical_conditions || userProfile?.medications ? '‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ñ‡∏∏‡∏ì' : '‡πÄ‡∏Ñ‡∏•‡πá‡∏î‡∏•‡∏±‡∏ö‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û'}
                  </h4>
                  <div className="grid grid-cols-1 gap-2">
                    {getPersonalizedHealthTips().map((tip, index) => (
                      <div key={index} className={`
                        ${tip.color === 'red' ? 'bg-red-50 border-red-300 text-red-800' : 
                          tip.color === 'green' ? 'bg-green-50 border-green-300 text-green-800' :
                          tip.color === 'blue' ? 'bg-blue-50 border-blue-300 text-blue-800' :
                          tip.color === 'purple' ? 'bg-purple-50 border-purple-300 text-purple-800' :
                          tip.color === 'orange' ? 'bg-orange-50 border-orange-300 text-orange-800' :
                          tip.color === 'yellow' ? 'bg-yellow-50 border-yellow-300 text-yellow-800' :
                          'bg-gray-50 border-gray-300 text-gray-800'} 
                        border-2 rounded p-3`}>
                        <div className="flex items-start space-x-2">
                          <span className="text-lg flex-shrink-0">{tip.icon}</span>
                          <div className="flex-1">
                            <h5 className="font-semibold text-xs mb-1">{tip.title}</h5>
                            <p className="text-xs leading-relaxed">{tip.content}</p>
                          </div>
                        </div>
                      </div>
                    ))}
                  </div>
                </div>
              </div>
            </div>

            {/* Recent Health Records */}
            <div className="bg-white/95 backdrop-blur-lg rounded-lg p-6 border-2 border-blue-300 shadow-lg">
              <div className="flex justify-between items-center mb-4 border-b-2 border-blue-200 pb-2">
                <h3 className="text-xl font-bold text-blue-900">‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î</h3>
                <button
                  onClick={() => setActiveTab('metrics')}
                  className="text-blue-600 hover:text-blue-800 text-sm font-medium bg-blue-100 hover:bg-blue-200 px-3 py-1 rounded-lg transition-colors"
                >
                  ‡∏î‡∏π‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ‚Üí
                </button>
              </div>
              <div className="space-y-3">
                {recentMetrics.length > 0 ? (
                  recentMetrics.slice(0, 5).map((record, index) => (
                    <div key={index} className="bg-blue-50 rounded-lg p-4 border-2 border-blue-200 hover:border-blue-300 transition-colors">
                      <div className="flex justify-between items-start">
                        <div>
                          <p className="text-blue-900 text-sm font-semibold">
                            {(record.systolic_bp || record.diastolic_bp || record.heart_rate || record.blood_sugar_mg || record.weight_kg || record.height_cm) ? 'ü©∫ ‡∏Ñ‡πà‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û' : 'üèÉ ‡∏û‡∏§‡∏ï‡∏¥‡∏Å‡∏£‡∏£‡∏°‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û'}
                          </p>
                          <p className="text-blue-700 text-sm mt-1 font-medium">
                            {/* ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û */}
                            {record.systolic_bp && record.diastolic_bp && (
                              <span>‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô: {record.systolic_bp}/{record.diastolic_bp} mmHg</span>
                            )}
                            {record.heart_rate && (
                              <span>{record.systolic_bp && record.diastolic_bp ? ' | ' : ''}‡∏ä‡∏µ‡∏û‡∏à‡∏£: {record.heart_rate} bpm</span>
                            )}
                            {record.blood_sugar_mg && (
                              <span><br />‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏•‡πÉ‡∏ô‡πÄ‡∏•‡∏∑‡∏≠‡∏î: {record.blood_sugar_mg} mg/dL</span>
                            )}
                            {record.weight_kg && (
                              <span><br />‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å: {record.weight_kg} ‡∏Å‡∏Å.</span>
                            )}
                            
                            {/* ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢ */}
                            {record.exercise_duration_minutes && (
                              <span><br />üèÉ ‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢: {record.exercise_duration_minutes} ‡∏ô‡∏≤‡∏ó‡∏µ</span>
                            )}
                            {record.exercise_type && (
                              <span> ({record.exercise_type})</span>
                            )}
                            {record.exercise_intensity && (
                              <span> - ‡∏£‡∏∞‡∏î‡∏±‡∏ö: {record.exercise_intensity}</span>
                            )}
                            
                            {/* ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ô‡∏≠‡∏ô */}
                            {record.sleep_hours_per_night && (
                              <span><br />üò¥ ‡∏Å‡∏≤‡∏£‡∏ô‡∏≠‡∏ô: {record.sleep_hours_per_night} ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á</span>
                            )}
                            {record.sleep_quality && (
                              <span> - ‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û: {record.sleep_quality}</span>
                            )}
                            {record.sleep_bedtime && record.sleep_wakeup && (
                              <span> ({record.sleep_bedtime} - {record.sleep_wakeup})</span>
                            )}
                            
                            {/* ‡∏õ‡∏±‡∏à‡∏à‡∏±‡∏¢‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á */}
                            {record.alcohol_units && parseInt(record.alcohol_units) > 0 && (
                              <span><br />üç∫ ‡πÄ‡∏´‡∏•‡πâ‡∏≤: {record.alcohol_units} ‡∏´‡∏ô‡πà‡∏ß‡∏¢</span>
                            )}
                            {record.smoking_cigarettes && parseInt(record.smoking_cigarettes) > 0 && (
                              <span><br />üö¨ ‡∏ö‡∏∏‡∏´‡∏£‡∏µ‡πà: {record.smoking_cigarettes} ‡∏°‡∏ß‡∏ô</span>
                            )}
                            {record.caffeine_cups && parseInt(record.caffeine_cups) > 0 && (
                              <span><br />‚òï ‡∏Ñ‡∏≤‡πÄ‡∏ü‡∏≠‡∏µ‡∏ô: {record.caffeine_cups} ‡πÅ‡∏Å‡πâ‡∏ß</span>
                            )}
                            
                            {/* ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏∑‡πà‡∏ô‡πÜ */}
                            {record.water_glasses && (
                              <span><br />üíß ‡∏î‡∏∑‡πà‡∏°‡∏ô‡πâ‡∏≥: {record.water_glasses} ‡πÅ‡∏Å‡πâ‡∏ß</span>
                            )}
                            {record.stress_level && (
                              <span><br />üò∞ ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ñ‡∏£‡∏µ‡∏¢‡∏î: {record.stress_level}</span>
                            )}
                            {record.screen_time_hours && (
                              <span><br />üì± ‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠: {record.screen_time_hours} ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á</span>
                            )}
                            
                            {/* ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç */}
                            {!record.systolic_bp && !record.diastolic_bp && !record.heart_rate && 
                             !record.exercise_duration_minutes && !record.sleep_hours_per_night && 
                             !record.weight_kg && !record.blood_sugar_mg && !record.alcohol_units && 
                             !record.smoking_cigarettes && !record.caffeine_cups && !record.water_glasses && (
                              <span>‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô - ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î</span>
                            )}
                          </p>
                        </div>
                        <span className="text-blue-600 text-sm font-medium bg-blue-100 px-2 py-1 rounded">
                          {formatSafeDate(record.date || record.created_at, { short: true })}
                        </span>
                      </div>
                    </div>
                  ))
                ) : (
                  <div className="text-center py-8 bg-gray-50 rounded-lg border-2 border-gray-200">
                    <div className="text-4xl mb-2">üìä</div>
                    <p className="text-gray-700 text-sm font-medium">‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û</p>
                    <button
                      onClick={() => setActiveTab('lifestyle')}
                      className="text-blue-600 hover:text-blue-800 text-sm mt-1 font-medium bg-blue-100 hover:bg-blue-200 px-3 py-1 rounded-lg transition-colors"
                    >
                      ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
                    </button>
                  </div>
                )}
              </div>
            </div>

            {/* Exercise History */}
            <div className="bg-white/95 backdrop-blur-lg rounded-lg p-6 border-2 border-green-300 shadow-lg">
              <div className="flex justify-between items-center mb-4 border-b-2 border-green-200 pb-2">
                <h3 className="text-xl font-bold text-green-900 flex items-center">
                  <span className="mr-2">üèÉ‚Äç‚ôÇÔ∏è</span>
                  ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢
                </h3>
                <button
                  onClick={() => setActiveTab('behaviors')}
                  className="text-green-600 hover:text-green-800 text-sm font-medium bg-green-100 hover:bg-green-200 px-3 py-1 rounded-lg transition-colors"
                >
                  ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÉ‡∏´‡∏°‡πà +
                </button>
              </div>
              <div className="space-y-3">
                {recentMetrics.filter(record => record.exercise_duration_minutes && record.exercise_duration_minutes > 0).length > 0 ? (
                  recentMetrics.filter(record => record.exercise_duration_minutes && record.exercise_duration_minutes > 0).slice(0, 3).map((record, index) => (
                    <div key={index} className="bg-green-50 rounded-lg p-4 border-2 border-green-200 hover:border-green-300 transition-colors">
                      <div className="flex justify-between items-start">
                        <div className="flex-1">
                          <p className="text-green-900 text-sm font-semibold flex items-center">
                            <span className="mr-2">üéØ</span>
                            ‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢
                            {record.exercise_frequency && (
                              <span className="ml-2 text-xs bg-green-200 text-green-800 px-2 py-1 rounded">
                                {translateToThai(record.exercise_frequency, 'exercise_frequency')}
                              </span>
                            )}
                          </p>
                          <p className="text-green-700 text-sm mt-1 font-medium">
                            ‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤: {record.exercise_duration_minutes} ‡∏ô‡∏≤‡∏ó‡∏µ
                            {record.stress_level && ` | ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ñ‡∏£‡∏µ‡∏¢‡∏î: ${record.stress_level}/5`}
                            {record.sleep_hours_per_night && ` | ‡∏Å‡∏≤‡∏£‡∏ô‡∏≠‡∏ô: ${record.sleep_hours_per_night} ‡∏ä‡∏°.`}
                          </p>
                          {record.water_intake_liters && record.water_intake_liters > 0 && (
                            <p className="text-green-600 text-xs mt-1">
                              üíß ‡∏ô‡πâ‡∏≥‡∏î‡∏∑‡πà‡∏°: {record.water_intake_liters} ‡∏•‡∏¥‡∏ï‡∏£
                            </p>
                          )}
                          {record.diet_quality && record.diet_quality !== 'fair' && record.diet_quality !== '' && (
                            <p className="text-green-600 text-xs mt-1">
                              ü•ó ‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏´‡∏≤‡∏£: {translateToThai(record.diet_quality, 'diet_quality')}
                            </p>
                          )}
                        </div>
                        <span className="text-green-600 text-sm font-medium bg-green-100 px-2 py-1 rounded ml-2">
                          {formatSafeDate(record.record_date || record.date || record.created_at, { short: true })}
                        </span>
                      </div>
                    </div>
                  ))
                ) : (
                  <div className="text-center py-8 bg-green-50 rounded-lg border-2 border-green-200">
                    <div className="text-4xl mb-2">üèÉ‚Äç‚ôÇÔ∏è</div>
                    <p className="text-green-700 text-sm font-medium">‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢</p>
                    <p className="text-green-600 text-xs mt-1">‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤</p>
                    <button
                      onClick={() => setActiveTab('behaviors')}
                      className="text-green-600 hover:text-green-800 text-sm mt-2 font-medium bg-green-100 hover:bg-green-200 px-3 py-1 rounded-lg transition-colors"
                    >
                      ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
                    </button>
                  </div>
                )}
              </div>
            </div>

          </div>
        )}

        {/* Analytics Tab */}
        {activeTab === 'analytics' && (
          <HealthAnalytics 
            userProfile={userProfile}
            recentMetrics={recentMetrics}
            healthSummary={healthSummary}
            getCurrentBMI={getCurrentBMI}
            getCurrentWeight={getCurrentWeight}
            getBMICategory={getBMICategory}
            getBMIColor={getBMIColor}
            calculateHealthScore={calculateHealthScore}
            generateHealthInsights={generateHealthInsights}
          />
        )}

        {/* Metrics Tab */}
        {activeTab === 'metrics' && (
          <div className="max-w-4xl mx-auto">
            <div className="bg-white/95 backdrop-blur-lg rounded-lg p-4 sm:p-6 border-2 border-blue-300 shadow-lg">
              <div className="flex flex-col sm:flex-row items-start sm:items-center justify-between mb-4 sm:mb-6 border-b-2 border-blue-200 pb-4">
                <h3 className="text-xl sm:text-2xl font-bold text-blue-900 flex items-center mb-3 sm:mb-0">
                  <span className="mr-2 sm:mr-3">ü©∫</span>
                  ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡πà‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û
                </h3>
                <button
                  onClick={() => setActiveTab('overview')}
                  className="text-blue-600 hover:text-blue-800 transition-colors bg-blue-100 hover:bg-blue-200 px-3 sm:px-4 py-2 rounded-lg font-medium text-sm sm:text-base"
                >
                  ‚Üê ‡∏Å‡∏•‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å
                </button>
              </div>

              {/* Submit Message */}
              {submitMessage.text && (
                <div className={`mb-4 sm:mb-6 p-3 sm:p-4 rounded-lg border-2 animate-fade-in ${
                  submitMessage.type === 'success' 
                    ? 'bg-green-50 border-green-300 text-green-800' 
                    : 'bg-red-50 border-red-300 text-red-800'
                }`}>
                  <div className="flex items-center">
                    <span className="mr-2 text-lg">
                      {submitMessage.type === 'success' ? '‚úÖ' : '‚ùå'}
                    </span>
                    <span className="font-semibold text-sm sm:text-base">{submitMessage.text}</span>
                    {submitMessage.type === 'success' && (
                      <span className="ml-2 text-xs sm:text-sm text-green-600">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å...</span>
                    )}
                  </div>
                </div>
              )}

              <form onSubmit={handleMetricsSubmit} className="space-y-4 sm:space-y-6">
                {/* Date */}
                <div className="grid grid-cols-1 gap-4 sm:gap-6">
                  <div>
                    <label className="block text-blue-900 font-semibold mb-2 text-sm sm:text-base">
                      ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ß‡∏±‡∏î <span className="text-red-600">*</span>
                    </label>
                    <input
                      type="date"
                      name="measurement_date"
                      value={metricsForm.measurement_date}
                      onChange={handleMetricsInputChange}
                      required
                      max={new Date().toISOString().split('T')[0]}
                      className="w-full px-3 sm:px-4 py-2 sm:py-3 bg-white border-2 border-blue-300 rounded-lg text-blue-900 placeholder-blue-400 focus:outline-none focus:border-blue-500 focus:ring-2 focus:ring-blue-200 text-sm sm:text-base"
                    />
                  </div>
                </div>

                {/* Vital Signs */}
                <div className="bg-blue-50 rounded-lg p-4 sm:p-6 border-2 border-blue-200">
                  <h4 className="text-lg sm:text-xl font-bold text-blue-900 mb-3 sm:mb-4 flex items-center border-b border-blue-200 pb-2">
                    <span className="mr-2">üíì</span>
                    ‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡∏ä‡∏µ‡∏û
                  </h4>
                  <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-3 sm:gap-4">
                    <div>
                      <label className="block text-blue-800 font-semibold mb-2">
                        ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô‡πÇ‡∏•‡∏´‡∏¥‡∏ï‡∏ï‡∏±‡∏ß‡∏ö‡∏ô (mmHg)
                      </label>
                      <input
                        type="number"
                        name="systolic_bp"
                        value={metricsForm.systolic_bp}
                        onChange={handleMetricsInputChange}
                        min="70"
                        max="300"
                        placeholder="‡πÄ‡∏ä‡πà‡∏ô 120"
                        className="w-full px-4 py-3 bg-white border-2 border-blue-300 rounded-lg text-blue-900 placeholder-blue-400 focus:outline-none focus:border-blue-500 focus:ring-2 focus:ring-blue-200"
                      />
                    </div>
                    <div>
                      <label className="block text-blue-800 font-semibold mb-2">
                        ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô‡πÇ‡∏•‡∏´‡∏¥‡∏ï‡∏ï‡∏±‡∏ß‡∏•‡πà‡∏≤‡∏á (mmHg)
                      </label>
                      <input
                        type="number"
                        name="diastolic_bp"
                        value={metricsForm.diastolic_bp}
                        onChange={handleMetricsInputChange}
                        min="40"
                        max="200"
                        placeholder="‡πÄ‡∏ä‡πà‡∏ô 80"
                        className="w-full px-4 py-3 bg-white border-2 border-blue-300 rounded-lg text-blue-900 placeholder-blue-400 focus:outline-none focus:border-blue-500 focus:ring-2 focus:ring-blue-200"
                      />
                    </div>
                    <div>
                      <label className="block text-blue-800 font-semibold mb-2">
                        ‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡πâ‡∏ô‡∏´‡∏±‡∏ß‡πÉ‡∏à (bpm)
                      </label>
                      <input
                        type="number"
                        name="heart_rate"
                        value={metricsForm.heart_rate}
                        onChange={handleMetricsInputChange}
                        min="30"
                        max="250"
                        placeholder="‡πÄ‡∏ä‡πà‡∏ô 72"
                        className="w-full px-4 py-3 bg-white border-2 border-blue-300 rounded-lg text-blue-900 placeholder-blue-400 focus:outline-none focus:border-blue-500 focus:ring-2 focus:ring-blue-200"
                      />
                    </div>
                  </div>
                </div>

                {/* Blood Tests */}
                <div className="bg-red-50 rounded-lg p-6 border-2 border-red-200">
                  <h4 className="text-xl font-bold text-red-900 mb-4 flex items-center border-b border-red-200 pb-2">
                    <span className="mr-2">ü©∏</span>
                    ‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡πÄ‡∏•‡∏∑‡∏≠‡∏î
                  </h4>
                  <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                    <div>
                      <label className="block text-red-800 font-semibold mb-2">
                        ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏•‡πÉ‡∏ô‡πÄ‡∏•‡∏∑‡∏≠‡∏î (mg/dL)
                      </label>
                      <input
                        type="number"
                        name="blood_sugar_mg"
                        value={metricsForm.blood_sugar_mg}
                        onChange={handleMetricsInputChange}
                        min="20"
                        max="600"
                        placeholder="‡πÄ‡∏ä‡πà‡∏ô 100"
                        className="w-full px-4 py-3 bg-white border-2 border-red-300 rounded-lg text-red-900 placeholder-red-400 focus:outline-none focus:border-red-500 focus:ring-2 focus:ring-red-200"
                      />
                    </div>
                    <div>
                      <label className="block text-red-800 font-semibold mb-2">
                        ‡∏Ñ‡∏≠‡πÄ‡∏•‡∏™‡πÄ‡∏ï‡∏≠‡∏£‡∏≠‡∏•‡∏£‡∏ß‡∏° (mg/dL)
                      </label>
                      <input
                        type="number"
                        name="cholesterol_total"
                        value={metricsForm.cholesterol_total}
                        onChange={handleMetricsInputChange}
                        min="100"
                        max="500"
                        placeholder="‡πÄ‡∏ä‡πà‡∏ô 200"
                        className="w-full px-4 py-3 bg-white border-2 border-red-300 rounded-lg text-red-900 placeholder-red-400 focus:outline-none focus:border-red-500 focus:ring-2 focus:ring-red-200"
                      />
                    </div>
                    <div>
                      <label className="block text-red-800 font-semibold mb-2">
                        HDL (Good Cholesterol) (mg/dL)
                      </label>
                      <input
                        type="number"
                        name="cholesterol_hdl"
                        value={metricsForm.cholesterol_hdl}
                        onChange={handleMetricsInputChange}
                        min="10"
                        max="150"
                        placeholder="‡πÄ‡∏ä‡πà‡∏ô 50"
                        className="w-full px-4 py-3 bg-white border-2 border-red-300 rounded-lg text-red-900 placeholder-red-400 focus:outline-none focus:border-red-500 focus:ring-2 focus:ring-red-200"
                      />
                    </div>
                    <div>
                      <label className="block text-red-800 font-semibold mb-2">
                        LDL (Bad Cholesterol) (mg/dL)
                      </label>
                      <input
                        type="number"
                        name="cholesterol_ldl"
                        value={metricsForm.cholesterol_ldl}
                        onChange={handleMetricsInputChange}
                        min="10"
                        max="300"
                        placeholder="‡πÄ‡∏ä‡πà‡∏ô 100"
                        className="w-full px-4 py-3 bg-white border-2 border-red-300 rounded-lg text-red-900 placeholder-red-400 focus:outline-none focus:border-red-500 focus:ring-2 focus:ring-red-200"
                      />
                    </div>
                    <div>
                      <label className="block text-red-800 font-semibold mb-2">
                        ‡πÑ‡∏ï‡∏£‡∏Å‡∏•‡∏µ‡πÄ‡∏ã‡∏≠‡πÑ‡∏£‡∏î‡πå (mg/dL)
                      </label>
                      <input
                        type="number"
                        name="triglycerides"
                        value={metricsForm.triglycerides}
                        onChange={handleMetricsInputChange}
                        min="10"
                        max="1000"
                        placeholder="‡πÄ‡∏ä‡πà‡∏ô 150"
                        className="w-full px-4 py-3 bg-white border-2 border-red-300 rounded-lg text-red-900 placeholder-red-400 focus:outline-none focus:border-red-500 focus:ring-2 focus:ring-red-200"
                      />
                    </div>
                    <div>
                      <label className="block text-red-800 font-semibold mb-2">
                        HbA1c (%)
                      </label>
                      <input
                        type="number"
                        name="hba1c"
                        value={metricsForm.hba1c}
                        onChange={handleMetricsInputChange}
                        min="3"
                        max="20"
                        step="0.1"
                        placeholder="‡πÄ‡∏ä‡πà‡∏ô 5.5"
                        className="w-full px-4 py-3 bg-white border-2 border-red-300 rounded-lg text-red-900 placeholder-red-400 focus:outline-none focus:border-red-500 focus:ring-2 focus:ring-red-200"
                      />
                    </div>
                    <div>
                      <label className="block text-red-800 font-semibold mb-2">
                        ‡∏Å‡∏£‡∏î‡∏¢‡∏π‡∏£‡∏¥‡∏Å (mg/dL)
                      </label>
                      <input
                        type="number"
                        name="uric_acid"
                        value={metricsForm.uric_acid}
                        onChange={handleMetricsInputChange}
                        min="1"
                        max="20"
                        step="0.1"
                        placeholder="‡πÄ‡∏ä‡πà‡∏ô 5.5"
                        className="w-full px-4 py-3 bg-white border-2 border-red-300 rounded-lg text-red-900 placeholder-red-400 focus:outline-none focus:border-red-500 focus:ring-2 focus:ring-red-200"
                      />
                    </div>
                    <div>
                      <label className="block text-red-800 font-semibold mb-2">
                        ALT (U/L)
                      </label>
                      <input
                        type="number"
                        name="alt"
                        value={metricsForm.alt}
                        onChange={handleMetricsInputChange}
                        min="1"
                        max="500"
                        placeholder="‡πÄ‡∏ä‡πà‡∏ô 25"
                        className="w-full px-4 py-3 bg-white border-2 border-red-300 rounded-lg text-red-900 placeholder-red-400 focus:outline-none focus:border-red-500 focus:ring-2 focus:ring-red-200"
                      />
                    </div>
                    <div>
                      <label className="block text-red-800 font-semibold mb-2">
                        AST (U/L)
                      </label>
                      <input
                        type="number"
                        name="ast"
                        value={metricsForm.ast}
                        onChange={handleMetricsInputChange}
                        min="1"
                        max="500"
                        placeholder="‡πÄ‡∏ä‡πà‡∏ô 30"
                        className="w-full px-4 py-3 bg-white border-2 border-red-300 rounded-lg text-red-900 placeholder-red-400 focus:outline-none focus:border-red-500 focus:ring-2 focus:ring-red-200"
                      />
                    </div>
                    <div>
                      <label className="block text-red-800 font-semibold mb-2">
                        ‡∏Æ‡∏µ‡πÇ‡∏°‡πÇ‡∏Å‡∏•‡∏ö‡∏¥‡∏ô (g/dL)
                      </label>
                      <input
                        type="number"
                        name="hemoglobin"
                        value={metricsForm.hemoglobin}
                        onChange={handleMetricsInputChange}
                        min="5"
                        max="20"
                        step="0.1"
                        placeholder="‡πÄ‡∏ä‡πà‡∏ô 13.5"
                        className="w-full px-4 py-3 bg-white border-2 border-red-300 rounded-lg text-red-900 placeholder-red-400 focus:outline-none focus:border-red-500 focus:ring-2 focus:ring-red-200"
                      />
                    </div>
                    <div>
                      <label className="block text-red-800 font-semibold mb-2">
                        ‡∏Æ‡∏µ‡∏°‡∏≤‡πÇ‡∏ï‡∏Ñ‡∏£‡∏¥‡∏ï (%)
                      </label>
                      <input
                        type="number"
                        name="hematocrit"
                        value={metricsForm.hematocrit}
                        onChange={handleMetricsInputChange}
                        min="15"
                        max="60"
                        step="0.1"
                        placeholder="‡πÄ‡∏ä‡πà‡∏ô 40.5"
                        className="w-full px-4 py-3 bg-white border-2 border-red-300 rounded-lg text-red-900 placeholder-red-400 focus:outline-none focus:border-red-500 focus:ring-2 focus:ring-red-200"
                      />
                    </div>
                    <div>
                      <label className="block text-red-800 font-semibold mb-2">
                        ‡∏ò‡∏≤‡∏ï‡∏∏‡πÄ‡∏´‡∏•‡πá‡∏Å (Œºg/dL)
                      </label>
                      <input
                        type="number"
                        name="iron"
                        value={metricsForm.iron}
                        onChange={handleMetricsInputChange}
                        min="10"
                        max="300"
                        placeholder="‡πÄ‡∏ä‡πà‡∏ô 100"
                        className="w-full px-4 py-3 bg-white border-2 border-red-300 rounded-lg text-red-900 placeholder-red-400 focus:outline-none focus:border-red-500 focus:ring-2 focus:ring-red-200"
                      />
                    </div>
                    <div>
                      <label className="block text-red-800 font-semibold mb-2">
                        TIBC (Œºg/dL)
                      </label>
                      <input
                        type="number"
                        name="tibc"
                        value={metricsForm.tibc}
                        onChange={handleMetricsInputChange}
                        min="200"
                        max="600"
                        placeholder="‡πÄ‡∏ä‡πà‡∏ô 350"
                        className="w-full px-4 py-3 bg-white border-2 border-red-300 rounded-lg text-red-900 placeholder-red-400 focus:outline-none focus:border-red-500 focus:ring-2 focus:ring-red-200"
                      />
                    </div>
                  </div>
                </div>

                {/* Body Composition */}
                <div className="bg-green-50 rounded-lg p-6 border-2 border-green-200">
                  <h4 className="text-xl font-bold text-green-900 mb-4 flex items-center border-b border-green-200 pb-2">
                    <span className="mr-2">‚öñÔ∏è</span>
                    ‡∏≠‡∏á‡∏Ñ‡πå‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö‡∏Ç‡∏≠‡∏á‡∏£‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏¢
                  </h4>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div>
                      <label className="block text-green-800 font-semibold mb-2">
                        ‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå‡πÑ‡∏Ç‡∏°‡∏±‡∏ô (%)
                      </label>
                      <input
                        type="number"
                        name="body_fat_percentage"
                        value={metricsForm.body_fat_percentage}
                        onChange={handleMetricsInputChange}
                        min="2"
                        max="60"
                        step="0.1"
                        placeholder="‡πÄ‡∏ä‡πà‡∏ô 15.5"
                        className="w-full px-4 py-3 bg-white border-2 border-green-300 rounded-lg text-green-900 placeholder-green-400 focus:outline-none focus:border-green-500 focus:ring-2 focus:ring-green-200"
                      />
                    </div>
                    <div>
                      <label className="block text-green-800 font-semibold mb-2">
                        ‡∏°‡∏ß‡∏•‡∏Å‡∏•‡πâ‡∏≤‡∏°‡πÄ‡∏ô‡∏∑‡πâ‡∏≠ (kg)
                      </label>
                      <input
                        type="number"
                        name="muscle_mass_kg"
                        value={metricsForm.muscle_mass_kg}
                        onChange={handleMetricsInputChange}
                        min="10"
                        max="100"
                        step="0.1"
                        placeholder="‡πÄ‡∏ä‡πà‡∏ô 45.5"
                        className="w-full px-4 py-3 bg-white border-2 border-green-300 rounded-lg text-green-900 placeholder-green-400 focus:outline-none focus:border-green-500 focus:ring-2 focus:ring-green-200"
                      />
                    </div>

                    {/* Weight */}
                    <div>
                      <label className="block text-green-800 font-semibold mb-2">
                        ‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å (kg) <span className="text-amber-600">‚ú® ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì BMI</span>
                      </label>
                      <input
                        type="number"
                        name="weight_kg"
                        value={metricsForm.weight_kg}
                        onChange={handleMetricsInputChange}
                        min="20"
                        max="300"
                        step="0.1"
                        placeholder="‡πÄ‡∏ä‡πà‡∏ô 65.5"
                        className="w-full px-4 py-3 bg-white border-2 border-green-300 rounded-lg text-green-900 placeholder-green-400 focus:outline-none focus:border-green-500 focus:ring-2 focus:ring-green-200"
                      />
                    </div>
                  </div>
                </div>

                {/* Notes */}
                <div>
                  <label className="block text-blue-900 font-semibold mb-2">
                    ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
                  </label>
                  <textarea
                    name="notes"
                    value={metricsForm.notes}
                    onChange={handleMetricsInputChange}
                    rows="3"
                    placeholder="‡πÄ‡∏ä‡πà‡∏ô ‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥, ‡∏¢‡∏≤‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡∏ó‡∏≤‡∏ô, ‡∏™‡∏†‡∏≤‡∏û‡πÅ‡∏ß‡∏î‡∏•‡πâ‡∏≠‡∏°‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à..."
                    className="w-full px-4 py-3 bg-white border-2 border-blue-300 rounded-lg text-blue-900 placeholder-blue-400 focus:outline-none focus:border-blue-500 focus:ring-2 focus:ring-blue-200"
                  />
                </div>

                {/* Submit Buttons */}
                <div className="flex gap-4 pt-6 border-t-2 border-blue-200">
                  <button
                    type="submit"
                    disabled={isSubmitting}
                    className="flex-1 bg-gradient-to-r from-green-500 to-emerald-600 hover:from-green-600 hover:to-emerald-700 disabled:from-gray-500 disabled:to-gray-600 disabled:cursor-not-allowed text-white font-bold py-4 px-6 rounded-lg transition-all duration-300 flex items-center justify-center border-2 border-green-600 shadow-lg"
                  >
                    {isSubmitting ? (
                      <>
                        <div className="animate-spin rounded-full h-5 w-5 border-b-2 border-white mr-2"></div>
                        ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å...
                      </>
                    ) : (
                      <>
                        <span className="mr-2">üíæ</span>
                        ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
                      </>
                    )}
                  </button>
                  <button
                    type="button"
                    onClick={() => {
                      setMetricsForm({
                        measurement_date: new Date().toISOString().split('T')[0],
                        systolic_bp: '',
                        diastolic_bp: '',
                        heart_rate: '',
                        blood_sugar_mg: '',
                        cholesterol_total: '',
                        cholesterol_hdl: '',
                        cholesterol_ldl: '',
                        triglycerides: '',
                        hba1c: '',
                        body_fat_percentage: '',
                        muscle_mass_kg: '',
                        weight_kg: '',
                        uric_acid: '',
                        alt: '',
                        ast: '',
                        hemoglobin: '',
                        hematocrit: '',
                        iron: '',
                        tibc: '',
                        notes: ''
                      });
                      setSubmitMessage({ type: '', text: '' });
                    }}
                    className="px-6 py-3 bg-gray-500/20 hover:bg-gray-500/30 text-gray-300 hover:text-white border border-gray-500/50 rounded-lg transition-all duration-300"
                  >
                    ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà
                  </button>
                </div>
              </form>

              {/* Safety Notice */}
              <div className="mt-8 bg-yellow-500/10 border border-yellow-500/30 rounded-lg p-4">
                <div className="flex items-start">
                  <div className="text-2xl mr-3">‚ö†Ô∏è</div>
                  <div>
                    <h5 className="text-yellow-700 font-medium mb-2">‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏£‡∏£‡∏∞‡∏ß‡∏±‡∏á</h5>
                    <ul className="text-yellow-500 text-sm space-y-1">
                      <li>‚Ä¢ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡∏ß‡∏£‡∏°‡∏≤‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡πÇ‡∏î‡∏¢‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏•‡∏∞‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥</li>
                      <li>‚Ä¢ ‡∏´‡∏≤‡∏Å‡∏û‡∏ö‡∏Ñ‡πà‡∏≤‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏õ‡∏£‡∏∂‡∏Å‡∏©‡∏≤‡πÅ‡∏û‡∏ó‡∏¢‡πå‡πÇ‡∏î‡∏¢‡∏ó‡∏±‡∏ô‡∏ó‡∏µ</li>
                      <li>‚Ä¢ ‡∏£‡∏∞‡∏ö‡∏ö‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ó‡∏î‡πÅ‡∏ó‡∏ô‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡∏ô‡∏¥‡∏à‡∏â‡∏±‡∏¢‡πÇ‡∏î‡∏¢‡πÅ‡∏û‡∏ó‡∏¢‡πå‡πÑ‡∏î‡πâ</li>
                      <li>‚Ä¢ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™‡πÅ‡∏•‡∏∞‡πÄ‡∏Å‡πá‡∏ö‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏ï‡∏≤‡∏°‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô HIPAA ‡πÅ‡∏•‡∏∞ PDPA</li>
                    </ul>
                  </div>
                </div>
              </div>
            </div>
          </div>
        )}

        {/* Lifestyle Tab */}
        {activeTab === 'lifestyle' && (
          <div className="max-w-4xl mx-auto">
            <div className="bg-white/95 backdrop-blur-lg rounded-lg p-6 border-2 border-blue-300 shadow-lg">
              <div className="flex items-center justify-between mb-6 border-b-2 border-blue-200 pb-4">
                <h3 className="text-2xl font-bold text-blue-900 flex items-center">
                  <span className="mr-3">üèÉ</span>
                  ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏û‡∏§‡∏ï‡∏¥‡∏Å‡∏£‡∏£‡∏°‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û
                </h3>
                <button
                  onClick={() => setActiveTab('overview')}
                  className="text-blue-600 hover:text-blue-800 transition-colors bg-blue-100 hover:bg-blue-200 px-4 py-2 rounded-lg font-medium"
                >
                  ‚Üê ‡∏Å‡∏•‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å
                </button>
              </div>

              {/* Submit Message */}
              {submitMessage.text && (
                <div className={`
                  ${submitMessage.type === 'success' ? 'bg-green-50 border-green-500 text-green-800' : 
                    'bg-red-50 border-red-500 text-red-800'} 
                  border-2 rounded-lg p-4 mb-6 flex items-center
                `}>
                  <div className="flex items-center">
                    <span className="text-2xl mr-3">
                      {submitMessage.type === 'success' ? '‚úÖ' : '‚ùå'}
                    </span>
                    <span className="font-semibold">{submitMessage.text}</span>
                    {submitMessage.type === 'success' && (
                      <span className="ml-2 text-sm text-green-600">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å...</span>
                    )}
                  </div>
                </div>
              )}

              {/* Behavior Categories */}
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 mb-8">
                {/* Exercise */}
                <div className="bg-gradient-to-br from-green-50 to-emerald-50 rounded-lg p-4 border-2 border-green-300 text-center hover:shadow-lg transition-all">
                  <div className="text-3xl mb-2">üèÉ‚Äç‚ôÇÔ∏è</div>
                  <h4 className="text-green-800 font-bold mb-1">‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢</h4>
                  <p className="text-green-700 text-sm">‡∏ß‡∏¥‡πà‡∏á ‡πÄ‡∏î‡∏¥‡∏ô ‡∏¢‡∏¥‡∏° ‡∏ß‡πà‡∏≤‡∏¢‡∏ô‡πâ‡∏≥</p>
                </div>

                {/* Sleep */}
                <div className="bg-gradient-to-br from-purple-50 to-indigo-50 rounded-lg p-4 border-2 border-purple-300 text-center hover:shadow-lg transition-all">
                  <div className="text-3xl mb-2">üò¥</div>
                  <h4 className="text-purple-800 font-bold mb-1">‡∏Å‡∏≤‡∏£‡∏ô‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏ö</h4>
                  <p className="text-purple-700 text-sm">‡πÄ‡∏ß‡∏•‡∏≤‡∏ô‡∏≠‡∏ô ‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏Å‡∏≤‡∏£‡∏ô‡∏≠‡∏ô</p>
                </div>

                {/* Nutrition */}
                <div className="bg-gradient-to-br from-orange-50 to-amber-50 rounded-lg p-4 border-2 border-orange-300 text-center hover:shadow-lg transition-all">
                  <div className="text-3xl mb-2">ü•ó</div>
                  <h4 className="text-orange-800 font-bold mb-1">‡πÇ‡∏†‡∏ä‡∏ô‡∏≤‡∏Å‡∏≤‡∏£</h4>
                  <p className="text-orange-700 text-sm">‡∏°‡∏∑‡πâ‡∏≠‡∏≠‡∏≤‡∏´‡∏≤‡∏£ ‡∏ô‡πâ‡∏≥ ‡∏ß‡∏¥‡∏ï‡∏≤‡∏°‡∏¥‡∏ô</p>
                </div>

                {/* Mental Health */}
                <div className="bg-gradient-to-br from-pink-50 to-rose-50 rounded-lg p-4 border-2 border-pink-300 text-center hover:shadow-lg transition-all">
                  <div className="text-3xl mb-2">üßò‚Äç‚ôÄÔ∏è</div>
                  <h4 className="text-pink-800 font-bold mb-1">‡∏à‡∏¥‡∏ï‡πÉ‡∏à</h4>
                  <p className="text-pink-700 text-sm">‡∏™‡∏°‡∏≤‡∏ò‡∏¥ ‡πÇ‡∏¢‡∏Ñ‡∏∞ ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ñ‡∏£‡∏µ‡∏¢‡∏î</p>
                </div>
              </div>

              {/* Behavior Form */}
              <form onSubmit={handleLifestyleSubmit} className="space-y-6">
                {/* Date and Time */}
                <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                  <div>
                    <label className="block text-blue-900 font-semibold mb-2">
                      ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà <span className="text-red-600">*</span>
                    </label>
                    <input
                      type="date"
                      name="date"
                      value={lifestyleForm.date}
                      onChange={handleLifestyleInputChange}
                      required
                      max={new Date().toISOString().split('T')[0]}
                      className="w-full px-4 py-3 bg-white border-2 border-blue-300 rounded-lg text-blue-900 focus:outline-none focus:border-blue-500 focus:ring-2 focus:ring-blue-200"
                    />
                  </div>
                </div>

                {/* Exercise Section */}
                <div className="bg-green-50 rounded-lg p-6 border-2 border-green-200">
                  <h4 className="text-xl font-bold text-green-900 mb-4 flex items-center border-b border-green-200 pb-2">
                    <span className="mr-2">üèÉ‚Äç‚ôÇÔ∏è</span>
                    ‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢
                  </h4>
                  <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                    <div>
                      <label className="block text-green-800 font-semibold mb-2">
                        ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°
                      </label>
                      <select 
                        name="exercise_type"
                        value={lifestyleForm.exercise_type}
                        onChange={handleLifestyleInputChange}
                        className="w-full px-4 py-3 bg-white border-2 border-green-300 rounded-lg text-green-900 focus:outline-none focus:border-green-500 focus:ring-2 focus:ring-green-200"
                      >
                        <option value="">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó</option>
                        <option value="running">‡∏ß‡∏¥‡πà‡∏á</option>
                        <option value="walking">‡πÄ‡∏î‡∏¥‡∏ô</option>
                        <option value="cycling">‡∏õ‡∏±‡πà‡∏ô‡∏à‡∏±‡∏Å‡∏£‡∏¢‡∏≤‡∏ô</option>
                        <option value="swimming">‡∏ß‡πà‡∏≤‡∏¢‡∏ô‡πâ‡∏≥</option>
                        <option value="gym">‡∏¢‡∏¥‡∏°/‡∏ü‡∏¥‡∏ï‡πÄ‡∏ô‡∏™</option>
                        <option value="yoga">‡πÇ‡∏¢‡∏Ñ‡∏∞</option>
                        <option value="sports">‡∏Å‡∏µ‡∏¨‡∏≤</option>
                        <option value="dancing">‡πÄ‡∏ï‡πâ‡∏ô‡∏£‡∏≥</option>
                        <option value="other">‡∏≠‡∏∑‡πà‡∏ô‡πÜ</option>
                      </select>
                    </div>
                    <div>
                      <label className="block text-green-800 font-semibold mb-2">
                        ‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤ (‡∏ô‡∏≤‡∏ó‡∏µ)
                      </label>
                      <input
                        type="number"
                        name="exercise_duration"
                        value={lifestyleForm.exercise_duration}
                        onChange={handleLifestyleInputChange}
                        min="1"
                        max="480"
                        placeholder="‡πÄ‡∏ä‡πà‡∏ô 30"
                        className="w-full px-4 py-3 bg-white border-2 border-green-300 rounded-lg text-green-900 placeholder-green-400 focus:outline-none focus:border-green-500 focus:ring-2 focus:ring-green-200"
                      />
                    </div>
                    <div>
                      <label className="block text-green-800 font-semibold mb-2">
                        ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏ô‡∏±‡∏Å
                      </label>
                      <select 
                        name="exercise_intensity"
                        value={lifestyleForm.exercise_intensity}
                        onChange={handleLifestyleInputChange}
                        className="w-full px-4 py-3 bg-white border-2 border-green-300 rounded-lg text-green-900 focus:outline-none focus:border-green-500 focus:ring-2 focus:ring-green-200"
                      >
                        <option value="">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏∞‡∏î‡∏±‡∏ö</option>
                        <option value="light">‡πÄ‡∏ö‡∏≤</option>
                        <option value="moderate">‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á</option>
                        <option value="vigorous">‡∏´‡∏ô‡∏±‡∏Å</option>
                        <option value="intense">‡∏´‡∏ô‡∏±‡∏Å‡∏°‡∏≤‡∏Å</option>
                      </select>
                    </div>
                  </div>
                </div>

                {/* Sleep Section */}
                <div className="bg-purple-50 rounded-lg p-6 border-2 border-purple-200">
                  <h4 className="text-xl font-bold text-purple-900 mb-4 flex items-center border-b border-purple-200 pb-2">
                    <span className="mr-2">ÔøΩ</span>
                    ‡∏Å‡∏≤‡∏£‡∏ô‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏ö
                  </h4>
                  <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                    <div>
                      <label className="block text-purple-800 font-semibold mb-2">
                        ‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏ô‡∏≠‡∏ô
                      </label>
                      <input
                        type="time"
                        className="w-full px-4 py-3 bg-white border-2 border-purple-300 rounded-lg text-purple-900 focus:outline-none focus:border-purple-500 focus:ring-2 focus:ring-purple-200"
                      />
                    </div>
                    <div>
                      <label className="block text-purple-800 font-semibold mb-2">
                        ‡πÄ‡∏ß‡∏•‡∏≤‡∏ï‡∏∑‡πà‡∏ô
                      </label>
                      <input
                        type="time"
                        className="w-full px-4 py-3 bg-white border-2 border-purple-300 rounded-lg text-purple-900 focus:outline-none focus:border-purple-500 focus:ring-2 focus:ring-purple-200"
                      />
                    </div>
                    <div>
                      <label className="block text-purple-800 font-semibold mb-2">
                        ‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏Å‡∏≤‡∏£‡∏ô‡∏≠‡∏ô
                      </label>
                      <select className="w-full px-4 py-3 bg-white border-2 border-purple-300 rounded-lg text-purple-900 focus:outline-none focus:border-purple-500 focus:ring-2 focus:ring-purple-200">
                        <option value="">‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û</option>
                        <option value="excellent">‡∏î‡∏µ‡∏°‡∏≤‡∏Å</option>
                        <option value="good">‡∏î‡∏µ</option>
                        <option value="fair">‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á</option>
                        <option value="poor">‡πÅ‡∏¢‡πà</option>
                        <option value="very_poor">‡πÅ‡∏¢‡πà‡∏°‡∏≤‡∏Å</option>
                      </select>
                    </div>
                  </div>
                </div>

                {/* Nutrition Section */}
                <div className="bg-orange-50 rounded-lg p-6 border-2 border-orange-200">
                  <h4 className="text-xl font-bold text-orange-900 mb-4 flex items-center border-b border-orange-200 pb-2">
                    <span className="mr-2">ü•ó</span>
                    ‡πÇ‡∏†‡∏ä‡∏ô‡∏≤‡∏Å‡∏≤‡∏£
                  </h4>
                  <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                    <div>
                      <label className="block text-orange-800 font-semibold mb-2">
                        ‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì‡∏ô‡πâ‡∏≥ (‡πÅ‡∏Å‡πâ‡∏ß)
                      </label>
                      <input
                        type="number"
                        min="0"
                        max="20"
                        step="0.5"
                        placeholder="‡πÄ‡∏ä‡πà‡∏ô 8"
                        className="w-full px-4 py-3 bg-white border-2 border-orange-300 rounded-lg text-orange-900 placeholder-orange-400 focus:outline-none focus:border-orange-500 focus:ring-2 focus:ring-orange-200"
                      />
                    </div>
                    <div>
                      <label className="block text-orange-800 font-semibold mb-2">
                        ‡∏ú‡∏±‡∏Å/‡∏ú‡∏•‡πÑ‡∏°‡πâ (‡∏Ñ‡∏£‡∏±‡πâ‡∏á)
                      </label>
                      <input
                        type="number"
                        min="0"
                        max="10"
                        placeholder="‡πÄ‡∏ä‡πà‡∏ô 5"
                        className="w-full px-4 py-3 bg-white border-2 border-orange-300 rounded-lg text-orange-900 placeholder-orange-400 focus:outline-none focus:border-orange-500 focus:ring-2 focus:ring-orange-200"
                      />
                    </div>
                    <div>
                      <label className="block text-orange-800 font-semibold mb-2">
                        ‡∏ß‡∏¥‡∏ï‡∏≤‡∏°‡∏¥‡∏ô/‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÄ‡∏™‡∏£‡∏¥‡∏°
                      </label>
                      <input
                        type="text"
                        placeholder="‡πÄ‡∏ä‡πà‡∏ô ‡∏ß‡∏¥‡∏ï‡∏≤‡∏°‡∏¥‡∏ô‡∏ã‡∏µ, ‡πÅ‡∏Ñ‡∏•‡πÄ‡∏ã‡∏µ‡∏¢‡∏°"
                        className="w-full px-4 py-3 bg-white border-2 border-orange-300 rounded-lg text-orange-900 placeholder-orange-400 focus:outline-none focus:border-orange-500 focus:ring-2 focus:ring-orange-200"
                      />
                    </div>
                  </div>
                </div>

                {/* Mental Health Section */}
                <div className="bg-pink-50 rounded-lg p-6 border-2 border-pink-200">
                  <h4 className="text-xl font-bold text-pink-900 mb-4 flex items-center border-b border-pink-200 pb-2">
                    <span className="mr-2">üßò‚Äç‚ôÄÔ∏è</span>
                    ‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏à‡∏¥‡∏ï
                  </h4>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div>
                      <label className="block text-pink-800 font-semibold mb-2">
                        ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ñ‡∏£‡∏µ‡∏¢‡∏î
                      </label>
                      <select className="w-full px-4 py-3 bg-white border-2 border-pink-300 rounded-lg text-pink-900 focus:outline-none focus:border-pink-500 focus:ring-2 focus:ring-pink-200">
                        <option value="">‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ñ‡∏£‡∏µ‡∏¢‡∏î</option>
                        <option value="1">1 - ‡∏ú‡πà‡∏≠‡∏ô‡∏Ñ‡∏•‡∏≤‡∏¢‡∏°‡∏≤‡∏Å</option>
                        <option value="2">2 - ‡∏ú‡πà‡∏≠‡∏ô‡∏Ñ‡∏•‡∏≤‡∏¢</option>
                        <option value="3">3 - ‡∏õ‡∏Å‡∏ï‡∏¥</option>
                        <option value="4">4 - ‡πÄ‡∏Ñ‡∏£‡∏µ‡∏¢‡∏î‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢</option>
                        <option value="5">5 - ‡πÄ‡∏Ñ‡∏£‡∏µ‡∏¢‡∏î‡∏°‡∏≤‡∏Å</option>
                      </select>
                    </div>
                    <div>
                      <label className="block text-pink-800 font-semibold mb-2">
                        ‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ú‡πà‡∏≠‡∏ô‡∏Ñ‡∏•‡∏≤‡∏¢ (‡∏ô‡∏≤‡∏ó‡∏µ)
                      </label>
                      <input
                        type="number"
                        min="0"
                        max="240"
                        placeholder="‡πÄ‡∏ä‡πà‡∏ô 15"
                        className="w-full px-4 py-3 bg-white border-2 border-pink-300 rounded-lg text-pink-900 placeholder-pink-400 focus:outline-none focus:border-pink-500 focus:ring-2 focus:ring-pink-200"
                      />
                    </div>
                  </div>
                </div>

                {/* Risk Factors Section */}
                <div className="bg-orange-50 rounded-lg p-6 border-2 border-orange-200">
                  <h4 className="text-xl font-bold text-orange-900 mb-4 flex items-center border-b border-orange-200 pb-2">
                    <span className="mr-2">‚ö†Ô∏è</span>
                    ‡∏õ‡∏±‡∏à‡∏à‡∏±‡∏¢‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á
                  </h4>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div>
                      <label className="block text-orange-800 font-semibold mb-2">
                        ‡πÅ‡∏≠‡∏•‡∏Å‡∏≠‡∏Æ‡∏≠‡∏•‡πå (‡∏´‡∏ô‡πà‡∏ß‡∏¢)
                      </label>
                      <input
                        type="number"
                        min="0"
                        max="20"
                        name="alcohol_units"
                        value={lifestyleForm.alcohol_units}
                        onChange={handleLifestyleInputChange}
                        placeholder="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡∏ô‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡πâ‡∏≤"
                        className="w-full px-4 py-3 bg-white border-2 border-orange-300 rounded-lg text-orange-900 placeholder-orange-400 focus:outline-none focus:border-orange-500 focus:ring-2 focus:ring-orange-200"
                      />
                      <p className="text-xs text-orange-600 mt-1">1 ‡∏´‡∏ô‡πà‡∏ß‡∏¢ = ‡πÄ‡∏ö‡∏µ‡∏¢‡∏£‡πå 1 ‡πÅ‡∏Å‡πâ‡∏ß ‡∏´‡∏£‡∏∑‡∏≠ ‡πÑ‡∏ß‡∏ô‡πå 1 ‡πÅ‡∏Å‡πâ‡∏ß‡πÄ‡∏•‡πá‡∏Å</p>
                    </div>
                    <div>
                      <label className="block text-orange-800 font-semibold mb-2">
                        ‡∏ö‡∏∏‡∏´‡∏£‡∏µ‡πà (‡∏°‡∏ß‡∏ô)
                      </label>
                      <input
                        type="number"
                        min="0"
                        max="100"
                        name="smoking_cigarettes"
                        value={lifestyleForm.smoking_cigarettes}
                        onChange={handleLifestyleInputChange}
                        placeholder="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏°‡∏ß‡∏ô‡∏ö‡∏∏‡∏´‡∏£‡∏µ‡πà"
                        className="w-full px-4 py-3 bg-white border-2 border-orange-300 rounded-lg text-orange-900 placeholder-orange-400 focus:outline-none focus:border-orange-500 focus:ring-2 focus:ring-orange-200"
                      />
                    </div>
                    <div>
                      <label className="block text-orange-800 font-semibold mb-2">
                        ‡∏Ñ‡∏≤‡πÄ‡∏ü‡∏≠‡∏µ‡∏ô (‡πÅ‡∏Å‡πâ‡∏ß)
                      </label>
                      <input
                        type="number"
                        min="0"
                        max="20"
                        name="caffeine_cups"
                        value={lifestyleForm.caffeine_cups}
                        onChange={handleLifestyleInputChange}
                        placeholder="‡∏Å‡∏≤‡πÅ‡∏ü ‡∏ä‡∏≤ ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏î‡∏∑‡πà‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û"
                        className="w-full px-4 py-3 bg-white border-2 border-orange-300 rounded-lg text-orange-900 placeholder-orange-400 focus:outline-none focus:border-orange-500 focus:ring-2 focus:ring-orange-200"
                      />
                    </div>
                    <div>
                      <label className="block text-orange-800 font-semibold mb-2">
                        ‡πÄ‡∏ß‡∏•‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠ (‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á)
                      </label>
                      <input
                        type="number"
                        min="0"
                        max="24"
                        step="0.5"
                        name="screen_time_hours"
                        value={lifestyleForm.screen_time_hours}
                        onChange={handleLifestyleInputChange}
                        placeholder="‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå ‡∏Ñ‡∏≠‡∏°‡∏û‡∏¥‡∏ß‡πÄ‡∏ï‡∏≠‡∏£‡πå ‡∏ó‡∏µ‡∏ß‡∏µ"
                        className="w-full px-4 py-3 bg-white border-2 border-orange-300 rounded-lg text-orange-900 placeholder-orange-400 focus:outline-none focus:border-orange-500 focus:ring-2 focus:ring-orange-200"
                      />
                    </div>
                  </div>
                  <div className="mt-4 p-3 bg-orange-100 rounded-lg border border-orange-300">
                    <p className="text-orange-800 text-sm font-medium">
                      üí° <strong>‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•‡∏ó‡∏µ‡πà‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç:</strong> ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏µ‡πâ‡∏ä‡πà‡∏ß‡∏¢ AI ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏õ‡∏±‡∏à‡∏à‡∏±‡∏¢‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡πÅ‡∏•‡∏∞‡πÉ‡∏´‡πâ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°
                    </p>
                    <ul className="text-orange-700 text-xs mt-2 list-disc list-inside">
                      <li>‡πÄ‡∏´‡∏•‡πâ‡∏≤: ‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏ï‡πà‡∏≠‡πÇ‡∏£‡∏Ñ‡∏ï‡∏±‡∏ö ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô‡∏™‡∏π‡∏á ‡∏°‡∏∞‡πÄ‡∏£‡πá‡∏á</li>
                      <li>‡∏ö‡∏∏‡∏´‡∏£‡∏µ‡πà: ‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏ï‡πà‡∏≠‡πÇ‡∏£‡∏Ñ‡∏´‡∏±‡∏ß‡πÉ‡∏à ‡∏õ‡∏≠‡∏î ‡∏°‡∏∞‡πÄ‡∏£‡πá‡∏á</li>
                      <li>‡∏Ñ‡∏≤‡πÄ‡∏ü‡∏≠‡∏µ‡∏ô: ‡∏™‡πà‡∏á‡∏ú‡∏•‡∏ï‡πà‡∏≠‡∏Å‡∏≤‡∏£‡∏ô‡∏≠‡∏ô ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô</li>
                      <li>‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠: ‡∏™‡πà‡∏á‡∏ú‡∏•‡∏ï‡πà‡∏≠‡∏™‡∏≤‡∏¢‡∏ï‡∏≤ ‡∏Å‡∏≤‡∏£‡∏ô‡∏≠‡∏ô ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ñ‡∏£‡∏µ‡∏¢‡∏î</li>
                    </ul>
                  </div>
                </div>

                {/* Notes */}
                <div>
                  <label className="block text-blue-900 font-semibold mb-2">
                    ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
                  </label>
                  <textarea
                    rows="3"
                    placeholder="‡πÄ‡∏ä‡πà‡∏ô ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å ‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥ ‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏ú‡∏•‡∏ï‡πà‡∏≠‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°..."
                    className="w-full px-4 py-3 bg-white border-2 border-blue-300 rounded-lg text-blue-900 placeholder-blue-400 focus:outline-none focus:border-blue-500 focus:ring-2 focus:ring-blue-200"
                  />
                </div>

                {/* Submit Buttons */}
                <div className="flex gap-4 pt-6 border-t-2 border-blue-200">
                  <button
                    type="submit"
                    disabled={isSubmitting}
                    className={`flex-1 ${isSubmitting ? 'bg-gray-400 cursor-not-allowed' : 'bg-gradient-to-r from-green-500 to-emerald-600 hover:from-green-600 hover:to-emerald-700'} text-white font-bold py-4 px-6 rounded-lg transition-all duration-300 flex items-center justify-center border-2 border-green-600 shadow-lg`}
                  >
                    <span className="mr-2">{isSubmitting ? '‚è≥' : 'üíæ'}</span>
                    {isSubmitting ? '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å...' : '‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•'}
                  </button>
                  <button
                    type="button"
                    onClick={() => {
                      setLifestyleForm({
                        date: new Date().toISOString().split('T')[0],
                        exercise_type: '',
                        exercise_duration: '',
                        exercise_intensity: '',
                        sleep_bedtime: '',
                        sleep_wakeup: '',
                        sleep_quality: '',
                        water_glasses: '',
                        fruits_vegetables: '',
                        supplements: '',
                        stress_level: '',
                        relaxation_minutes: '',
                        notes: ''
                      });
                      setSubmitMessage({ type: '', text: '' });
                    }}
                    className="px-6 py-3 bg-gray-100 hover:bg-gray-200 text-gray-700 border-2 border-gray-300 rounded-lg transition-all duration-300 font-medium"
                  >
                    ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà
                  </button>
                </div>
              </form>

              {/* Tips */}
              <div className="mt-8 bg-blue-50 border-2 border-blue-300 rounded-lg p-4">
                <div className="flex items-start">
                  <div className="text-2xl mr-3">üí°</div>
                  <div>
                    <h5 className="text-blue-900 font-semibold mb-2">‡πÄ‡∏Ñ‡∏•‡πá‡∏î‡∏•‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å</h5>
                    <ul className="text-blue-800 text-sm space-y-1">
                      <li>‚Ä¢ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡∏´‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥</li>
                      <li>‚Ä¢ ‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢‡∏Ñ‡∏ß‡∏£‡∏°‡∏µ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 150 ‡∏ô‡∏≤‡∏ó‡∏µ‡∏ï‡πà‡∏≠‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå</li>
                      <li>‚Ä¢ ‡∏ô‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏ö 7-9 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏ï‡πà‡∏≠‡∏Ñ‡∏∑‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏î‡∏µ</li>
                      <li>‚Ä¢ ‡∏î‡∏∑‡πà‡∏°‡∏ô‡πâ‡∏≥ 8-10 ‡πÅ‡∏Å‡πâ‡∏ß‡∏ï‡πà‡∏≠‡∏ß‡∏±‡∏ô‡πÅ‡∏•‡∏∞‡∏Å‡∏¥‡∏ô‡∏ú‡∏±‡∏Å-‡∏ú‡∏•‡πÑ‡∏°‡πâ 5 ‡∏™‡πà‡∏ß‡∏ô‡∏ï‡πà‡∏≠‡∏ß‡∏±‡∏ô</li>
                    </ul>
                  </div>
                </div>
              </div>
            </div>
          </div>
        )}

        {/* Behaviors Tab */}
        {activeTab === 'behaviors' && (
          <div className="max-w-4xl mx-auto">
            <div className="bg-white/95 backdrop-blur-lg rounded-lg p-4 sm:p-6 border-2 border-green-300 shadow-lg">
              <div className="flex flex-col sm:flex-row items-start sm:items-center justify-between mb-4 sm:mb-6 border-b-2 border-green-200 pb-4">
                <h3 className="text-xl sm:text-2xl font-bold text-green-900 flex items-center mb-3 sm:mb-0">
                  <span className="mr-2 sm:mr-3">üèÉ</span>
                  ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏û‡∏§‡∏ï‡∏¥‡∏Å‡∏£‡∏£‡∏°‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û
                </h3>
                <button
                  onClick={() => setActiveTab('overview')}
                  className="text-green-600 hover:text-green-800 transition-colors bg-green-100 hover:bg-green-200 px-3 sm:px-4 py-2 rounded-lg font-medium text-sm sm:text-base"
                >
                  ‚Üê ‡∏Å‡∏•‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å
                </button>
              </div>

              {/* Submit Message */}
              {submitMessage.text && (
                <div className={`mb-4 sm:mb-6 p-3 sm:p-4 rounded-lg border-2 animate-fade-in ${
                  submitMessage.type === 'success' 
                    ? 'bg-green-50 border-green-300 text-green-800' 
                    : 'bg-red-50 border-red-300 text-red-800'
                }`}>
                  <div className="flex items-center">
                    <span className="mr-2 text-lg">
                      {submitMessage.type === 'success' ? '‚úÖ' : '‚ùå'}
                    </span>
                    <span className="font-semibold text-sm sm:text-base">{submitMessage.text}</span>
                    {submitMessage.type === 'success' && (
                      <span className="ml-2 text-xs sm:text-sm text-green-600">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å...</span>
                    )}
                  </div>
                </div>
              )}

              <form onSubmit={handleLifestyleSubmit} className="space-y-4 sm:space-y-6">
                {/* Date */}
                <div className="grid grid-cols-1 gap-4 sm:gap-6">
                  <div>
                    <label className="block text-green-900 font-semibold mb-2 text-sm sm:text-base">
                      ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà <span className="text-red-600">*</span>
                    </label>
                    <input
                      type="date"
                      name="date"
                      value={lifestyleForm.date}
                      onChange={handleLifestyleInputChange}
                      required
                      max={new Date().toISOString().split('T')[0]}
                      className="w-full px-3 sm:px-4 py-2 sm:py-3 bg-white border-2 border-green-300 rounded-lg text-green-900 placeholder-green-400 focus:outline-none focus:border-green-500 focus:ring-2 focus:ring-green-200 text-sm sm:text-base"
                    />
                  </div>
                </div>

                {/* Exercise Section */}
                <div className="bg-green-50 border-2 border-green-200 rounded-lg p-4 sm:p-6">
                  <h4 className="text-base sm:text-lg font-bold text-green-900 mb-3 sm:mb-4 flex items-center">
                    <span className="mr-2">üèãÔ∏è</span>
                    ‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢
                  </h4>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div>
                      <label className="block text-green-800 font-medium mb-2">‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢</label>
                      <select
                        name="exercise_type"
                        value={lifestyleForm.exercise_type}
                        onChange={handleLifestyleInputChange}
                        className="w-full px-4 py-2 bg-white border border-green-300 rounded-lg text-green-900 focus:outline-none focus:border-green-500"
                      >
                        <option value="">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó</option>
                        <option value="‡∏ß‡∏¥‡πà‡∏á">‡∏ß‡∏¥‡πà‡∏á</option>
                        <option value="‡πÄ‡∏î‡∏¥‡∏ô">‡πÄ‡∏î‡∏¥‡∏ô</option>
                        <option value="‡∏¢‡∏¥‡∏°‡∏ô‡∏≤‡∏™‡∏ï‡∏¥‡∏Å">‡∏¢‡∏¥‡∏°‡∏ô‡∏≤‡∏™‡∏ï‡∏¥‡∏Å</option>
                        <option value="‡∏ß‡πà‡∏≤‡∏¢‡∏ô‡πâ‡∏≥">‡∏ß‡πà‡∏≤‡∏¢‡∏ô‡πâ‡∏≥</option>
                        <option value="‡∏Ç‡∏µ‡πà‡∏à‡∏±‡∏Å‡∏£‡∏¢‡∏≤‡∏ô">‡∏Ç‡∏µ‡πà‡∏à‡∏±‡∏Å‡∏£‡∏¢‡∏≤‡∏ô</option>
                        <option value="‡πÇ‡∏¢‡∏Ñ‡∏∞">‡πÇ‡∏¢‡∏Ñ‡∏∞</option>
                        <option value="‡∏ü‡∏¥‡∏ï‡πÄ‡∏ô‡∏™">‡∏ü‡∏¥‡∏ï‡πÄ‡∏ô‡∏™</option>
                        <option value="‡∏Å‡∏µ‡∏¨‡∏≤">‡∏Å‡∏µ‡∏¨‡∏≤</option>
                        <option value="‡∏≠‡∏∑‡πà‡∏ô‡πÜ">‡∏≠‡∏∑‡πà‡∏ô‡πÜ</option>
                      </select>
                    </div>
                    <div>
                      <label className="block text-green-800 font-medium mb-2">‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤ (‡∏ô‡∏≤‡∏ó‡∏µ)</label>
                      <input
                        type="number"
                        name="exercise_duration"
                        value={lifestyleForm.exercise_duration}
                        onChange={handleLifestyleInputChange}
                        min="0"
                        max="600"
                        className="w-full px-4 py-2 bg-white border border-green-300 rounded-lg text-green-900 focus:outline-none focus:border-green-500"
                        placeholder="‡πÄ‡∏ä‡πà‡∏ô 30"
                      />
                    </div>
                  </div>
                  <div className="mt-4">
                    <label className="block text-green-800 font-medium mb-2">‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏°‡∏Ç‡πâ‡∏ô</label>
                    <select
                      name="exercise_intensity"
                      value={lifestyleForm.exercise_intensity}
                      onChange={handleLifestyleInputChange}
                      className="w-full px-4 py-2 bg-white border border-green-300 rounded-lg text-green-900 focus:outline-none focus:border-green-500"
                    >
                      <option value="">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏°‡∏Ç‡πâ‡∏ô</option>
                      <option value="‡πÄ‡∏ö‡∏≤">‡πÄ‡∏ö‡∏≤ - ‡∏™‡∏ö‡∏≤‡∏¢‡πÜ ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏ô‡∏ó‡∏ô‡∏≤‡πÑ‡∏î‡πâ</option>
                      <option value="‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á">‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á - ‡πÄ‡∏´‡∏ô‡∏∑‡πà‡∏≠‡∏¢‡∏û‡∏≠‡∏î‡∏µ ‡∏´‡∏≤‡∏¢‡πÉ‡∏à‡πÄ‡∏£‡πá‡∏ß‡∏Ç‡∏∂‡πâ‡∏ô</option>
                      <option value="‡∏´‡∏ô‡∏±‡∏Å">‡∏´‡∏ô‡∏±‡∏Å - ‡πÄ‡∏´‡∏ô‡∏∑‡πà‡∏≠‡∏¢‡∏°‡∏≤‡∏Å ‡∏´‡∏≤‡∏¢‡πÉ‡∏à‡πÅ‡∏£‡∏á</option>
                    </select>
                  </div>
                </div>

                {/* Sleep Section */}
                <div className="bg-purple-50 border-2 border-purple-200 rounded-lg p-6">
                  <h4 className="text-lg font-bold text-purple-900 mb-4 flex items-center">
                    <span className="mr-2">üåô</span>
                    ‡∏Å‡∏≤‡∏£‡∏ô‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏ö
                  </h4>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div>
                      <label className="block text-purple-800 font-medium mb-2">‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏Å‡∏≤‡∏£‡∏ô‡∏≠‡∏ô</label>
                      <input
                        type="number"
                        name="sleep_hours"
                        value={lifestyleForm.sleep_hours}
                        onChange={handleLifestyleInputChange}
                        min="0"
                        max="24"
                        step="0.5"
                        className="w-full px-4 py-2 bg-white border border-purple-300 rounded-lg text-purple-900 focus:outline-none focus:border-purple-500"
                        placeholder="‡πÄ‡∏ä‡πà‡∏ô 8"
                      />
                    </div>
                    <div>
                      <label className="block text-purple-800 font-medium mb-2">‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏Å‡∏≤‡∏£‡∏ô‡∏≠‡∏ô</label>
                      <select
                        name="sleep_quality"
                        value={lifestyleForm.sleep_quality}
                        onChange={handleLifestyleInputChange}
                        className="w-full px-4 py-2 bg-white border border-purple-300 rounded-lg text-purple-900 focus:outline-none focus:border-purple-500"
                      >
                        <option value="">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û</option>
                        <option value="‡∏î‡∏µ‡∏°‡∏≤‡∏Å">‡∏î‡∏µ‡∏°‡∏≤‡∏Å - ‡∏´‡∏•‡∏±‡∏ö‡∏™‡∏ô‡∏¥‡∏ó ‡∏ï‡∏∑‡πà‡∏ô‡∏°‡∏≤‡∏™‡∏î‡∏ä‡∏∑‡πà‡∏ô</option>
                        <option value="‡∏î‡∏µ">‡∏î‡∏µ - ‡∏´‡∏•‡∏±‡∏ö‡πÑ‡∏î‡πâ‡∏î‡∏µ</option>
                        <option value="‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á">‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á - ‡∏´‡∏•‡∏±‡∏ö‡πÑ‡∏î‡πâ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡∏•‡∏∂‡∏Å</option>
                        <option value="‡πÅ‡∏¢‡πà">‡πÅ‡∏¢‡πà - ‡∏ô‡∏≠‡∏ô‡πÑ‡∏°‡πà‡∏´‡∏•‡∏±‡∏ö ‡∏´‡∏£‡∏∑‡∏≠‡∏ï‡∏∑‡πà‡∏ô‡∏ö‡πà‡∏≠‡∏¢</option>
                        <option value="‡πÅ‡∏¢‡πà‡∏°‡∏≤‡∏Å">‡πÅ‡∏¢‡πà‡∏°‡∏≤‡∏Å - ‡∏ô‡∏≠‡∏ô‡πÑ‡∏°‡πà‡∏´‡∏•‡∏±‡∏ö‡πÄ‡∏•‡∏¢</option>
                      </select>
                    </div>
                  </div>
                </div>

                {/* Nutrition Section */}
                <div className="bg-orange-50 border-2 border-orange-200 rounded-lg p-6">
                  <h4 className="text-lg font-bold text-orange-900 mb-4 flex items-center">
                    <span className="mr-2">ü•ó</span>
                    ‡πÇ‡∏†‡∏ä‡∏ô‡∏≤‡∏Å‡∏≤‡∏£
                  </h4>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div>
                      <label className="block text-orange-800 font-medium mb-2">‡∏ô‡πâ‡∏≥‡∏î‡∏∑‡πà‡∏° (‡πÅ‡∏Å‡πâ‡∏ß/‡∏ß‡∏±‡∏ô)</label>
                      <input
                        type="number"
                        name="water_glasses"
                        value={lifestyleForm.water_glasses}
                        onChange={handleLifestyleInputChange}
                        min="0"
                        max="20"
                        className="w-full px-4 py-2 bg-white border border-orange-300 rounded-lg text-orange-900 focus:outline-none focus:border-orange-500"
                        placeholder="‡πÄ‡∏ä‡πà‡∏ô 8"
                      />
                    </div>
                    <div>
                      <label className="block text-orange-800 font-medium mb-2">‡∏ú‡∏±‡∏Å-‡∏ú‡∏•‡πÑ‡∏°‡πâ (‡∏™‡πà‡∏ß‡∏ô/‡∏ß‡∏±‡∏ô)</label>
                      <input
                        type="number"
                        name="fruits_vegetables"
                        value={lifestyleForm.fruits_vegetables}
                        onChange={handleLifestyleInputChange}
                        min="0"
                        max="15"
                        className="w-full px-4 py-2 bg-white border border-orange-300 rounded-lg text-orange-900 focus:outline-none focus:border-orange-500"
                        placeholder="‡πÄ‡∏ä‡πà‡∏ô 5"
                      />
                    </div>
                  </div>
                  <div className="mt-4">
                    <label className="block text-orange-800 font-medium mb-2">‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÄ‡∏™‡∏£‡∏¥‡∏°/‡∏ß‡∏¥‡∏ï‡∏≤‡∏°‡∏¥‡∏ô</label>
                    <input
                      type="text"
                      name="supplements"
                      value={lifestyleForm.supplements}
                      onChange={handleLifestyleInputChange}
                      className="w-full px-4 py-2 bg-white border border-orange-300 rounded-lg text-orange-900 focus:outline-none focus:border-orange-500"
                      placeholder="‡πÄ‡∏ä‡πà‡∏ô ‡∏ß‡∏¥‡∏ï‡∏≤‡∏°‡∏¥‡∏ô‡∏ã‡∏µ, ‡πÅ‡∏Ñ‡∏•‡πÄ‡∏ã‡∏µ‡∏¢‡∏°"
                    />
                  </div>
                </div>

                {/* Mental Health Section */}
                <div className="bg-pink-50 border-2 border-pink-200 rounded-lg p-6">
                  <h4 className="text-lg font-bold text-pink-900 mb-4 flex items-center">
                    <span className="mr-2">üßò</span>
                    ‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏à‡∏¥‡∏ï
                  </h4>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div>
                      <label className="block text-pink-800 font-medium mb-2">‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ñ‡∏£‡∏µ‡∏¢‡∏î</label>
                      <select
                        name="stress_level"
                        value={lifestyleForm.stress_level}
                        onChange={handleLifestyleInputChange}
                        className="w-full px-4 py-2 bg-white border border-pink-300 rounded-lg text-pink-900 focus:outline-none focus:border-pink-500"
                      >
                        <option value="">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏∞‡∏î‡∏±‡∏ö</option>
                        <option value="1">1 - ‡πÑ‡∏°‡πà‡πÄ‡∏Ñ‡∏£‡∏µ‡∏¢‡∏î‡πÄ‡∏•‡∏¢</option>
                        <option value="2">2 - ‡πÄ‡∏Ñ‡∏£‡∏µ‡∏¢‡∏î‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢</option>
                        <option value="3">3 - ‡πÄ‡∏Ñ‡∏£‡∏µ‡∏¢‡∏î‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á</option>
                        <option value="4">4 - ‡πÄ‡∏Ñ‡∏£‡∏µ‡∏¢‡∏î‡∏°‡∏≤‡∏Å</option>
                        <option value="5">5 - ‡πÄ‡∏Ñ‡∏£‡∏µ‡∏¢‡∏î‡∏°‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î</option>
                      </select>
                    </div>
                    <div>
                      <label className="block text-pink-800 font-medium mb-2">‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ú‡πà‡∏≠‡∏ô‡∏Ñ‡∏•‡∏≤‡∏¢ (‡∏ô‡∏≤‡∏ó‡∏µ)</label>
                      <input
                        type="number"
                        name="relaxation_minutes"
                        value={lifestyleForm.relaxation_minutes}
                        onChange={handleLifestyleInputChange}
                        min="0"
                        max="480"
                        className="w-full px-4 py-2 bg-white border border-pink-300 rounded-lg text-pink-900 focus:outline-none focus:border-pink-500"
                        placeholder="‡πÄ‡∏ä‡πà‡∏ô 30"
                      />
                    </div>
                  </div>
                </div>

                {/* Risk Behaviors Section */}
                <div className="bg-red-50 border-2 border-red-200 rounded-lg p-6">
                  <h4 className="text-lg font-bold text-red-900 mb-4 flex items-center">
                    <span className="mr-2">‚ö†Ô∏è</span>
                    ‡∏û‡∏§‡∏ï‡∏¥‡∏Å‡∏£‡∏£‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á
                  </h4>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div>
                      <label className="block text-red-800 font-medium mb-2">‡∏Å‡∏≤‡∏£‡∏î‡∏∑‡πà‡∏°‡πÄ‡∏´‡∏•‡πâ‡∏≤ (‡∏´‡∏ô‡πà‡∏ß‡∏¢/‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå)</label>
                      <input
                        type="number"
                        name="alcohol_units"
                        value={lifestyleForm.alcohol_units}
                        onChange={handleLifestyleInputChange}
                        min="0"
                        max="200"
                        className="w-full px-4 py-2 bg-white border border-red-300 rounded-lg text-red-900 focus:outline-none focus:border-red-500"
                        placeholder="‡πÄ‡∏ä‡πà‡∏ô 0 (1 ‡∏´‡∏ô‡πà‡∏ß‡∏¢ = ‡πÄ‡∏ö‡∏µ‡∏¢‡∏£‡πå 1 ‡∏Å‡∏£‡∏∞‡∏õ‡πã‡∏≠‡∏á)"
                      />
                      <p className="text-xs text-red-600 mt-1">
                        1 ‡∏´‡∏ô‡πà‡∏ß‡∏¢ = ‡πÄ‡∏ö‡∏µ‡∏¢‡∏£‡πå 1 ‡∏Å‡∏£‡∏∞‡∏õ‡πã‡∏≠‡∏á ‡∏´‡∏£‡∏∑‡∏≠ ‡πÑ‡∏ß‡∏ô‡πå 1 ‡πÅ‡∏Å‡πâ‡∏ß ‡∏´‡∏£‡∏∑‡∏≠ ‡πÄ‡∏´‡∏•‡πâ‡∏≤ 1 ‡∏ä‡πá‡∏≠‡∏ï
                      </p>
                    </div>
                    <div>
                      <label className="block text-red-800 font-medium mb-2">‡∏Å‡∏≤‡∏£‡∏™‡∏π‡∏ö‡∏ö‡∏∏‡∏´‡∏£‡∏µ‡πà (‡∏°‡∏ß‡∏ô/‡∏ß‡∏±‡∏ô)</label>
                      <input
                        type="number"
                        name="smoking_cigarettes"
                        value={lifestyleForm.smoking_cigarettes}
                        onChange={handleLifestyleInputChange}
                        min="0"
                        max="100"
                        className="w-full px-4 py-2 bg-white border border-red-300 rounded-lg text-red-900 focus:outline-none focus:border-red-500"
                        placeholder="‡πÄ‡∏ä‡πà‡∏ô 0 (‡πÑ‡∏°‡πà‡∏™‡∏π‡∏ö)"
                      />
                      <p className="text-xs text-red-600 mt-1">
                        ‡πÉ‡∏™‡πà 0 ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏™‡∏π‡∏ö‡∏ö‡∏∏‡∏´‡∏£‡∏µ‡πà ‡∏´‡∏£‡∏∑‡∏≠‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏°‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏π‡∏ö‡∏ï‡πà‡∏≠‡∏ß‡∏±‡∏ô
                      </p>
                    </div>
                  </div>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mt-4">
                    <div>
                      <label className="block text-red-800 font-medium mb-2">‡∏Ñ‡∏≤‡πÄ‡∏ü‡∏≠‡∏µ‡∏ô (‡πÅ‡∏Å‡πâ‡∏ß/‡∏ß‡∏±‡∏ô)</label>
                      <input
                        type="number"
                        name="caffeine_cups"
                        value={lifestyleForm.caffeine_cups}
                        onChange={handleLifestyleInputChange}
                        min="0"
                        max="20"
                        className="w-full px-4 py-2 bg-white border border-red-300 rounded-lg text-red-900 focus:outline-none focus:border-red-500"
                        placeholder="‡πÄ‡∏ä‡πà‡∏ô 2 (‡∏Å‡∏≤‡πÅ‡∏ü, ‡∏ä‡∏≤, ‡πÇ‡∏ã‡∏î‡∏≤)"
                      />
                    </div>
                    <div>
                      <label className="block text-red-800 font-medium mb-2">‡πÄ‡∏ß‡∏•‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠ (‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á/‡∏ß‡∏±‡∏ô)</label>
                      <input
                        type="number"
                        name="screen_time_hours"
                        value={lifestyleForm.screen_time_hours}
                        onChange={handleLifestyleInputChange}
                        min="0"
                        max="24"
                        step="0.5"
                        className="w-full px-4 py-2 bg-white border border-red-300 rounded-lg text-red-900 focus:outline-none focus:border-red-500"
                        placeholder="‡πÄ‡∏ä‡πà‡∏ô 8 (‡∏°‡∏∑‡∏≠‡∏ñ‡∏∑‡∏≠, ‡∏Ñ‡∏≠‡∏°, ‡∏ó‡∏µ‡∏ß‡∏µ)"
                      />
                    </div>
                  </div>
                  <div className="mt-3 p-3 bg-red-100 border border-red-300 rounded">
                    <h5 className="text-red-900 font-semibold mb-2">‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥:</h5>
                    <ul className="text-red-800 text-sm space-y-1">
                      <li>‚Ä¢ ‡πÄ‡∏´‡∏•‡πâ‡∏≤: ‡∏ú‡∏π‡πâ‡∏ä‡∏≤‡∏¢ ‚â§14 ‡∏´‡∏ô‡πà‡∏ß‡∏¢/‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå, ‡∏ú‡∏π‡πâ‡∏´‡∏ç‡∏¥‡∏á ‚â§7 ‡∏´‡∏ô‡πà‡∏ß‡∏¢/‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå</li>
                      <li>‚Ä¢ ‡∏ö‡∏∏‡∏´‡∏£‡∏µ‡πà: ‡πÑ‡∏°‡πà‡∏™‡∏π‡∏ö‡πÄ‡∏•‡∏¢‡∏à‡∏∞‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î - ‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡πÇ‡∏£‡∏Ñ‡∏°‡∏∞‡πÄ‡∏£‡πá‡∏á ‡∏´‡∏±‡∏ß‡πÉ‡∏à ‡∏õ‡∏≠‡∏î</li>
                      <li>‚Ä¢ ‡∏Ñ‡∏≤‡πÄ‡∏ü‡∏≠‡∏µ‡∏ô: ‚â§400mg/‡∏ß‡∏±‡∏ô (‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì 4 ‡πÅ‡∏Å‡πâ‡∏ß‡∏Å‡∏≤‡πÅ‡∏ü)</li>
                      <li>‚Ä¢ ‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠: ‡∏´‡∏¢‡∏∏‡∏î‡∏û‡∏±‡∏Å 20 ‡∏ô‡∏≤‡∏ó‡∏µ ‡∏ó‡∏∏‡∏Å 2 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á</li>
                    </ul>
                  </div>
                </div>

                {/* Notes Section */}
                <div>
                  <label className="block text-green-900 font-semibold mb-2">
                    ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
                  </label>
                  <textarea
                    name="notes"
                    value={lifestyleForm.notes}
                    onChange={handleLifestyleInputChange}
                    rows={3}
                    className="w-full px-4 py-3 bg-white border-2 border-green-300 rounded-lg text-green-900 placeholder-green-400 focus:outline-none focus:border-green-500 focus:ring-2 focus:ring-green-200"
                    placeholder="‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏û‡∏§‡∏ï‡∏¥‡∏Å‡∏£‡∏£‡∏°‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì..."
                  />
                </div>

                {/* Submit Buttons */}
                <div className="flex justify-end space-x-4">
                  <button
                    type="submit"
                    disabled={isSubmitting}
                    className="px-8 py-3 bg-green-600 hover:bg-green-700 text-white font-semibold rounded-lg transition-all duration-300 shadow-md disabled:opacity-50 disabled:cursor-not-allowed"
                  >
                    {isSubmitting ? '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å...' : '‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•'}
                  </button>
                  <button
                    type="button"
                    onClick={() => {
                      setLifestyleForm({
                        date: new Date().toISOString().split('T')[0],
                        exercise_type: '',
                        exercise_duration: '',
                        exercise_intensity: '',
                        sleep_hours: '',
                        sleep_quality: '',
                        water_glasses: '',
                        fruits_vegetables: '',
                        supplements: '',
                        stress_level: '',
                        relaxation_minutes: '',
                        notes: ''
                      });
                      setSubmitMessage({ type: '', text: '' });
                    }}
                    className="px-6 py-3 bg-gray-100 hover:bg-gray-200 text-gray-700 border-2 border-gray-300 rounded-lg transition-all duration-300 font-medium"
                  >
                    ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà
                  </button>
                </div>
              </form>

              {/* Tips */}
              <div className="mt-8 bg-green-50 border-2 border-green-300 rounded-lg p-4">
                <div className="flex items-start">
                  <div className="text-2xl mr-3">üí°</div>
                  <div>
                    <h5 className="text-green-900 font-semibold mb-2">‡πÄ‡∏Ñ‡∏•‡πá‡∏î‡∏•‡∏±‡∏ö‡∏û‡∏§‡∏ï‡∏¥‡∏Å‡∏£‡∏£‡∏°‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û</h5>
                    <ul className="text-green-800 text-sm space-y-1">
                      <li>‚Ä¢ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡∏´‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥</li>
                      <li>‚Ä¢ ‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢‡∏Ñ‡∏ß‡∏£‡∏°‡∏µ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 150 ‡∏ô‡∏≤‡∏ó‡∏µ‡∏ï‡πà‡∏≠‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå</li>
                      <li>‚Ä¢ ‡∏ô‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏ö 7-9 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏ï‡πà‡∏≠‡∏Ñ‡∏∑‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏î‡∏µ</li>
                      <li>‚Ä¢ ‡∏î‡∏∑‡πà‡∏°‡∏ô‡πâ‡∏≥ 8-10 ‡πÅ‡∏Å‡πâ‡∏ß‡∏ï‡πà‡∏≠‡∏ß‡∏±‡∏ô‡πÅ‡∏•‡∏∞‡∏Å‡∏¥‡∏ô‡∏ú‡∏±‡∏Å-‡∏ú‡∏•‡πÑ‡∏°‡πâ 5 ‡∏™‡πà‡∏ß‡∏ô‡∏ï‡πà‡∏≠‡∏ß‡∏±‡∏ô</li>
                      <li>‚Ä¢ ‡∏Ñ‡∏ß‡∏£‡∏°‡∏µ‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ú‡πà‡∏≠‡∏ô‡∏Ñ‡∏•‡∏≤‡∏¢‡∏ó‡∏∏‡∏Å‡∏ß‡∏±‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ñ‡∏£‡∏µ‡∏¢‡∏î</li>
                    </ul>
                  </div>
                </div>
              </div>
            </div>
          </div>
        )}

        {/* Medication Tracking Tab */}
        {activeTab === 'medications' && (
          <div className="space-y-6">
            {/* Header */}
            <div className="bg-white/95 backdrop-blur-lg rounded-lg p-6 border-2 border-amber-300 shadow-lg">
              <h2 className="text-2xl font-bold text-amber-900 mb-4 flex items-center">
                <span className="mr-3">üíä</span>
                ‡∏£‡∏∞‡∏ö‡∏ö‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏¢‡∏≤
              </h2>
              <p className="text-amber-700">
                ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏ó‡∏≤‡∏ô‡∏¢‡∏≤ ‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô ‡πÅ‡∏•‡∏∞‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ó‡∏≤‡∏ô‡∏¢‡∏≤‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì
              </p>
            </div>

            {/* Quick Status */}
            <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
              <div className="bg-green-50 border-2 border-green-300 rounded-lg p-4">
                <div className="text-center">
                  <div className="text-2xl font-bold text-green-600">
                    {medications.filter(m => getMedicationStatus(m) === '‡∏ó‡∏≤‡∏ô‡∏Ñ‡∏£‡∏ö‡πÅ‡∏•‡πâ‡∏ß‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ').length}
                  </div>
                  <div className="text-green-700 text-sm">‡∏ó‡∏≤‡∏ô‡∏Ñ‡∏£‡∏ö‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ</div>
                </div>
              </div>
              <div className="bg-amber-50 border-2 border-amber-300 rounded-lg p-4">
                <div className="text-center">
                  <div className="text-2xl font-bold text-amber-600">
                    {medications.filter(m => getMedicationStatus(m).includes('‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ó‡∏≤‡∏ô')).length}
                  </div>
                  <div className="text-amber-700 text-sm">‡∏£‡∏≠‡∏ó‡∏≤‡∏ô</div>
                </div>
              </div>
              <div className="bg-blue-50 border-2 border-blue-300 rounded-lg p-4">
                <div className="text-center">
                  <div className="text-2xl font-bold text-blue-600">{medications.length}</div>
                  <div className="text-blue-700 text-sm">‡∏¢‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î</div>
                </div>
              </div>
            </div>

            {/* Today's Medications */}
            <div className="bg-white/95 backdrop-blur-lg rounded-lg p-6 border-2 border-blue-300 shadow-lg">
              <h3 className="text-xl font-bold text-blue-900 mb-4 flex items-center">
                <span className="mr-2">üìÖ</span>
                ‡∏¢‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ó‡∏≤‡∏ô‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ
              </h3>
              
              {medications.length === 0 ? (
                <div className="text-center py-8">
                  <div className="text-6xl mb-4">üíä</div>
                  <p className="text-gray-600 mb-4">‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏¢‡∏≤</p>
                  <p className="text-gray-500 text-sm">‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏¢‡∏≤‡πÉ‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°</p>
                </div>
              ) : (
                <div className="space-y-3">
                  {medications.map((medication, index) => {
                    const status = getMedicationStatus(medication);
                    const isCompleted = status === '‡∏ó‡∏≤‡∏ô‡∏Ñ‡∏£‡∏ö‡πÅ‡∏•‡πâ‡∏ß‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ';
                    const isPending = status.includes('‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ó‡∏≤‡∏ô');
                    
                    return (
                      <div key={index} className={`
                        border-2 rounded-lg p-4 transition-all duration-300
                        ${isCompleted ? 'bg-green-50 border-green-300' : 
                          isPending ? 'bg-amber-50 border-amber-300' : 
                          'bg-gray-50 border-gray-300'}
                      `}>
                        <div className="flex justify-between items-center">
                          <div className="flex-1">
                            <div className="flex items-center space-x-3">
                              <h4 className="font-bold text-lg">{medication.medication_name}</h4>
                              <span className={`px-2 py-1 rounded text-xs font-medium ${
                                medication.condition === '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô‡∏™‡∏π‡∏á' ? 'bg-blue-100 text-blue-800' :
                                medication.condition === '‡πÄ‡∏ö‡∏≤‡∏´‡∏ß‡∏≤‡∏ô' ? 'bg-green-100 text-green-800' :
                                medication.condition === '‡∏ß‡∏±‡∏ì‡πÇ‡∏£‡∏Ñ' ? 'bg-red-100 text-red-800' :
                                'bg-gray-100 text-gray-800'
                              }`}>
                                {medication.condition}
                              </span>
                            </div>
                            <p className="text-gray-600 text-sm mt-1">
                              ‡∏Ç‡∏ô‡∏≤‡∏î: {medication.dosage} | ‡πÄ‡∏ß‡∏•‡∏≤: {medication.time_schedule}
                            </p>
                            <p className={`text-sm font-medium mt-2 ${
                              isCompleted ? 'text-green-600' :
                              isPending ? 'text-amber-600' :
                              'text-gray-600'
                            }`}>
                              ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: {status}
                            </p>
                          </div>
                          
                          <div className="flex space-x-2">
                            {isPending && (
                              <button
                                onClick={() => markMedicationTaken(medication.id)}
                                className="bg-green-500 hover:bg-green-600 text-white px-4 py-2 rounded-lg text-sm font-medium transition-colors"
                              >
                                ‚úì ‡∏ó‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß
                              </button>
                            )}
                            {isCompleted && (
                              <div className="bg-green-100 text-green-800 px-4 py-2 rounded-lg text-sm font-medium">
                                ‚úì ‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß
                              </div>
                            )}
                          </div>
                        </div>
                        
                        {medication.notes && (
                          <div className="mt-3 p-2 bg-blue-50 border border-blue-200 rounded text-sm">
                            <strong>‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏:</strong> {medication.notes}
                          </div>
                        )}
                      </div>
                    );
                  })}
                </div>
              )}
            </div>

            {/* Add New Medication */}
            <div className="bg-white/95 backdrop-blur-lg rounded-lg p-6 border-2 border-green-300 shadow-lg">
              <h3 className="text-xl font-bold text-green-900 mb-4 flex items-center">
                <span className="mr-2">‚ûï</span>
                ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏¢‡∏≤‡πÉ‡∏´‡∏°‡πà
              </h3>
              
              <form onSubmit={(e) => {
                e.preventDefault();
                addMedication(medicationForm);
              }} className="space-y-4">
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div>
                    <label className="block text-green-800 font-medium mb-2">‡∏ä‡∏∑‡πà‡∏≠‡∏¢‡∏≤ *</label>
                    <input
                      type="text"
                      name="medication_name"
                      value={medicationForm.medication_name}
                      onChange={handleMedicationInputChange}
                      className="w-full px-4 py-2 border border-green-300 rounded-lg focus:outline-none focus:border-green-500"
                      placeholder="‡πÄ‡∏ä‡πà‡∏ô Amlodipine"
                      required
                    />
                  </div>
                  
                  <div>
                    <label className="block text-green-800 font-medium mb-2">‡∏Ç‡∏ô‡∏≤‡∏î‡∏¢‡∏≤ *</label>
                    <input
                      type="text"
                      name="dosage"
                      value={medicationForm.dosage}
                      onChange={handleMedicationInputChange}
                      className="w-full px-4 py-2 border border-green-300 rounded-lg focus:outline-none focus:border-green-500"
                      placeholder="‡πÄ‡∏ä‡πà‡∏ô 5 mg"
                      required
                    />
                  </div>
                </div>

                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div>
                    <label className="block text-green-800 font-medium mb-2">‡πÇ‡∏£‡∏Ñ‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏Å‡∏©‡∏≤</label>
                    <select
                      name="condition"
                      value={medicationForm.condition}
                      onChange={handleMedicationInputChange}
                      className="w-full px-4 py-2 border border-green-300 rounded-lg focus:outline-none focus:border-green-500"
                    >
                      <option value="">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏£‡∏Ñ</option>
                      <option value="‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô‡∏™‡∏π‡∏á">‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô‡∏™‡∏π‡∏á</option>
                      <option value="‡πÄ‡∏ö‡∏≤‡∏´‡∏ß‡∏≤‡∏ô">‡πÄ‡∏ö‡∏≤‡∏´‡∏ß‡∏≤‡∏ô</option>
                      <option value="‡∏ß‡∏±‡∏ì‡πÇ‡∏£‡∏Ñ">‡∏ß‡∏±‡∏ì‡πÇ‡∏£‡∏Ñ</option>
                      <option value="‡πÇ‡∏£‡∏Ñ‡∏´‡∏±‡∏ß‡πÉ‡∏à">‡πÇ‡∏£‡∏Ñ‡∏´‡∏±‡∏ß‡πÉ‡∏à</option>
                      <option value="‡∏≠‡∏∑‡πà‡∏ô‡πÜ">‡∏≠‡∏∑‡πà‡∏ô‡πÜ</option>
                    </select>
                  </div>
                  
                  <div>
                    <label className="block text-green-800 font-medium mb-2">‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏µ‡πà *</label>
                    <select
                      name="frequency"
                      value={medicationForm.frequency}
                      onChange={handleMedicationInputChange}
                      className="w-full px-4 py-2 border border-green-300 rounded-lg focus:outline-none focus:border-green-500"
                      required
                    >
                      <option value="">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏µ‡πà</option>
                      <option value="‡∏ß‡∏±‡∏ô‡∏•‡∏∞ 1 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á">‡∏ß‡∏±‡∏ô‡∏•‡∏∞ 1 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á</option>
                      <option value="‡∏ß‡∏±‡∏ô‡∏•‡∏∞ 2 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á">‡∏ß‡∏±‡∏ô‡∏•‡∏∞ 2 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á</option>
                      <option value="‡∏ß‡∏±‡∏ô‡∏•‡∏∞ 3 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á">‡∏ß‡∏±‡∏ô‡∏•‡∏∞ 3 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á</option>
                      <option value="‡∏ß‡∏±‡∏ô‡∏•‡∏∞ 4 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á">‡∏ß‡∏±‡∏ô‡∏•‡∏∞ 4 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á</option>
                      <option value="‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå‡∏•‡∏∞ 3 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á">‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå‡∏•‡∏∞ 3 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á (‡∏ß‡∏±‡∏ì‡πÇ‡∏£‡∏Ñ)</option>
                      <option value="‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô">‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô</option>
                    </select>
                  </div>
                </div>

                <div>
                  <label className="block text-green-800 font-medium mb-2">‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏≤‡∏ô‡∏¢‡∏≤ *</label>
                  <input
                    type="text"
                    name="time_schedule"
                    value={medicationForm.time_schedule}
                    onChange={handleMedicationInputChange}
                    className="w-full px-4 py-2 border border-green-300 rounded-lg focus:outline-none focus:border-green-500"
                    placeholder="‡πÄ‡∏ä‡πà‡∏ô 08:00 ‡∏´‡∏£‡∏∑‡∏≠ 08:00,20:00 (‡∏Ñ‡∏±‡πà‡∏ô‡∏î‡πâ‡∏ß‡∏¢‡∏à‡∏∏‡∏•‡∏†‡∏≤‡∏Ñ)"
                    required
                  />
                  <p className="text-green-600 text-xs mt-1">
                    ‡πÉ‡∏™‡πà‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö 24 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á ‡∏Ñ‡∏±‡πà‡∏ô‡∏î‡πâ‡∏ß‡∏¢‡∏à‡∏∏‡∏•‡∏†‡∏≤‡∏Ñ‡∏´‡∏≤‡∏Å‡∏°‡∏µ‡∏´‡∏•‡∏≤‡∏¢‡πÄ‡∏ß‡∏•‡∏≤
                  </p>
                </div>

                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div>
                    <label className="block text-green-800 font-medium mb-2">‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≤‡∏ô</label>
                    <input
                      type="date"
                      name="start_date"
                      value={medicationForm.start_date}
                      onChange={handleMedicationInputChange}
                      className="w-full px-4 py-2 border border-green-300 rounded-lg focus:outline-none focus:border-green-500"
                    />
                  </div>
                  
                  <div>
                    <label className="block text-green-800 font-medium mb-2">‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏´‡∏¢‡∏∏‡∏î‡∏ó‡∏≤‡∏ô (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)</label>
                    <input
                      type="date"
                      name="end_date"
                      value={medicationForm.end_date}
                      onChange={handleMedicationInputChange}
                      className="w-full px-4 py-2 border border-green-300 rounded-lg focus:outline-none focus:border-green-500"
                    />
                    <p className="text-green-600 text-xs mt-1">
                      ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏¢‡∏≤‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏à‡∏≥‡∏Å‡∏±‡∏î ‡πÄ‡∏ä‡πà‡∏ô ‡∏¢‡∏≤‡∏ß‡∏±‡∏ì‡πÇ‡∏£‡∏Ñ (6-8 ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô)
                    </p>
                  </div>
                </div>

                <div>
                  <label className="block text-green-800 font-medium mb-2">‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏</label>
                  <textarea
                    name="notes"
                    value={medicationForm.notes}
                    onChange={handleMedicationInputChange}
                    rows="3"
                    className="w-full px-4 py-2 border border-green-300 rounded-lg focus:outline-none focus:border-green-500"
                    placeholder="‡πÄ‡∏ä‡πà‡∏ô ‡∏ó‡∏≤‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏≠‡∏≤‡∏´‡∏≤‡∏£, ‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á‡πÅ‡∏≠‡∏•‡∏Å‡∏≠‡∏Æ‡∏≠‡∏•‡πå, ‡∏ú‡∏•‡∏Ç‡πâ‡∏≤‡∏á‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á‡∏ó‡∏µ‡πà‡∏Ñ‡∏ß‡∏£‡∏£‡∏∞‡∏ß‡∏±‡∏á"
                  />
                </div>

                <div className="flex items-center">
                  <input
                    type="checkbox"
                    name="reminder_enabled"
                    checked={medicationForm.reminder_enabled}
                    onChange={handleMedicationInputChange}
                    className="mr-2"
                  />
                  <label className="text-green-800 font-medium">‡πÄ‡∏õ‡∏¥‡∏î‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô</label>
                </div>

                <div className="flex space-x-4">
                  <button
                    type="submit"
                    className="px-6 py-3 bg-green-600 hover:bg-green-700 text-white rounded-lg font-medium transition-colors"
                  >
                    ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏¢‡∏≤
                  </button>
                  <button
                    type="button"
                    onClick={() => setMedicationForm({
                      medication_name: '',
                      dosage: '',
                      frequency: '',
                      time_schedule: '',
                      start_date: '',
                      end_date: '',
                      condition: '',
                      reminder_enabled: true,
                      notes: ''
                    })}
                    className="px-6 py-3 bg-gray-100 hover:bg-gray-200 text-gray-700 border border-gray-300 rounded-lg font-medium transition-colors"
                  >
                    ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà
                  </button>
                </div>
              </form>
            </div>

            {/* Medication Templates */}
            {medicationForm.condition && (
              <div className="bg-white/95 backdrop-blur-lg rounded-lg p-6 border-2 border-blue-300 shadow-lg">
                <h3 className="text-xl font-bold text-blue-900 mb-4 flex items-center">
                  <span className="mr-2">üìã</span>
                  ‡∏¢‡∏≤‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö{medicationForm.condition}
                </h3>
                
                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-3">
                  {getConditionMedications(medicationForm.condition).map((med, index) => (
                    <div key={index} className={`border-2 rounded-lg p-3 cursor-pointer hover:bg-blue-50 transition-colors ${med.color}`}
                         onClick={() => setMedicationForm(prev => ({
                           ...prev,
                           medication_name: med.name,
                           dosage: med.dosage,
                           frequency: med.frequency,
                           time_schedule: med.time
                         }))}>
                      <h4 className="font-bold">{med.name}</h4>
                      <p className="text-sm">‡∏Ç‡∏ô‡∏≤‡∏î: {med.dosage}</p>
                      <p className="text-sm">‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏µ‡πà: {med.frequency}</p>
                      <p className="text-sm">‡πÄ‡∏ß‡∏•‡∏≤: {med.time}</p>
                    </div>
                  ))}
                </div>
                
                <div className="mt-4 p-3 bg-amber-50 border border-amber-300 rounded">
                  <h5 className="text-amber-900 font-semibold mb-2">‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÇ‡∏£‡∏Ñ:</h5>
                  {medicationForm.condition === '‡∏ß‡∏±‡∏ì‡πÇ‡∏£‡∏Ñ' && (
                    <ul className="text-amber-800 text-sm space-y-1">
                      <li>‚Ä¢ ‡∏ó‡∏≤‡∏ô‡∏¢‡∏≤‡∏ï‡πà‡∏≠‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á 6-8 ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô ‡∏´‡πâ‡∏≤‡∏°‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏•‡∏≤‡∏á‡∏Ñ‡∏±‡∏ô</li>
                      <li>‚Ä¢ ‡∏ó‡∏≤‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡πâ‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á (‡∏Å‡πà‡∏≠‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£ 1 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á)</li>
                      <li>‚Ä¢ ‡∏ï‡∏£‡∏ß‡∏à‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•‡∏ó‡∏∏‡∏Å‡πÄ‡∏î‡∏∑‡∏≠‡∏ô</li>
                      <li>‚Ä¢ ‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á‡πÅ‡∏≠‡∏•‡∏Å‡∏≠‡∏Æ‡∏≠‡∏•‡πå ‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏ó‡∏≥‡∏•‡∏≤‡∏¢‡∏ï‡∏±‡∏ö</li>
                    </ul>
                  )}
                  {medicationForm.condition === '‡πÄ‡∏ö‡∏≤‡∏´‡∏ß‡∏≤‡∏ô' && (
                    <ul className="text-amber-800 text-sm space-y-1">
                      <li>‚Ä¢ ‡∏ó‡∏≤‡∏ô‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏´‡∏£‡∏∑‡∏≠‡∏´‡∏•‡∏±‡∏á‡∏≠‡∏≤‡∏´‡∏≤‡∏£ ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏ó‡πâ‡∏≠‡∏á‡πÄ‡∏™‡∏µ‡∏¢</li>
                      <li>‚Ä¢ ‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏•‡πÉ‡∏ô‡πÄ‡∏•‡∏∑‡∏≠‡∏î‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏£‡∏∞‡∏à‡∏≥</li>
                      <li>‚Ä¢ ‡∏´‡∏≤‡∏Å‡∏•‡∏∑‡∏°‡∏ó‡∏≤‡∏ô ‡πÉ‡∏´‡πâ‡∏ó‡∏≤‡∏ô‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡∏ó‡∏µ‡πà‡∏ô‡∏∂‡∏Å‡πÑ‡∏î‡πâ (‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÉ‡∏Å‡∏•‡πâ‡∏°‡∏∑‡πâ‡∏≠‡∏ï‡πà‡∏≠‡πÑ‡∏õ)</li>
                    </ul>
                  )}
                  {medicationForm.condition === '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô‡∏™‡∏π‡∏á' && (
                    <ul className="text-amber-800 text-sm space-y-1">
                      <li>‚Ä¢ ‡∏ó‡∏≤‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏î‡∏¥‡∏°‡∏ó‡∏∏‡∏Å‡∏ß‡∏±‡∏ô ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô‡∏Ñ‡∏á‡∏ó‡∏µ‡πà</li>
                      <li>‚Ä¢ ‡∏ß‡∏±‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏£‡∏∞‡∏à‡∏≥ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏•</li>
                      <li>‚Ä¢ ‡∏£‡∏∞‡∏ß‡∏±‡∏á‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡∏á‡πÄ‡∏ß‡∏µ‡∏¢‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏•‡∏∏‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô‡∏¢‡∏∑‡∏ô</li>
                    </ul>
                  )}
                </div>
              </div>
            )}

            {/* Medication History */}
            {medicationHistory.length > 0 && (
              <div className="bg-white/95 backdrop-blur-lg rounded-lg p-6 border-2 border-purple-300 shadow-lg">
                <h3 className="text-xl font-bold text-purple-900 mb-4 flex items-center">
                  <span className="mr-2">üìä</span>
                  ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ó‡∏≤‡∏ô‡∏¢‡∏≤
                </h3>
                
                <div className="space-y-2">
                  {medicationHistory.slice(0, 10).map((log, index) => (
                    <div key={index} className="flex justify-between items-center p-3 bg-purple-50 border border-purple-200 rounded">
                      <div>
                        <span className="font-medium">{log.medication?.medication_name}</span>
                        <span className="text-purple-600 text-sm ml-2">{log.medication?.dosage}</span>
                      </div>
                      <div className="text-right">
                        <div className="text-sm text-purple-700">
                          {new Date(log.taken_time).toLocaleDateString('th-TH')}
                        </div>
                        <div className="text-xs text-purple-600">
                          {new Date(log.taken_time).toLocaleTimeString('th-TH', { 
                            hour: '2-digit', 
                            minute: '2-digit' 
                          })}
                        </div>
                      </div>
                    </div>
                  ))}
                </div>
              </div>
            )}
          </div>
        )}

        {/* Profile Tab */}
        {activeTab === 'profile' && (
          <UpdateProfile />
        )}
      </div>
      
      {/* Health Chatbot - Always visible */}
      <HealthChatbot userProfile={userProfile} recentMetrics={recentMetrics} />
    </div>
  );
};

export default Dashboard;
