import { GoogleGenerativeAI } from '@google/generative-ai';

const logAiEvent = (level, message, details = {}) => {
  const timestamp = new Date().toISOString();
  const logPayload = {
    timestamp,
    message,
    ...details,
  };

  if (level === 'error') {
    console.error('ü§ñ [AI Advisor]', logPayload);
  } else if (level === 'warn') {
    console.warn('ü§ñ [AI Advisor]', logPayload);
  } else {
    console.info('ü§ñ [AI Advisor]', logPayload);
  }
};

let cachedClient = null;
let cachedApiKey = null;

const DEFAULT_MODEL =
  process.env.GEMINI_MODEL ||
  process.env.GENERATIVE_AI_MODEL ||
  'gemini-1.5-flash-latest';

const resolveApiKey = () => {
  return (
    process.env.GEMINI_API_KEY ||
    process.env.GOOGLE_API_KEY ||
    process.env.GENERATIVE_AI_API_KEY ||
    process.env.GENAI_API_KEY ||
    process.env.GEMINI_KEY ||
    process.env.REACT_APP_GEMINI_API_KEY ||
    null
  );
};

const getClient = () => {
  const apiKey = resolveApiKey();
  if (!apiKey) {
    return null;
  }
  if (!cachedClient || cachedApiKey !== apiKey) {
    cachedClient = new GoogleGenerativeAI(apiKey);
    cachedApiKey = apiKey;
  }
  return cachedClient;
};

const ensureArray = (input) => {
  if (!input) return [];
  return Array.isArray(input) ? input : [input];
};

const formatDate = (value) => {
  if (!value) return null;
  const date = new Date(value);
  if (Number.isNaN(date.getTime())) {
    return null;
  }
  return date.toISOString().split('T')[0];
};

const calculateAge = (dateOfBirth) => {
  if (!dateOfBirth) return null;
  const dob = new Date(dateOfBirth);
  if (Number.isNaN(dob.getTime())) return null;
  const diffMs = Date.now() - dob.getTime();
  const ageDate = new Date(diffMs);
  return Math.abs(ageDate.getUTCFullYear() - 1970);
};

const summarizeHistory = (records = [], limit = 5) => {
  return records
    .slice(Math.max(records.length - limit, 0))
    .map((record) => {
      const pieces = [];
      const date = formatDate(record.measurement_date || record.record_date || record.behavior_date || record.created_at);
      if (date) {
        pieces.push(`‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà ${date}`);
      }
      if (record.systolic_bp || record.diastolic_bp) {
        pieces.push(`‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô ${record.systolic_bp || '-'} / ${record.diastolic_bp || '-'}`);
      }
      if (record.blood_sugar || record.blood_sugar_mg) {
        const sugar = record.blood_sugar || record.blood_sugar_mg;
        pieces.push(`‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏• ${sugar} mg/dL`);
      }
      if (record.weight_kg || record.weight) {
        pieces.push(`‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å ${record.weight_kg || record.weight} ‡∏Å‡∏Å.`);
      }
      if (record.sleep_hours || record.sleep_hours_per_night) {
        pieces.push(`‡∏Å‡∏≤‡∏£‡∏ô‡∏≠‡∏ô ${record.sleep_hours || record.sleep_hours_per_night} ‡∏ä‡∏°.`);
      }
      if (record.exercise_minutes || record.exercise_duration_minutes) {
        pieces.push(`‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢ ${record.exercise_minutes || record.exercise_duration_minutes} ‡∏ô‡∏≤‡∏ó‡∏µ`);
      }
      if (record.stress_level) {
        pieces.push(`‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ñ‡∏£‡∏µ‡∏¢‡∏î‡∏£‡∏∞‡∏î‡∏±‡∏ö ${record.stress_level}`);
      }
      if (record.notes) {
        pieces.push(`‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å: ${record.notes}`);
      }
      return pieces.join(' | ');
    })
    .filter(Boolean);
};

const normalizeAdvice = (rawAdvice = {}) => {
  const overall =
    rawAdvice.overall_assessment ||
    rawAdvice.overallAssessment ||
    rawAdvice.summary ||
    rawAdvice.summaryText ||
    rawAdvice.assessment ||
    '';

  const recSource = rawAdvice.recommendations || rawAdvice.actions || {};
  const normalizedRecommendations = {};
  if (Array.isArray(recSource)) {
    normalizedRecommendations.general = recSource;
  } else if (recSource && typeof recSource === 'object') {
    Object.entries(recSource).forEach(([key, value]) => {
      if (!value) return;
      normalizedRecommendations[key] = ensureArray(value);
    });
  }

  const riskFactors = ensureArray(rawAdvice.riskFactors || rawAdvice.risks || rawAdvice.concerns);
  const improvements = ensureArray(rawAdvice.improvements || rawAdvice.focusAreas || rawAdvice.strengths);
  const monitoringPlan = ensureArray(
    rawAdvice.monitoringPlan ||
      rawAdvice.followUp ||
      rawAdvice.follow_up ||
      rawAdvice.monitoring ||
      rawAdvice.nextActions ||
      rawAdvice.next_steps
  );

  const medicationNotes = ensureArray(rawAdvice.medicationNotes || rawAdvice.medication || rawAdvice.drugSafety);

  const meta = {
    source: rawAdvice.source || 'gemini',
    model: rawAdvice.model || DEFAULT_MODEL,
  };

  return {
    overall_assessment: overall,
    recommendations: normalizedRecommendations,
    riskFactors,
    improvements,
    monitoringPlan,
    medicationNotes,
    followUp: rawAdvice.followUp || rawAdvice.follow_up || rawAdvice.nextCheck || null,
    meta,
  };
};

const extractJson = (text) => {
  if (!text) return null;

  const codeBlockMatch = text.match(/```json\s*([\s\S]*?)```/i);
  if (codeBlockMatch) {
    const candidate = codeBlockMatch[1].trim();
    try {
      return JSON.parse(candidate);
    } catch (error) {
      console.error('‚ùå Failed to parse JSON from fenced code block', error.message);
    }
  }

  const braceMatch = text.match(/\{[\s\S]*\}/);
  if (braceMatch) {
    const candidate = braceMatch[0];
    try {
      return JSON.parse(candidate);
    } catch (error) {
      console.error('‚ùå Failed to parse JSON from braces', error.message);
    }
  }

  return null;
};

const buildPrompt = ({
  profile = {},
  trends = {},
  healthHistory = [],
  behaviorHistory = [],
  medications = [],
  profileMedications = [],
  profileConditions = [],
}) => {
  const age = calculateAge(profile.date_of_birth);
  const gender = profile.gender || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏';
  const height = profile.height_cm ? `${profile.height_cm} ‡∏ã‡∏°.` : '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏';
  const weight = profile.weight_kg ? `${profile.weight_kg} ‡∏Å‡∏Å.` : '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏';
  const bmi = trends?.bmi?.current ? `${Number(trends.bmi.current).toFixed(1)}` : profile.bmi || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏';
  const bmiTrend = trends?.bmi?.trend || 'unknown';
  const bpTrend = trends?.bloodPressure?.trend || 'unknown';
  const bpRisk = trends?.bloodPressure?.riskLevel || 'unknown';
  const sugarTrend = trends?.bloodSugar?.trend || 'unknown';
  const lifestyle = trends?.lifestyle || {};
  const overallScore = trends?.overall?.score || null;

  const latestConditionSummary = profileConditions.length
    ? profileConditions.join(', ')
    : '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏£‡∏Ñ‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ï‡∏±‡∏ß';

  const medicationLines = medications.length
    ? medications.map((med) => {
        const name = med.medication_name || med.name || med.title || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡∏∑‡πà‡∏≠‡∏¢‡∏≤';
        const dose = med.dosage || med.dose || med.dose_mg || '';
        const frequency = med.frequency || med.frequency_per_day || '';
        const schedule = med.time_schedule || med.timing || '';
        const pieces = [name];
        if (dose) pieces.push(`‡∏Ç‡∏ô‡∏≤‡∏î ${dose}`);
        if (frequency) pieces.push(`‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏µ‡πà ${frequency}`);
        if (schedule) pieces.push(`‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤ ${schedule}`);
        return pieces.join(' | ');
      })
    : profileMedications.length
    ? profileMedications
    : ['‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡∏≤‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡∏ó‡∏≤‡∏ô'];

  const vitalsHistorySummary = summarizeHistory(healthHistory, 4).join('\n- ');
  const behaviorHistorySummary = summarizeHistory(behaviorHistory, 4).join('\n- ');

  const lifestyleSummary = `‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢ ${lifestyle?.exercise?.average ?? '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'} ‡∏ô‡∏≤‡∏ó‡∏µ/‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå, ` +
    `‡∏Å‡∏≤‡∏£‡∏ô‡∏≠‡∏ô‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢ ${lifestyle?.sleep?.average ?? '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'} ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á/‡∏Ñ‡∏∑‡∏ô, ` +
    `‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ñ‡∏£‡∏µ‡∏¢‡∏î ${lifestyle?.stress?.level || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}`;

  const overallSummary = overallScore
    ? `‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏°‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î ${overallScore}/100`
    : '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏°';

  return `‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏û‡∏ó‡∏¢‡πå‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç‡∏î‡πâ‡∏≤‡∏ô‡πÄ‡∏ß‡∏ä‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏£‡∏±‡∏ß‡∏ó‡∏µ‡πà‡πÉ‡∏´‡πâ‡∏Ñ‡∏≥‡∏õ‡∏£‡∏∂‡∏Å‡∏©‡∏≤‡∏£‡∏∞‡∏¢‡∏∞‡πÑ‡∏Å‡∏•

‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ (‡∏ï‡∏≠‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢):
- ‡πÄ‡∏û‡∏®: ${gender}
- ‡∏≠‡∏≤‡∏¢‡∏∏: ${age ?? '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'} ‡∏õ‡∏µ
- ‡∏™‡πà‡∏ß‡∏ô‡∏™‡∏π‡∏á: ${height}
- ‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î: ${weight}
- BMI ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô: ${bmi} (‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°: ${bmiTrend})
- ‡πÇ‡∏£‡∏Ñ‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ï‡∏±‡∏ß: ${latestConditionSummary}
- ‡∏¢‡∏≤‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏≠‡∏¢‡∏π‡πà:
- ${medicationLines.join('\n- ')}

‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á 6 ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô:
- Blood pressure trend: ${bpTrend} (‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á: ${bpRisk})
- Blood sugar trend: ${sugarTrend}
- Lifestyle summary: ${lifestyleSummary}
- ${overallSummary}

‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Ñ‡πà‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î:
- ${vitalsHistorySummary || '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•'}

‡∏û‡∏§‡∏ï‡∏¥‡∏Å‡∏£‡∏£‡∏°‡πÅ‡∏•‡∏∞‡πÑ‡∏•‡∏ü‡πå‡∏™‡πÑ‡∏ï‡∏•‡πå‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î:
- ${behaviorHistorySummary || '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•'}

‡πÇ‡∏õ‡∏£‡∏î‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏°‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û ‡πÄ‡∏ô‡πâ‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡πÇ‡∏£‡∏Ñ‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ï‡∏±‡∏ß‡πÅ‡∏•‡∏∞‡∏¢‡∏≤‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ ‡πÇ‡∏î‡∏¢‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ú‡∏•‡∏ï‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô‡πÇ‡∏•‡∏´‡∏¥‡∏ï‡∏™‡∏π‡∏á ‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏•‡πÉ‡∏ô‡πÄ‡∏•‡∏∑‡∏≠‡∏î ‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡πÇ‡∏ï‡πâ‡∏ï‡∏≠‡∏ö‡∏Ç‡∏≠‡∏á‡∏¢‡∏≤

‡∏ï‡∏≠‡∏ö‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö JSON (‡∏≠‡∏¢‡πà‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°) ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏î‡∏±‡∏á‡∏ô‡∏µ‡πâ:
{
  "overall_assessment": "‡∏™‡∏£‡∏∏‡∏õ‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡πÇ‡∏î‡∏¢‡∏£‡∏ß‡∏°",
  "riskFactors": ["‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏õ‡∏±‡∏à‡∏à‡∏±‡∏¢‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç"],
  "recommendations": {
    "diet": ["‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏î‡πâ‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£"],
    "exercise": ["‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢"],
    "lifestyle": ["‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï"],
    "medication": ["‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏¢‡∏≤"],
    "monitoring": ["‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏≠‡∏≤‡∏Å‡∏≤‡∏£"],
    "warning": ["‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡∏ß‡∏£‡∏û‡∏ö‡πÅ‡∏û‡∏ó‡∏¢‡πå"]
  },
  "improvements": ["‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡πÑ‡∏î‡πâ‡∏î‡∏µ‡∏´‡∏£‡∏∑‡∏≠‡∏û‡∏±‡∏í‡∏ô‡∏≤‡∏ï‡πà‡∏≠"],
  "monitoringPlan": ["‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏ù‡πâ‡∏≤‡∏£‡∏∞‡∏ß‡∏±‡∏á"],
  "followUp": "‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡∏ß‡∏¥‡∏ò‡∏µ‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏ú‡∏•‡∏ó‡∏µ‡πà‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥"
}
‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à‡∏´‡∏£‡∏∑‡∏≠‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠ ‡πÉ‡∏´‡πâ‡∏£‡∏∞‡∏ö‡∏∏‡πÉ‡∏ô‡∏Ñ‡πà‡∏≤ followUp
`;
};

export const generateHealthAdvice = async (payload) => {
  const client = getClient();
  if (!client) {
    return {
      success: false,
      reason: 'missing_api_key',
    };
  }

  try {
    const modelName = DEFAULT_MODEL;
    const model = client.getGenerativeModel({ model: modelName });
    const prompt = buildPrompt(payload);

    const result = await model.generateContent(prompt);
    const response = result.response;
    const text = response?.text?.() ?? '';

    const parsed = extractJson(text);
    if (!parsed) {
      logAiEvent('warn', 'Gemini returned an unparseable response', {
        model: modelName,
        rawPreview: text?.slice?.(0, 500) || null,
      });
      return {
        success: false,
        reason: 'invalid_response_format',
        rawText: text,
        model: modelName,
      };
    }
  const advice = normalizeAdvice({ ...parsed, model: modelName, source: 'gemini' });

    logAiEvent('info', 'Gemini advice generated', {
      model: modelName,
      overviewLength: advice?.overall_assessment?.length || 0,
      recommendationSections: advice?.recommendations ? Object.keys(advice.recommendations) : [],
    });

    return {
      success: true,
      data: advice,
      rawText: text,
      model: modelName,
    };
  } catch (error) {
    const enriched = {
      model: DEFAULT_MODEL,
      reason: error?.message || 'unknown_error',
      status: error?.response?.status || null,
      statusText: error?.response?.statusText || null,
      errorType: error?.name || null,
    };

    if (error?.response?.data) {
      enriched.responseData = typeof error.response.data === 'string'
        ? error.response.data.slice(0, 500)
        : error.response.data;
    }

    logAiEvent('error', 'Gemini request failed', enriched);
    return {
      success: false,
      reason: error.message,
    };
  }
};

export default generateHealthAdvice;
